
RX_c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b08  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08005c18  08005c18  00006c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d10  08005d10  00007018  2**0
                  CONTENTS
  4 .ARM          00000000  08005d10  08005d10  00007018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d10  08005d10  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d10  08005d10  00006d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d14  08005d14  00006d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08005d18  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001adc  20000018  08005d30  00007018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001af4  08005d30  00007af4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a4d  00000000  00000000  00007041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b6  00000000  00000000  0001ea8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  00022148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001107  00000000  00000000  00023718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001912e  00000000  00000000  0002481f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018251  00000000  00000000  0003d94d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000956a1  00000000  00000000  00055b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb23f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc0  00000000  00000000  000eb284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000f0e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08005c00 	.word	0x08005c00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08005c00 	.word	0x08005c00

08000150 <setUp>:
	0b10011100   // Â° (degree)
};


void setUp(LED74HC595 *ledObj, uint16_t sclkPin, GPIO_TypeDef * sclkPort, uint16_t rclkPin,
		GPIO_TypeDef * rclkPort, uint16_t dioPin, GPIO_TypeDef * dioPort) {
 8000150:	b480      	push	{r7}
 8000152:	b087      	sub	sp, #28
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	607a      	str	r2, [r7, #4]
 800015a:	461a      	mov	r2, r3
 800015c:	460b      	mov	r3, r1
 800015e:	817b      	strh	r3, [r7, #10]
 8000160:	4613      	mov	r3, r2
 8000162:	813b      	strh	r3, [r7, #8]
	_ledObj = ledObj;
 8000164:	4a1d      	ldr	r2, [pc, #116]	@ (80001dc <setUp+0x8c>)
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	6013      	str	r3, [r2, #0]
	_ledObj->sclkPin = sclkPin;
 800016a:	4b1c      	ldr	r3, [pc, #112]	@ (80001dc <setUp+0x8c>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	897a      	ldrh	r2, [r7, #10]
 8000170:	801a      	strh	r2, [r3, #0]
	_ledObj->sclkPort = sclkPort;
 8000172:	4b1a      	ldr	r3, [pc, #104]	@ (80001dc <setUp+0x8c>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	687a      	ldr	r2, [r7, #4]
 8000178:	605a      	str	r2, [r3, #4]
	_ledObj->rclkPin = rclkPin;
 800017a:	4b18      	ldr	r3, [pc, #96]	@ (80001dc <setUp+0x8c>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	893a      	ldrh	r2, [r7, #8]
 8000180:	811a      	strh	r2, [r3, #8]
	_ledObj->rclkPort = rclkPort;
 8000182:	4b16      	ldr	r3, [pc, #88]	@ (80001dc <setUp+0x8c>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	6a3a      	ldr	r2, [r7, #32]
 8000188:	60da      	str	r2, [r3, #12]
	_ledObj->dioPin = dioPin;
 800018a:	4b14      	ldr	r3, [pc, #80]	@ (80001dc <setUp+0x8c>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000190:	821a      	strh	r2, [r3, #16]
	_ledObj->dioPort = dioPort;
 8000192:	4b12      	ldr	r3, [pc, #72]	@ (80001dc <setUp+0x8c>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000198:	615a      	str	r2, [r3, #20]

	for (int i = 0; i < 4; i++) {
 800019a:	2300      	movs	r3, #0
 800019c:	617b      	str	r3, [r7, #20]
 800019e:	e010      	b.n	80001c2 <setUp+0x72>
	  _ledObj->_digitSets[i]   = (uint8_t) SEG7_OFF;
 80001a0:	4b0e      	ldr	r3, [pc, #56]	@ (80001dc <setUp+0x8c>)
 80001a2:	681a      	ldr	r2, [r3, #0]
 80001a4:	697b      	ldr	r3, [r7, #20]
 80001a6:	4413      	add	r3, r2
 80001a8:	3318      	adds	r3, #24
 80001aa:	22ff      	movs	r2, #255	@ 0xff
 80001ac:	701a      	strb	r2, [r3, #0]
	  _ledObj->_digitValues[i] = (uint8_t) SEG7_OFF;
 80001ae:	4b0b      	ldr	r3, [pc, #44]	@ (80001dc <setUp+0x8c>)
 80001b0:	681a      	ldr	r2, [r3, #0]
 80001b2:	697b      	ldr	r3, [r7, #20]
 80001b4:	4413      	add	r3, r2
 80001b6:	331c      	adds	r3, #28
 80001b8:	22ff      	movs	r2, #255	@ 0xff
 80001ba:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 80001bc:	697b      	ldr	r3, [r7, #20]
 80001be:	3301      	adds	r3, #1
 80001c0:	617b      	str	r3, [r7, #20]
 80001c2:	697b      	ldr	r3, [r7, #20]
 80001c4:	2b03      	cmp	r3, #3
 80001c6:	ddeb      	ble.n	80001a0 <setUp+0x50>
	}

	_ledObj->_digitDots      = 0x00;
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <setUp+0x8c>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	2200      	movs	r2, #0
 80001ce:	f883 2020 	strb.w	r2, [r3, #32]
}
 80001d2:	bf00      	nop
 80001d4:	371c      	adds	r7, #28
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	20000034 	.word	0x20000034

080001e0 <clear>:


void clear() {
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
	_ledObj->_digitDots = 0x00;
 80001e6:	4b0d      	ldr	r3, [pc, #52]	@ (800021c <clear+0x3c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2200      	movs	r2, #0
 80001ec:	f883 2020 	strb.w	r2, [r3, #32]

	for (int i = 0; i < 4; i++)
 80001f0:	2300      	movs	r3, #0
 80001f2:	607b      	str	r3, [r7, #4]
 80001f4:	e009      	b.n	800020a <clear+0x2a>
		_ledObj->_digitSets[i] = 0xFF;
 80001f6:	4b09      	ldr	r3, [pc, #36]	@ (800021c <clear+0x3c>)
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4413      	add	r3, r2
 80001fe:	3318      	adds	r3, #24
 8000200:	22ff      	movs	r2, #255	@ 0xff
 8000202:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b03      	cmp	r3, #3
 800020e:	ddf2      	ble.n	80001f6 <clear+0x16>
}
 8000210:	bf00      	nop
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	20000034 	.word	0x20000034

08000220 <setNumber>:

  _ledObj->_digitDots |= 1 << (pos - 1);
}


void setNumber(int pos, int value) {
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
  if (pos < 1 || pos > 4)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2b00      	cmp	r3, #0
 800022e:	dd14      	ble.n	800025a <setNumber+0x3a>
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2b04      	cmp	r3, #4
 8000234:	dc11      	bgt.n	800025a <setNumber+0x3a>
    return;

  if (value < 0 || pos > 9)
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	2b00      	cmp	r3, #0
 800023a:	db10      	blt.n	800025e <setNumber+0x3e>
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2b09      	cmp	r3, #9
 8000240:	dc0d      	bgt.n	800025e <setNumber+0x3e>
    return;

  _ledObj->_digitSets[pos - 1] = digitPatterns[value];
 8000242:	4b09      	ldr	r3, [pc, #36]	@ (8000268 <setNumber+0x48>)
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	3b01      	subs	r3, #1
 800024a:	4808      	ldr	r0, [pc, #32]	@ (800026c <setNumber+0x4c>)
 800024c:	6839      	ldr	r1, [r7, #0]
 800024e:	4401      	add	r1, r0
 8000250:	7809      	ldrb	r1, [r1, #0]
 8000252:	4413      	add	r3, r2
 8000254:	460a      	mov	r2, r1
 8000256:	761a      	strb	r2, [r3, #24]
 8000258:	e002      	b.n	8000260 <setNumber+0x40>
    return;
 800025a:	bf00      	nop
 800025c:	e000      	b.n	8000260 <setNumber+0x40>
    return;
 800025e:	bf00      	nop
}
 8000260:	370c      	adds	r7, #12
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	20000034 	.word	0x20000034
 800026c:	08005c68 	.word	0x08005c68

08000270 <setChar>:


void setChar(int pos, SegChars value) {
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	460b      	mov	r3, r1
 800027a:	70fb      	strb	r3, [r7, #3]
	if (pos < 1 || pos > 4)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b00      	cmp	r3, #0
 8000280:	dd4a      	ble.n	8000318 <setChar+0xa8>
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2b04      	cmp	r3, #4
 8000286:	dc47      	bgt.n	8000318 <setChar+0xa8>
		return;

	switch (value) {
 8000288:	78fb      	ldrb	r3, [r7, #3]
 800028a:	2b05      	cmp	r3, #5
 800028c:	d845      	bhi.n	800031a <setChar+0xaa>
 800028e:	a201      	add	r2, pc, #4	@ (adr r2, 8000294 <setChar+0x24>)
 8000290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000294:	080002ad 	.word	0x080002ad
 8000298:	080002bf 	.word	0x080002bf
 800029c:	080002d1 	.word	0x080002d1
 80002a0:	080002e3 	.word	0x080002e3
 80002a4:	080002f5 	.word	0x080002f5
 80002a8:	08000307 	.word	0x08000307
		case __DASH:
			_ledObj->_digitSets[pos - 1] = digitPatterns[10];
 80002ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000324 <setChar+0xb4>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	3b01      	subs	r3, #1
 80002b4:	21bf      	movs	r1, #191	@ 0xbf
 80002b6:	4413      	add	r3, r2
 80002b8:	460a      	mov	r2, r1
 80002ba:	761a      	strb	r2, [r3, #24]
			  break;
 80002bc:	e02d      	b.n	800031a <setChar+0xaa>

		case __UNDERSCORE:
			_ledObj->_digitSets[pos - 1] = digitPatterns[11];
 80002be:	4b19      	ldr	r3, [pc, #100]	@ (8000324 <setChar+0xb4>)
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	3b01      	subs	r3, #1
 80002c6:	21f7      	movs	r1, #247	@ 0xf7
 80002c8:	4413      	add	r3, r2
 80002ca:	460a      	mov	r2, r1
 80002cc:	761a      	strb	r2, [r3, #24]
			break;
 80002ce:	e024      	b.n	800031a <setChar+0xaa>

		case __C:
			_ledObj->_digitSets[pos - 1] = digitPatterns[12];
 80002d0:	4b14      	ldr	r3, [pc, #80]	@ (8000324 <setChar+0xb4>)
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	3b01      	subs	r3, #1
 80002d8:	21c6      	movs	r1, #198	@ 0xc6
 80002da:	4413      	add	r3, r2
 80002dc:	460a      	mov	r2, r1
 80002de:	761a      	strb	r2, [r3, #24]
			break;
 80002e0:	e01b      	b.n	800031a <setChar+0xaa>

		case __E:
			_ledObj->_digitSets[pos - 1] = digitPatterns[13];
 80002e2:	4b10      	ldr	r3, [pc, #64]	@ (8000324 <setChar+0xb4>)
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	3b01      	subs	r3, #1
 80002ea:	2186      	movs	r1, #134	@ 0x86
 80002ec:	4413      	add	r3, r2
 80002ee:	460a      	mov	r2, r1
 80002f0:	761a      	strb	r2, [r3, #24]
			break;
 80002f2:	e012      	b.n	800031a <setChar+0xaa>

		case __F:
			_ledObj->_digitSets[pos - 1] = digitPatterns[14];
 80002f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <setChar+0xb4>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	3b01      	subs	r3, #1
 80002fc:	218e      	movs	r1, #142	@ 0x8e
 80002fe:	4413      	add	r3, r2
 8000300:	460a      	mov	r2, r1
 8000302:	761a      	strb	r2, [r3, #24]
			break;
 8000304:	e009      	b.n	800031a <setChar+0xaa>

		case __DEGREE:
			_ledObj->_digitSets[pos - 1] = digitPatterns[15];
 8000306:	4b07      	ldr	r3, [pc, #28]	@ (8000324 <setChar+0xb4>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	3b01      	subs	r3, #1
 800030e:	219c      	movs	r1, #156	@ 0x9c
 8000310:	4413      	add	r3, r2
 8000312:	460a      	mov	r2, r1
 8000314:	761a      	strb	r2, [r3, #24]
			break;
 8000316:	e000      	b.n	800031a <setChar+0xaa>
		return;
 8000318:	bf00      	nop
  }
}
 800031a:	370c      	adds	r7, #12
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	20000034 	.word	0x20000034

08000328 <show>:

void show() {
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++)
 800032e:	2300      	movs	r3, #0
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	e00f      	b.n	8000354 <show+0x2c>
		_ledObj->_digitValues[i] = _ledObj->_digitSets[i];
 8000334:	4b0c      	ldr	r3, [pc, #48]	@ (8000368 <show+0x40>)
 8000336:	6819      	ldr	r1, [r3, #0]
 8000338:	4b0b      	ldr	r3, [pc, #44]	@ (8000368 <show+0x40>)
 800033a:	681a      	ldr	r2, [r3, #0]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	440b      	add	r3, r1
 8000340:	3318      	adds	r3, #24
 8000342:	7819      	ldrb	r1, [r3, #0]
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4413      	add	r3, r2
 8000348:	331c      	adds	r3, #28
 800034a:	460a      	mov	r2, r1
 800034c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	3301      	adds	r3, #1
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	2b03      	cmp	r3, #3
 8000358:	ddec      	ble.n	8000334 <show+0xc>
}
 800035a:	bf00      	nop
 800035c:	bf00      	nop
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	20000034 	.word	0x20000034

0800036c <loop>:

void loop() {
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0

	for (int i = 0; i < 4; i++) {
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	e03c      	b.n	80003f2 <loop+0x86>
		int digit = 0x08 >> i;
 8000378:	2208      	movs	r2, #8
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	fa42 f303 	asr.w	r3, r2, r3
 8000380:	607b      	str	r3, [r7, #4]
		int value = _ledObj->_digitValues[i];
 8000382:	4b20      	ldr	r3, [pc, #128]	@ (8000404 <loop+0x98>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	4413      	add	r3, r2
 800038a:	331c      	adds	r3, #28
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	60bb      	str	r3, [r7, #8]

		if (_ledObj->_digitDots & (1 << i))
 8000390:	4b1c      	ldr	r3, [pc, #112]	@ (8000404 <loop+0x98>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000398:	461a      	mov	r2, r3
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	fa42 f303 	asr.w	r3, r2, r3
 80003a0:	f003 0301 	and.w	r3, r3, #1
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d003      	beq.n	80003b0 <loop+0x44>
			value &= 0x7F;
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80003ae:	60bb      	str	r3, [r7, #8]

		shift(value);
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f827 	bl	8000408 <shift>
		shift(digit);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 f822 	bl	8000408 <shift>

		// RCLK LOW and HIGH level settings
		HAL_GPIO_WritePin(_ledObj->rclkPort, _ledObj->rclkPin, RESET);
 80003c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000404 <loop+0x98>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	68d8      	ldr	r0, [r3, #12]
 80003ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000404 <loop+0x98>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	891b      	ldrh	r3, [r3, #8]
 80003d0:	2200      	movs	r2, #0
 80003d2:	4619      	mov	r1, r3
 80003d4:	f001 f9be 	bl	8001754 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(_ledObj->rclkPort, _ledObj->rclkPin, SET);
 80003d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000404 <loop+0x98>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	68d8      	ldr	r0, [r3, #12]
 80003de:	4b09      	ldr	r3, [pc, #36]	@ (8000404 <loop+0x98>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	891b      	ldrh	r3, [r3, #8]
 80003e4:	2201      	movs	r2, #1
 80003e6:	4619      	mov	r1, r3
 80003e8:	f001 f9b4 	bl	8001754 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	3301      	adds	r3, #1
 80003f0:	60fb      	str	r3, [r7, #12]
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	2b03      	cmp	r3, #3
 80003f6:	ddbf      	ble.n	8000378 <loop+0xc>
		//HAL_Delay(1000);
	}

}
 80003f8:	bf00      	nop
 80003fa:	bf00      	nop
 80003fc:	3710      	adds	r7, #16
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000034 	.word	0x20000034

08000408 <shift>:



void shift(uint8_t value) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 8; i >= 1; i--) {
 8000412:	2308      	movs	r3, #8
 8000414:	73fb      	strb	r3, [r7, #15]
 8000416:	e032      	b.n	800047e <shift+0x76>
		if (value & 0x80)
 8000418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800041c:	2b00      	cmp	r3, #0
 800041e:	da0a      	bge.n	8000436 <shift+0x2e>
			HAL_GPIO_WritePin(_ledObj->dioPort, _ledObj->dioPin, SET);
 8000420:	4b1b      	ldr	r3, [pc, #108]	@ (8000490 <shift+0x88>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	6958      	ldr	r0, [r3, #20]
 8000426:	4b1a      	ldr	r3, [pc, #104]	@ (8000490 <shift+0x88>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	8a1b      	ldrh	r3, [r3, #16]
 800042c:	2201      	movs	r2, #1
 800042e:	4619      	mov	r1, r3
 8000430:	f001 f990 	bl	8001754 <HAL_GPIO_WritePin>
 8000434:	e009      	b.n	800044a <shift+0x42>
		else
			HAL_GPIO_WritePin(_ledObj->dioPort, _ledObj->dioPin, RESET);
 8000436:	4b16      	ldr	r3, [pc, #88]	@ (8000490 <shift+0x88>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	6958      	ldr	r0, [r3, #20]
 800043c:	4b14      	ldr	r3, [pc, #80]	@ (8000490 <shift+0x88>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	8a1b      	ldrh	r3, [r3, #16]
 8000442:	2200      	movs	r2, #0
 8000444:	4619      	mov	r1, r3
 8000446:	f001 f985 	bl	8001754 <HAL_GPIO_WritePin>

    value <<= 1;
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(_ledObj->sclkPort, _ledObj->sclkPin, RESET);
 8000450:	4b0f      	ldr	r3, [pc, #60]	@ (8000490 <shift+0x88>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	6858      	ldr	r0, [r3, #4]
 8000456:	4b0e      	ldr	r3, [pc, #56]	@ (8000490 <shift+0x88>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	881b      	ldrh	r3, [r3, #0]
 800045c:	2200      	movs	r2, #0
 800045e:	4619      	mov	r1, r3
 8000460:	f001 f978 	bl	8001754 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(_ledObj->sclkPort, _ledObj->sclkPin, SET);
 8000464:	4b0a      	ldr	r3, [pc, #40]	@ (8000490 <shift+0x88>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	6858      	ldr	r0, [r3, #4]
 800046a:	4b09      	ldr	r3, [pc, #36]	@ (8000490 <shift+0x88>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	881b      	ldrh	r3, [r3, #0]
 8000470:	2201      	movs	r2, #1
 8000472:	4619      	mov	r1, r3
 8000474:	f001 f96e 	bl	8001754 <HAL_GPIO_WritePin>
	for (uint8_t i = 8; i >= 1; i--) {
 8000478:	7bfb      	ldrb	r3, [r7, #15]
 800047a:	3b01      	subs	r3, #1
 800047c:	73fb      	strb	r3, [r7, #15]
 800047e:	7bfb      	ldrb	r3, [r7, #15]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d1c9      	bne.n	8000418 <shift+0x10>
  }
}
 8000484:	bf00      	nop
 8000486:	bf00      	nop
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	20000034 	.word	0x20000034

08000494 <setInt>:



void setInt(int number, bool zeroPadding) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	460b      	mov	r3, r1
 800049e:	70fb      	strb	r3, [r7, #3]
	if (number > 9999) // trim
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80004a6:	4293      	cmp	r3, r2
 80004a8:	dd0d      	ble.n	80004c6 <setInt+0x32>
		number %=  10000;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a4a      	ldr	r2, [pc, #296]	@ (80005d8 <setInt+0x144>)
 80004ae:	fb82 1203 	smull	r1, r2, r2, r3
 80004b2:	1311      	asrs	r1, r2, #12
 80004b4:	17da      	asrs	r2, r3, #31
 80004b6:	1a8a      	subs	r2, r1, r2
 80004b8:	f242 7110 	movw	r1, #10000	@ 0x2710
 80004bc:	fb01 f202 	mul.w	r2, r1, r2
 80004c0:	1a9b      	subs	r3, r3, r2
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	e010      	b.n	80004e8 <setInt+0x54>
	else if (number < -999) // trim
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80004cc:	dc0c      	bgt.n	80004e8 <setInt+0x54>
		number %= 1000;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4a42      	ldr	r2, [pc, #264]	@ (80005dc <setInt+0x148>)
 80004d2:	fb82 1203 	smull	r1, r2, r2, r3
 80004d6:	1191      	asrs	r1, r2, #6
 80004d8:	17da      	asrs	r2, r3, #31
 80004da:	1a8a      	subs	r2, r1, r2
 80004dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80004e0:	fb01 f202 	mul.w	r2, r1, r2
 80004e4:	1a9b      	subs	r3, r3, r2
 80004e6:	607b      	str	r3, [r7, #4]

	int digitNum = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61fb      	str	r3, [r7, #28]
	int numberAbs = abs(number);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	bfb8      	it	lt
 80004f2:	425b      	neglt	r3, r3
 80004f4:	613b      	str	r3, [r7, #16]

	if (numberAbs <= 9999 && numberAbs >= 1009)
 80004f6:	693b      	ldr	r3, [r7, #16]
 80004f8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80004fc:	4293      	cmp	r3, r2
 80004fe:	dc06      	bgt.n	800050e <setInt+0x7a>
 8000500:	693b      	ldr	r3, [r7, #16]
 8000502:	f5b3 7f7c 	cmp.w	r3, #1008	@ 0x3f0
 8000506:	dd02      	ble.n	800050e <setInt+0x7a>
		digitNum = 4;
 8000508:	2304      	movs	r3, #4
 800050a:	61fb      	str	r3, [r7, #28]
 800050c:	e01a      	b.n	8000544 <setInt+0xb0>
	else  if (numberAbs <= 999 && numberAbs >= 100)
 800050e:	693b      	ldr	r3, [r7, #16]
 8000510:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000514:	da05      	bge.n	8000522 <setInt+0x8e>
 8000516:	693b      	ldr	r3, [r7, #16]
 8000518:	2b63      	cmp	r3, #99	@ 0x63
 800051a:	dd02      	ble.n	8000522 <setInt+0x8e>
		digitNum = 3;
 800051c:	2303      	movs	r3, #3
 800051e:	61fb      	str	r3, [r7, #28]
 8000520:	e010      	b.n	8000544 <setInt+0xb0>
	else if (numberAbs <= 99 && numberAbs >= 10)
 8000522:	693b      	ldr	r3, [r7, #16]
 8000524:	2b63      	cmp	r3, #99	@ 0x63
 8000526:	dc05      	bgt.n	8000534 <setInt+0xa0>
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	2b09      	cmp	r3, #9
 800052c:	dd02      	ble.n	8000534 <setInt+0xa0>
		digitNum = 2;
 800052e:	2302      	movs	r3, #2
 8000530:	61fb      	str	r3, [r7, #28]
 8000532:	e007      	b.n	8000544 <setInt+0xb0>
	else if (numberAbs <= 9 && numberAbs >= 0)
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	2b09      	cmp	r3, #9
 8000538:	dc04      	bgt.n	8000544 <setInt+0xb0>
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	2b00      	cmp	r3, #0
 800053e:	db01      	blt.n	8000544 <setInt+0xb0>
		digitNum = 1;
 8000540:	2301      	movs	r3, #1
 8000542:	61fb      	str	r3, [r7, #28]

	if (number < 0)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b00      	cmp	r3, #0
 8000548:	da02      	bge.n	8000550 <setInt+0xbc>
		digitNum++;
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	3301      	adds	r3, #1
 800054e:	61fb      	str	r3, [r7, #28]

	int denominator = 10000;
 8000550:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000554:	61bb      	str	r3, [r7, #24]
	for (int pos = 1; pos <= 4; pos++) {
 8000556:	2301      	movs	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
 800055a:	e035      	b.n	80005c8 <setInt+0x134>
		denominator /= 10;
 800055c:	69bb      	ldr	r3, [r7, #24]
 800055e:	4a20      	ldr	r2, [pc, #128]	@ (80005e0 <setInt+0x14c>)
 8000560:	fb82 1203 	smull	r1, r2, r2, r3
 8000564:	1092      	asrs	r2, r2, #2
 8000566:	17db      	asrs	r3, r3, #31
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	61bb      	str	r3, [r7, #24]
		if (!zeroPadding && pos <= (4 - digitNum))
 800056c:	78fb      	ldrb	r3, [r7, #3]
 800056e:	f083 0301 	eor.w	r3, r3, #1
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2b00      	cmp	r3, #0
 8000576:	d005      	beq.n	8000584 <setInt+0xf0>
 8000578:	69fb      	ldr	r3, [r7, #28]
 800057a:	f1c3 0304 	rsb	r3, r3, #4
 800057e:	697a      	ldr	r2, [r7, #20]
 8000580:	429a      	cmp	r2, r3
 8000582:	dd1d      	ble.n	80005c0 <setInt+0x12c>
			continue;

		if (number < 0) {
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2b00      	cmp	r3, #0
 8000588:	da07      	bge.n	800059a <setInt+0x106>
			setChar(pos, __DASH); // set - at the 1st digit
 800058a:	2100      	movs	r1, #0
 800058c:	6978      	ldr	r0, [r7, #20]
 800058e:	f7ff fe6f 	bl	8000270 <setChar>
			number *= -1;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	425b      	negs	r3, r3
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	e013      	b.n	80005c2 <setInt+0x12e>
		} else {
			int digit = number / denominator;
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	69bb      	ldr	r3, [r7, #24]
 800059e:	fb92 f3f3 	sdiv	r3, r2, r3
 80005a2:	60fb      	str	r3, [r7, #12]
			number = number % denominator;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	69ba      	ldr	r2, [r7, #24]
 80005a8:	fb93 f2f2 	sdiv	r2, r3, r2
 80005ac:	69b9      	ldr	r1, [r7, #24]
 80005ae:	fb01 f202 	mul.w	r2, r1, r2
 80005b2:	1a9b      	subs	r3, r3, r2
 80005b4:	607b      	str	r3, [r7, #4]
			setNumber(pos, digit);
 80005b6:	68f9      	ldr	r1, [r7, #12]
 80005b8:	6978      	ldr	r0, [r7, #20]
 80005ba:	f7ff fe31 	bl	8000220 <setNumber>
 80005be:	e000      	b.n	80005c2 <setInt+0x12e>
			continue;
 80005c0:	bf00      	nop
	for (int pos = 1; pos <= 4; pos++) {
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	3301      	adds	r3, #1
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	2b04      	cmp	r3, #4
 80005cc:	ddc6      	ble.n	800055c <setInt+0xc8>
		}
	}
}
 80005ce:	bf00      	nop
 80005d0:	bf00      	nop
 80005d2:	3720      	adds	r7, #32
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	68db8bad 	.word	0x68db8bad
 80005dc:	10624dd3 	.word	0x10624dd3
 80005e0:	66666667 	.word	0x66666667

080005e4 <printInt>:

void printInt(int number, bool zeroPadding) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	70fb      	strb	r3, [r7, #3]
	clear();
 80005f0:	f7ff fdf6 	bl	80001e0 <clear>
	setInt(number, zeroPadding);
 80005f4:	78fb      	ldrb	r3, [r7, #3]
 80005f6:	4619      	mov	r1, r3
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff ff4b 	bl	8000494 <setInt>
	show(); // show on the display
 80005fe:	f7ff fe93 	bl	8000328 <show>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <CS_Select>:
#define NRF24_CSN_PIN    GPIO_PIN_0



void CS_Select (void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2101      	movs	r1, #1
 8000614:	4802      	ldr	r0, [pc, #8]	@ (8000620 <CS_Select+0x14>)
 8000616:	f001 f89d 	bl	8001754 <HAL_GPIO_WritePin>
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40010c00 	.word	0x40010c00

08000624 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2101      	movs	r1, #1
 800062c:	4802      	ldr	r0, [pc, #8]	@ (8000638 <CS_UnSelect+0x14>)
 800062e:	f001 f891 	bl	8001754 <HAL_GPIO_WritePin>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40010c00 	.word	0x40010c00

0800063c <CE_Enable>:


void CE_Enable (void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	2110      	movs	r1, #16
 8000644:	4802      	ldr	r0, [pc, #8]	@ (8000650 <CE_Enable+0x14>)
 8000646:	f001 f885 	bl	8001754 <HAL_GPIO_WritePin>
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40010800 	.word	0x40010800

08000654 <CE_Disable>:

void CE_Disable (void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2110      	movs	r1, #16
 800065c:	4802      	ldr	r0, [pc, #8]	@ (8000668 <CE_Disable+0x14>)
 800065e:	f001 f879 	bl	8001754 <HAL_GPIO_WritePin>
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40010800 	.word	0x40010800

0800066c <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	460a      	mov	r2, r1
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	4613      	mov	r3, r2
 800067a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f043 0320 	orr.w	r3, r3, #32
 8000682:	b2db      	uxtb	r3, r3
 8000684:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8000686:	79bb      	ldrb	r3, [r7, #6]
 8000688:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800068a:	f7ff ffbf 	bl	800060c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 800068e:	f107 010c 	add.w	r1, r7, #12
 8000692:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000696:	2202      	movs	r2, #2
 8000698:	4804      	ldr	r0, [pc, #16]	@ (80006ac <nrf24_WriteReg+0x40>)
 800069a:	f001 fd37 	bl	800210c <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800069e:	f7ff ffc1 	bl	8000624 <CS_UnSelect>
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000038 	.word	0x20000038

080006b0 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	f043 0320 	orr.w	r3, r3, #32
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80006c8:	f7ff ffa0 	bl	800060c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80006cc:	f107 0114 	add.w	r1, r7, #20
 80006d0:	2364      	movs	r3, #100	@ 0x64
 80006d2:	2201      	movs	r2, #1
 80006d4:	4808      	ldr	r0, [pc, #32]	@ (80006f8 <nrf24_WriteRegMulti+0x48>)
 80006d6:	f001 fd19 	bl	800210c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	b29a      	uxth	r2, r3
 80006de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e2:	68b9      	ldr	r1, [r7, #8]
 80006e4:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <nrf24_WriteRegMulti+0x48>)
 80006e6:	f001 fd11 	bl	800210c <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80006ea:	f7ff ff9b 	bl	8000624 <CS_UnSelect>
}
 80006ee:	bf00      	nop
 80006f0:	3718      	adds	r7, #24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000038 	.word	0x20000038

080006fc <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000706:	2300      	movs	r3, #0
 8000708:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800070a:	f7ff ff7f 	bl	800060c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800070e:	1df9      	adds	r1, r7, #7
 8000710:	2364      	movs	r3, #100	@ 0x64
 8000712:	2201      	movs	r2, #1
 8000714:	4808      	ldr	r0, [pc, #32]	@ (8000738 <nrf24_ReadReg+0x3c>)
 8000716:	f001 fcf9 	bl	800210c <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800071a:	f107 010f 	add.w	r1, r7, #15
 800071e:	2364      	movs	r3, #100	@ 0x64
 8000720:	2201      	movs	r2, #1
 8000722:	4805      	ldr	r0, [pc, #20]	@ (8000738 <nrf24_ReadReg+0x3c>)
 8000724:	f001 fe35 	bl	8002392 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000728:	f7ff ff7c 	bl	8000624 <CS_UnSelect>

	return data;
 800072c:	7bfb      	ldrb	r3, [r7, #15]
}
 800072e:	4618      	mov	r0, r3
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000038 	.word	0x20000038

0800073c <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
 8000748:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800074a:	f7ff ff5f 	bl	800060c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800074e:	f107 010f 	add.w	r1, r7, #15
 8000752:	2364      	movs	r3, #100	@ 0x64
 8000754:	2201      	movs	r2, #1
 8000756:	4808      	ldr	r0, [pc, #32]	@ (8000778 <nrf24_ReadReg_Multi+0x3c>)
 8000758:	f001 fcd8 	bl	800210c <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	b29a      	uxth	r2, r3
 8000760:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000764:	68b9      	ldr	r1, [r7, #8]
 8000766:	4804      	ldr	r0, [pc, #16]	@ (8000778 <nrf24_ReadReg_Multi+0x3c>)
 8000768:	f001 fe13 	bl	8002392 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800076c:	f7ff ff5a 	bl	8000624 <CS_UnSelect>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000038 	.word	0x20000038

0800077c <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000786:	f7ff ff41 	bl	800060c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 800078a:	1df9      	adds	r1, r7, #7
 800078c:	2364      	movs	r3, #100	@ 0x64
 800078e:	2201      	movs	r2, #1
 8000790:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <nrfsendCmd+0x28>)
 8000792:	f001 fcbb 	bl	800210c <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000796:	f7ff ff45 	bl	8000624 <CS_UnSelect>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000038 	.word	0x20000038

080007a8 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b07      	cmp	r3, #7
 80007b6:	d104      	bne.n	80007c2 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80007b8:	2100      	movs	r1, #0
 80007ba:	2007      	movs	r0, #7
 80007bc:	f7ff ff56 	bl	800066c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80007c0:	e090      	b.n	80008e4 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b17      	cmp	r3, #23
 80007c6:	d104      	bne.n	80007d2 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80007c8:	2111      	movs	r1, #17
 80007ca:	2017      	movs	r0, #23
 80007cc:	f7ff ff4e 	bl	800066c <nrf24_WriteReg>
}
 80007d0:	e088      	b.n	80008e4 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80007d2:	2108      	movs	r1, #8
 80007d4:	2000      	movs	r0, #0
 80007d6:	f7ff ff49 	bl	800066c <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80007da:	213f      	movs	r1, #63	@ 0x3f
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff ff45 	bl	800066c <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80007e2:	2103      	movs	r1, #3
 80007e4:	2002      	movs	r0, #2
 80007e6:	f7ff ff41 	bl	800066c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80007ea:	2103      	movs	r1, #3
 80007ec:	2003      	movs	r0, #3
 80007ee:	f7ff ff3d 	bl	800066c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80007f2:	2103      	movs	r1, #3
 80007f4:	2004      	movs	r0, #4
 80007f6:	f7ff ff39 	bl	800066c <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80007fa:	2102      	movs	r1, #2
 80007fc:	2005      	movs	r0, #5
 80007fe:	f7ff ff35 	bl	800066c <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000802:	210e      	movs	r1, #14
 8000804:	2006      	movs	r0, #6
 8000806:	f7ff ff31 	bl	800066c <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 800080a:	2100      	movs	r1, #0
 800080c:	2007      	movs	r0, #7
 800080e:	f7ff ff2d 	bl	800066c <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000812:	2100      	movs	r1, #0
 8000814:	2008      	movs	r0, #8
 8000816:	f7ff ff29 	bl	800066c <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 800081a:	2100      	movs	r1, #0
 800081c:	2009      	movs	r0, #9
 800081e:	f7ff ff25 	bl	800066c <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000822:	4a32      	ldr	r2, [pc, #200]	@ (80008ec <nrf24_reset+0x144>)
 8000824:	f107 0318 	add.w	r3, r7, #24
 8000828:	e892 0003 	ldmia.w	r2, {r0, r1}
 800082c:	6018      	str	r0, [r3, #0]
 800082e:	3304      	adds	r3, #4
 8000830:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000832:	f107 0318 	add.w	r3, r7, #24
 8000836:	2205      	movs	r2, #5
 8000838:	4619      	mov	r1, r3
 800083a:	200a      	movs	r0, #10
 800083c:	f7ff ff38 	bl	80006b0 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000840:	4a2b      	ldr	r2, [pc, #172]	@ (80008f0 <nrf24_reset+0x148>)
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	e892 0003 	ldmia.w	r2, {r0, r1}
 800084a:	6018      	str	r0, [r3, #0]
 800084c:	3304      	adds	r3, #4
 800084e:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	2205      	movs	r2, #5
 8000856:	4619      	mov	r1, r3
 8000858:	200b      	movs	r0, #11
 800085a:	f7ff ff29 	bl	80006b0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800085e:	21c3      	movs	r1, #195	@ 0xc3
 8000860:	200c      	movs	r0, #12
 8000862:	f7ff ff03 	bl	800066c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8000866:	21c4      	movs	r1, #196	@ 0xc4
 8000868:	200d      	movs	r0, #13
 800086a:	f7ff feff 	bl	800066c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 800086e:	21c5      	movs	r1, #197	@ 0xc5
 8000870:	200e      	movs	r0, #14
 8000872:	f7ff fefb 	bl	800066c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8000876:	21c6      	movs	r1, #198	@ 0xc6
 8000878:	200f      	movs	r0, #15
 800087a:	f7ff fef7 	bl	800066c <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800087e:	4a1b      	ldr	r2, [pc, #108]	@ (80008ec <nrf24_reset+0x144>)
 8000880:	f107 0308 	add.w	r3, r7, #8
 8000884:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000888:	6018      	str	r0, [r3, #0]
 800088a:	3304      	adds	r3, #4
 800088c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	2205      	movs	r2, #5
 8000894:	4619      	mov	r1, r3
 8000896:	2010      	movs	r0, #16
 8000898:	f7ff ff0a 	bl	80006b0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 800089c:	2100      	movs	r1, #0
 800089e:	2011      	movs	r0, #17
 80008a0:	f7ff fee4 	bl	800066c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80008a4:	2100      	movs	r1, #0
 80008a6:	2012      	movs	r0, #18
 80008a8:	f7ff fee0 	bl	800066c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80008ac:	2100      	movs	r1, #0
 80008ae:	2013      	movs	r0, #19
 80008b0:	f7ff fedc 	bl	800066c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80008b4:	2100      	movs	r1, #0
 80008b6:	2014      	movs	r0, #20
 80008b8:	f7ff fed8 	bl	800066c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80008bc:	2100      	movs	r1, #0
 80008be:	2015      	movs	r0, #21
 80008c0:	f7ff fed4 	bl	800066c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80008c4:	2100      	movs	r1, #0
 80008c6:	2016      	movs	r0, #22
 80008c8:	f7ff fed0 	bl	800066c <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80008cc:	2111      	movs	r1, #17
 80008ce:	2017      	movs	r0, #23
 80008d0:	f7ff fecc 	bl	800066c <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80008d4:	2100      	movs	r1, #0
 80008d6:	201c      	movs	r0, #28
 80008d8:	f7ff fec8 	bl	800066c <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80008dc:	2100      	movs	r1, #0
 80008de:	201d      	movs	r0, #29
 80008e0:	f7ff fec4 	bl	800066c <nrf24_WriteReg>
}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	08005c18 	.word	0x08005c18
 80008f0:	08005c20 	.word	0x08005c20

080008f4 <NRF24_Init>:




void NRF24_Init (void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80008f8:	f7ff feac 	bl	8000654 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff ff53 	bl	80007a8 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8000902:	2100      	movs	r1, #0
 8000904:	2000      	movs	r0, #0
 8000906:	f7ff feb1 	bl	800066c <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 800090a:	2100      	movs	r1, #0
 800090c:	2001      	movs	r0, #1
 800090e:	f7ff fead 	bl	800066c <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8000912:	2100      	movs	r1, #0
 8000914:	2002      	movs	r0, #2
 8000916:	f7ff fea9 	bl	800066c <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800091a:	2103      	movs	r1, #3
 800091c:	2003      	movs	r0, #3
 800091e:	f7ff fea5 	bl	800066c <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8000922:	2100      	movs	r1, #0
 8000924:	2004      	movs	r0, #4
 8000926:	f7ff fea1 	bl	800066c <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800092a:	2100      	movs	r1, #0
 800092c:	2005      	movs	r0, #5
 800092e:	f7ff fe9d 	bl	800066c <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8000932:	210e      	movs	r1, #14
 8000934:	2006      	movs	r0, #6
 8000936:	f7ff fe99 	bl	800066c <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800093a:	f7ff fe7f 	bl	800063c <CE_Enable>

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}

08000942 <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b084      	sub	sp, #16
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
 800094a:	460b      	mov	r3, r1
 800094c:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800094e:	f7ff fe81 	bl	8000654 <CE_Disable>

	nrf24_reset (STATUS);
 8000952:	2007      	movs	r0, #7
 8000954:	f7ff ff28 	bl	80007a8 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000958:	78fb      	ldrb	r3, [r7, #3]
 800095a:	4619      	mov	r1, r3
 800095c:	2005      	movs	r0, #5
 800095e:	f7ff fe85 	bl	800066c <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 8000962:	2002      	movs	r0, #2
 8000964:	f7ff feca 	bl	80006fc <nrf24_ReadReg>
 8000968:	4603      	mov	r3, r0
 800096a:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	f043 0304 	orr.w	r3, r3, #4
 8000972:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	4619      	mov	r1, r3
 8000978:	2002      	movs	r0, #2
 800097a:	f7ff fe77 	bl	800066c <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 800097e:	2205      	movs	r2, #5
 8000980:	6879      	ldr	r1, [r7, #4]
 8000982:	200b      	movs	r0, #11
 8000984:	f7ff fe94 	bl	80006b0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8000988:	21ee      	movs	r1, #238	@ 0xee
 800098a:	200c      	movs	r0, #12
 800098c:	f7ff fe6e 	bl	800066c <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8000990:	2120      	movs	r1, #32
 8000992:	2013      	movs	r0, #19
 8000994:	f7ff fe6a 	bl	800066c <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000998:	2000      	movs	r0, #0
 800099a:	f7ff feaf 	bl	80006fc <nrf24_ReadReg>
 800099e:	4603      	mov	r3, r0
 80009a0:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 80009a2:	7bbb      	ldrb	r3, [r7, #14]
 80009a4:	f043 0303 	orr.w	r3, r3, #3
 80009a8:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 80009aa:	7bbb      	ldrb	r3, [r7, #14]
 80009ac:	4619      	mov	r1, r3
 80009ae:	2000      	movs	r0, #0
 80009b0:	f7ff fe5c 	bl	800066c <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80009b4:	f7ff fe42 	bl	800063c <CE_Enable>
}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]

	uint8_t status = nrf24_ReadReg(STATUS);
 80009c8:	2007      	movs	r0, #7
 80009ca:	f7ff fe97 	bl	80006fc <nrf24_ReadReg>
 80009ce:	4603      	mov	r3, r0
 80009d0:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d00b      	beq.n	80009f4 <isDataAvailable+0x34>
 80009dc:	7bfa      	ldrb	r2, [r7, #15]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	4013      	ands	r3, r2
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d005      	beq.n	80009f4 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 80009e8:	2140      	movs	r1, #64	@ 0x40
 80009ea:	2007      	movs	r0, #7
 80009ec:	f7ff fe3e 	bl	800066c <nrf24_WriteReg>

		return 1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	e000      	b.n	80009f6 <isDataAvailable+0x36>
	}

	return 0;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8000a0c:	f7ff fdfe 	bl	800060c <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8000a10:	2361      	movs	r3, #97	@ 0x61
 8000a12:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8000a14:	f107 010f 	add.w	r1, r7, #15
 8000a18:	2364      	movs	r3, #100	@ 0x64
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	480c      	ldr	r0, [pc, #48]	@ (8000a50 <NRF24_Receive+0x50>)
 8000a1e:	f001 fb75 	bl	800210c <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8000a22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a26:	2220      	movs	r2, #32
 8000a28:	6879      	ldr	r1, [r7, #4]
 8000a2a:	4809      	ldr	r0, [pc, #36]	@ (8000a50 <NRF24_Receive+0x50>)
 8000a2c:	f001 fcb1 	bl	8002392 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8000a30:	f7ff fdf8 	bl	8000624 <CS_UnSelect>

	HAL_Delay(1);
 8000a34:	2001      	movs	r0, #1
 8000a36:	f000 fc05 	bl	8001244 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8000a3a:	23e2      	movs	r3, #226	@ 0xe2
 8000a3c:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fe9b 	bl	800077c <nrfsendCmd>
}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000038 	.word	0x20000038

08000a54 <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	e00c      	b.n	8000a7c <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	b2d9      	uxtb	r1, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	18d4      	adds	r4, r2, r3
 8000a6c:	4608      	mov	r0, r1
 8000a6e:	f7ff fe45 	bl	80006fc <nrf24_ReadReg>
 8000a72:	4603      	mov	r3, r0
 8000a74:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2b09      	cmp	r3, #9
 8000a80:	ddef      	ble.n	8000a62 <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	330a      	adds	r3, #10
 8000a86:	2205      	movs	r2, #5
 8000a88:	4619      	mov	r1, r3
 8000a8a:	200a      	movs	r0, #10
 8000a8c:	f7ff fe56 	bl	800073c <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	330f      	adds	r3, #15
 8000a94:	2205      	movs	r2, #5
 8000a96:	4619      	mov	r1, r3
 8000a98:	200b      	movs	r0, #11
 8000a9a:	f7ff fe4f 	bl	800073c <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f103 0414 	add.w	r4, r3, #20
 8000aa4:	200c      	movs	r0, #12
 8000aa6:	f7ff fe29 	bl	80006fc <nrf24_ReadReg>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f103 0415 	add.w	r4, r3, #21
 8000ab4:	200d      	movs	r0, #13
 8000ab6:	f7ff fe21 	bl	80006fc <nrf24_ReadReg>
 8000aba:	4603      	mov	r3, r0
 8000abc:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f103 0416 	add.w	r4, r3, #22
 8000ac4:	200e      	movs	r0, #14
 8000ac6:	f7ff fe19 	bl	80006fc <nrf24_ReadReg>
 8000aca:	4603      	mov	r3, r0
 8000acc:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f103 0417 	add.w	r4, r3, #23
 8000ad4:	200f      	movs	r0, #15
 8000ad6:	f7ff fe11 	bl	80006fc <nrf24_ReadReg>
 8000ada:	4603      	mov	r3, r0
 8000adc:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3318      	adds	r3, #24
 8000ae2:	2205      	movs	r2, #5
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	200a      	movs	r0, #10
 8000ae8:	f7ff fe28 	bl	800073c <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 8000aec:	231d      	movs	r3, #29
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	e00e      	b.n	8000b10 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	3b0c      	subs	r3, #12
 8000af8:	b2d9      	uxtb	r1, r3
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	18d4      	adds	r4, r2, r3
 8000b00:	4608      	mov	r0, r1
 8000b02:	f7ff fdfb 	bl	80006fc <nrf24_ReadReg>
 8000b06:	4603      	mov	r3, r0
 8000b08:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	2b25      	cmp	r3, #37	@ 0x25
 8000b14:	dded      	ble.n	8000af2 <NRF24_ReadAll+0x9e>
	}

}
 8000b16:	bf00      	nop
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd90      	pop	{r4, r7, pc}

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b26:	f000 fb5b 	bl	80011e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2a:	f000 f857 	bl	8000bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2e:	f000 f8fb 	bl	8000d28 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b32:	f000 f899 	bl	8000c68 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b36:	f000 f8cd 	bl	8000cd4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init();
 8000b3a:	f7ff fedb 	bl	80008f4 <NRF24_Init>

  NRF24_RxMode(RxAddress, 10);
 8000b3e:	210a      	movs	r1, #10
 8000b40:	4819      	ldr	r0, [pc, #100]	@ (8000ba8 <main+0x88>)
 8000b42:	f7ff fefe 	bl	8000942 <NRF24_RxMode>

  NRF24_ReadAll(data);
 8000b46:	4819      	ldr	r0, [pc, #100]	@ (8000bac <main+0x8c>)
 8000b48:	f7ff ff84 	bl	8000a54 <NRF24_ReadAll>

  setUp(&ledStruct, GPIO_PIN_11, GPIOA, GPIO_PIN_10, GPIOA, GPIO_PIN_9, GPIOA);
 8000b4c:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <main+0x90>)
 8000b4e:	9302      	str	r3, [sp, #8]
 8000b50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b54:	9301      	str	r3, [sp, #4]
 8000b56:	4b16      	ldr	r3, [pc, #88]	@ (8000bb0 <main+0x90>)
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b5e:	4a14      	ldr	r2, [pc, #80]	@ (8000bb0 <main+0x90>)
 8000b60:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b64:	4813      	ldr	r0, [pc, #76]	@ (8000bb4 <main+0x94>)
 8000b66:	f7ff faf3 	bl	8000150 <setUp>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b6a:	f002 fafb 	bl	8003164 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b6e:	4a12      	ldr	r2, [pc, #72]	@ (8000bb8 <main+0x98>)
 8000b70:	2100      	movs	r1, #0
 8000b72:	4812      	ldr	r0, [pc, #72]	@ (8000bbc <main+0x9c>)
 8000b74:	f002 fb5c 	bl	8003230 <osThreadNew>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	4a11      	ldr	r2, [pc, #68]	@ (8000bc0 <main+0xa0>)
 8000b7c:	6013      	str	r3, [r2, #0]

  /* creation of myReciveTask */
  myReciveTaskHandle = osThreadNew(StartReciveTask, NULL, &myReciveTask_attributes);
 8000b7e:	4a11      	ldr	r2, [pc, #68]	@ (8000bc4 <main+0xa4>)
 8000b80:	2100      	movs	r1, #0
 8000b82:	4811      	ldr	r0, [pc, #68]	@ (8000bc8 <main+0xa8>)
 8000b84:	f002 fb54 	bl	8003230 <osThreadNew>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	4a10      	ldr	r2, [pc, #64]	@ (8000bcc <main+0xac>)
 8000b8c:	6013      	str	r3, [r2, #0]

  /* creation of myLoopTask */
  myLoopTaskHandle = osThreadNew(StartLoopTask, NULL, &myLoopTask_attributes);
 8000b8e:	4a10      	ldr	r2, [pc, #64]	@ (8000bd0 <main+0xb0>)
 8000b90:	2100      	movs	r1, #0
 8000b92:	4810      	ldr	r0, [pc, #64]	@ (8000bd4 <main+0xb4>)
 8000b94:	f002 fb4c 	bl	8003230 <osThreadNew>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd8 <main+0xb8>)
 8000b9c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b9e:	f002 fb13 	bl	80031c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ba2:	bf00      	nop
 8000ba4:	e7fd      	b.n	8000ba2 <main+0x82>
 8000ba6:	bf00      	nop
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	2000012c 	.word	0x2000012c
 8000bb0:	40010800 	.word	0x40010800
 8000bb4:	200000e4 	.word	0x200000e4
 8000bb8:	08005c78 	.word	0x08005c78
 8000bbc:	08000e05 	.word	0x08000e05
 8000bc0:	200000d8 	.word	0x200000d8
 8000bc4:	08005c9c 	.word	0x08005c9c
 8000bc8:	08000e15 	.word	0x08000e15
 8000bcc:	200000dc 	.word	0x200000dc
 8000bd0:	08005cc0 	.word	0x08005cc0
 8000bd4:	08000e55 	.word	0x08000e55
 8000bd8:	200000e0 	.word	0x200000e0

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b090      	sub	sp, #64	@ 0x40
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 0318 	add.w	r3, r7, #24
 8000be6:	2228      	movs	r2, #40	@ 0x28
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f004 ffce 	bl	8005b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c10:	2302      	movs	r3, #2
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c1a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c20:	f107 0318 	add.w	r3, r7, #24
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 fdad 	bl	8001784 <HAL_RCC_OscConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c30:	f000 f936 	bl	8000ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c34:	230f      	movs	r3, #15
 8000c36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 f81a 	bl	8001c88 <HAL_RCC_ClockConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c5a:	f000 f921 	bl	8000ea0 <Error_Handler>
  }
}
 8000c5e:	bf00      	nop
 8000c60:	3740      	adds	r7, #64	@ 0x40
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <MX_SPI1_Init+0x64>)
 8000c6e:	4a18      	ldr	r2, [pc, #96]	@ (8000cd0 <MX_SPI1_Init+0x68>)
 8000c70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c72:	4b16      	ldr	r3, [pc, #88]	@ (8000ccc <MX_SPI1_Init+0x64>)
 8000c74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <MX_SPI1_Init+0x64>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <MX_SPI1_Init+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c86:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <MX_SPI1_Init+0x64>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <MX_SPI1_Init+0x64>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <MX_SPI1_Init+0x64>)
 8000c94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <MX_SPI1_Init+0x64>)
 8000c9c:	2218      	movs	r2, #24
 8000c9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ccc <MX_SPI1_Init+0x64>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ca6:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <MX_SPI1_Init+0x64>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cac:	4b07      	ldr	r3, [pc, #28]	@ (8000ccc <MX_SPI1_Init+0x64>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <MX_SPI1_Init+0x64>)
 8000cb4:	220a      	movs	r2, #10
 8000cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	@ (8000ccc <MX_SPI1_Init+0x64>)
 8000cba:	f001 f9a3 	bl	8002004 <HAL_SPI_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cc4:	f000 f8ec 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000038 	.word	0x20000038
 8000cd0:	40013000 	.word	0x40013000

08000cd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cda:	4a12      	ldr	r2, [pc, #72]	@ (8000d24 <MX_USART2_UART_Init+0x50>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cde:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000ce0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ce4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000d0c:	f002 f94c 	bl	8002fa8 <HAL_UART_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d16:	f000 f8c3 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000090 	.word	0x20000090
 8000d24:	40004400 	.word	0x40004400

08000d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000df8 <MX_GPIO_Init+0xd0>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a2d      	ldr	r2, [pc, #180]	@ (8000df8 <MX_GPIO_Init+0xd0>)
 8000d42:	f043 0320 	orr.w	r3, r3, #32
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b2b      	ldr	r3, [pc, #172]	@ (8000df8 <MX_GPIO_Init+0xd0>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0320 	and.w	r3, r3, #32
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	4b28      	ldr	r3, [pc, #160]	@ (8000df8 <MX_GPIO_Init+0xd0>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a27      	ldr	r2, [pc, #156]	@ (8000df8 <MX_GPIO_Init+0xd0>)
 8000d5a:	f043 0304 	orr.w	r3, r3, #4
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b25      	ldr	r3, [pc, #148]	@ (8000df8 <MX_GPIO_Init+0xd0>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6c:	4b22      	ldr	r3, [pc, #136]	@ (8000df8 <MX_GPIO_Init+0xd0>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a21      	ldr	r2, [pc, #132]	@ (8000df8 <MX_GPIO_Init+0xd0>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b1f      	ldr	r3, [pc, #124]	@ (8000df8 <MX_GPIO_Init+0xd0>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8000d8a:	481c      	ldr	r0, [pc, #112]	@ (8000dfc <MX_GPIO_Init+0xd4>)
 8000d8c:	f000 fce2 	bl	8001754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2101      	movs	r1, #1
 8000d94:	481a      	ldr	r0, [pc, #104]	@ (8000e00 <MX_GPIO_Init+0xd8>)
 8000d96:	f000 fcdd 	bl	8001754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d9a:	2310      	movs	r3, #16
 8000d9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	4619      	mov	r1, r3
 8000db0:	4812      	ldr	r0, [pc, #72]	@ (8000dfc <MX_GPIO_Init+0xd4>)
 8000db2:	f000 fb4b 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000db6:	2301      	movs	r3, #1
 8000db8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <MX_GPIO_Init+0xd8>)
 8000dce:	f000 fb3d 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000dd2:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8000dd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	4619      	mov	r1, r3
 8000dea:	4804      	ldr	r0, [pc, #16]	@ (8000dfc <MX_GPIO_Init+0xd4>)
 8000dec:	f000 fb2e 	bl	800144c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000df0:	bf00      	nop
 8000df2:	3720      	adds	r7, #32
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40010800 	.word	0x40010800
 8000e00:	40010c00 	.word	0x40010c00

08000e04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f002 fab9 	bl	8003384 <osDelay>
 8000e12:	e7fb      	b.n	8000e0c <StartDefaultTask+0x8>

08000e14 <StartReciveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReciveTask */
void StartReciveTask(void *argument)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReciveTask */
  /* Infinite loop */
  for(;;)
  {
	  if (isDataAvailable(2) == 1)
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f7ff fdcf 	bl	80009c0 <isDataAvailable>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d10d      	bne.n	8000e44 <StartReciveTask+0x30>
	  	 	  	  {
	  	 		  	 // Work with Recive data
	  	 	  		 NRF24_Receive(RxData);
 8000e28:	4808      	ldr	r0, [pc, #32]	@ (8000e4c <StartReciveTask+0x38>)
 8000e2a:	f7ff fde9 	bl	8000a00 <NRF24_Receive>
	  //	         HAL_UART_Transmit(&huart2, RxData, strlen((char *)RxData), 1000); if you want see on UART data
	  	 	  		 counter++;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <StartReciveTask+0x3c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	3301      	adds	r3, #1
 8000e34:	4a06      	ldr	r2, [pc, #24]	@ (8000e50 <StartReciveTask+0x3c>)
 8000e36:	6013      	str	r3, [r2, #0]
	  	 	  	     printInt(counter, false);
 8000e38:	4b05      	ldr	r3, [pc, #20]	@ (8000e50 <StartReciveTask+0x3c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fbd0 	bl	80005e4 <printInt>
	  	 	  	  }

    osDelay(10);
 8000e44:	200a      	movs	r0, #10
 8000e46:	f002 fa9d 	bl	8003384 <osDelay>
	  if (isDataAvailable(2) == 1)
 8000e4a:	e7e7      	b.n	8000e1c <StartReciveTask+0x8>
 8000e4c:	2000010c 	.word	0x2000010c
 8000e50:	20000108 	.word	0x20000108

08000e54 <StartLoopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoopTask */
void StartLoopTask(void *argument)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLoopTask */
  /* Infinite loop */
  for(;;)
  {

	  for(int i = 0;i < 1000; i++) loop();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	e004      	b.n	8000e6c <StartLoopTask+0x18>
 8000e62:	f7ff fa83 	bl	800036c <loop>
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e72:	dbf6      	blt.n	8000e62 <StartLoopTask+0xe>

    osDelay(1);
 8000e74:	2001      	movs	r0, #1
 8000e76:	f002 fa85 	bl	8003384 <osDelay>
	  for(int i = 0;i < 1000; i++) loop();
 8000e7a:	e7ef      	b.n	8000e5c <StartLoopTask+0x8>

08000e7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e8e:	f000 f9bd 	bl	800120c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40000800 	.word	0x40000800

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea4:	b672      	cpsid	i
}
 8000ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <Error_Handler+0x8>

08000eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb2:	4b18      	ldr	r3, [pc, #96]	@ (8000f14 <HAL_MspInit+0x68>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	4a17      	ldr	r2, [pc, #92]	@ (8000f14 <HAL_MspInit+0x68>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6193      	str	r3, [r2, #24]
 8000ebe:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <HAL_MspInit+0x68>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <HAL_MspInit+0x68>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	4a11      	ldr	r2, [pc, #68]	@ (8000f14 <HAL_MspInit+0x68>)
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed4:	61d3      	str	r3, [r2, #28]
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <HAL_MspInit+0x68>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	210f      	movs	r1, #15
 8000ee6:	f06f 0001 	mvn.w	r0, #1
 8000eea:	f000 fa84 	bl	80013f6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eee:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <HAL_MspInit+0x6c>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	4a04      	ldr	r2, [pc, #16]	@ (8000f18 <HAL_MspInit+0x6c>)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40010000 	.word	0x40010000

08000f1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d12f      	bne.n	8000f9c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <HAL_SPI_MspInit+0x8c>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a19      	ldr	r2, [pc, #100]	@ (8000fa8 <HAL_SPI_MspInit+0x8c>)
 8000f42:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <HAL_SPI_MspInit+0x8c>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b14      	ldr	r3, [pc, #80]	@ (8000fa8 <HAL_SPI_MspInit+0x8c>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a13      	ldr	r2, [pc, #76]	@ (8000fa8 <HAL_SPI_MspInit+0x8c>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <HAL_SPI_MspInit+0x8c>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f6c:	23a0      	movs	r3, #160	@ 0xa0
 8000f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480b      	ldr	r0, [pc, #44]	@ (8000fac <HAL_SPI_MspInit+0x90>)
 8000f80:	f000 fa64 	bl	800144c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f84:	2340      	movs	r3, #64	@ 0x40
 8000f86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	4619      	mov	r1, r3
 8000f96:	4805      	ldr	r0, [pc, #20]	@ (8000fac <HAL_SPI_MspInit+0x90>)
 8000f98:	f000 fa58 	bl	800144c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f9c:	bf00      	nop
 8000f9e:	3720      	adds	r7, #32
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40013000 	.word	0x40013000
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40010800 	.word	0x40010800

08000fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a1b      	ldr	r2, [pc, #108]	@ (8001038 <HAL_UART_MspInit+0x88>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d12f      	bne.n	8001030 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800103c <HAL_UART_MspInit+0x8c>)
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	4a19      	ldr	r2, [pc, #100]	@ (800103c <HAL_UART_MspInit+0x8c>)
 8000fd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fda:	61d3      	str	r3, [r2, #28]
 8000fdc:	4b17      	ldr	r3, [pc, #92]	@ (800103c <HAL_UART_MspInit+0x8c>)
 8000fde:	69db      	ldr	r3, [r3, #28]
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b14      	ldr	r3, [pc, #80]	@ (800103c <HAL_UART_MspInit+0x8c>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a13      	ldr	r2, [pc, #76]	@ (800103c <HAL_UART_MspInit+0x8c>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b11      	ldr	r3, [pc, #68]	@ (800103c <HAL_UART_MspInit+0x8c>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001000:	2304      	movs	r3, #4
 8001002:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	4619      	mov	r1, r3
 8001012:	480b      	ldr	r0, [pc, #44]	@ (8001040 <HAL_UART_MspInit+0x90>)
 8001014:	f000 fa1a 	bl	800144c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001018:	2308      	movs	r3, #8
 800101a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4619      	mov	r1, r3
 800102a:	4805      	ldr	r0, [pc, #20]	@ (8001040 <HAL_UART_MspInit+0x90>)
 800102c:	f000 fa0e 	bl	800144c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40004400 	.word	0x40004400
 800103c:	40021000 	.word	0x40021000
 8001040:	40010800 	.word	0x40010800

08001044 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08e      	sub	sp, #56	@ 0x38
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001050:	2300      	movs	r3, #0
 8001052:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800105a:	4b34      	ldr	r3, [pc, #208]	@ (800112c <HAL_InitTick+0xe8>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	4a33      	ldr	r2, [pc, #204]	@ (800112c <HAL_InitTick+0xe8>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	61d3      	str	r3, [r2, #28]
 8001066:	4b31      	ldr	r3, [pc, #196]	@ (800112c <HAL_InitTick+0xe8>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001072:	f107 0210 	add.w	r2, r7, #16
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f000 ff73 	bl	8001f68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001088:	2b00      	cmp	r3, #0
 800108a:	d103      	bne.n	8001094 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800108c:	f000 ff44 	bl	8001f18 <HAL_RCC_GetPCLK1Freq>
 8001090:	6378      	str	r0, [r7, #52]	@ 0x34
 8001092:	e004      	b.n	800109e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001094:	f000 ff40 	bl	8001f18 <HAL_RCC_GetPCLK1Freq>
 8001098:	4603      	mov	r3, r0
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800109e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010a0:	4a23      	ldr	r2, [pc, #140]	@ (8001130 <HAL_InitTick+0xec>)
 80010a2:	fba2 2303 	umull	r2, r3, r2, r3
 80010a6:	0c9b      	lsrs	r3, r3, #18
 80010a8:	3b01      	subs	r3, #1
 80010aa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80010ac:	4b21      	ldr	r3, [pc, #132]	@ (8001134 <HAL_InitTick+0xf0>)
 80010ae:	4a22      	ldr	r2, [pc, #136]	@ (8001138 <HAL_InitTick+0xf4>)
 80010b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80010b2:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <HAL_InitTick+0xf0>)
 80010b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010b8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80010ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001134 <HAL_InitTick+0xf0>)
 80010bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010be:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80010c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <HAL_InitTick+0xf0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <HAL_InitTick+0xf0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010cc:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <HAL_InitTick+0xf0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80010d2:	4818      	ldr	r0, [pc, #96]	@ (8001134 <HAL_InitTick+0xf0>)
 80010d4:	f001 fd1e 	bl	8002b14 <HAL_TIM_Base_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80010de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d11b      	bne.n	800111e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80010e6:	4813      	ldr	r0, [pc, #76]	@ (8001134 <HAL_InitTick+0xf0>)
 80010e8:	f001 fd6c 	bl	8002bc4 <HAL_TIM_Base_Start_IT>
 80010ec:	4603      	mov	r3, r0
 80010ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80010f2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d111      	bne.n	800111e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80010fa:	201e      	movs	r0, #30
 80010fc:	f000 f997 	bl	800142e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	d808      	bhi.n	8001118 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001106:	2200      	movs	r2, #0
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	201e      	movs	r0, #30
 800110c:	f000 f973 	bl	80013f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001110:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <HAL_InitTick+0xf8>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e002      	b.n	800111e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800111e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001122:	4618      	mov	r0, r3
 8001124:	3738      	adds	r7, #56	@ 0x38
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000
 8001130:	431bde83 	.word	0x431bde83
 8001134:	20000160 	.word	0x20000160
 8001138:	40000800 	.word	0x40000800
 800113c:	2000000c 	.word	0x2000000c

08001140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <NMI_Handler+0x4>

08001148 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <HardFault_Handler+0x4>

08001150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <MemManage_Handler+0x4>

08001158 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <BusFault_Handler+0x4>

08001160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <UsageFault_Handler+0x4>

08001168 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001178:	4802      	ldr	r0, [pc, #8]	@ (8001184 <TIM4_IRQHandler+0x10>)
 800117a:	f001 fd75 	bl	8002c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000160 	.word	0x20000160

08001188 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001194:	f7ff fff8 	bl	8001188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001198:	480b      	ldr	r0, [pc, #44]	@ (80011c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800119a:	490c      	ldr	r1, [pc, #48]	@ (80011cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800119c:	4a0c      	ldr	r2, [pc, #48]	@ (80011d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a0:	e002      	b.n	80011a8 <LoopCopyDataInit>

080011a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a6:	3304      	adds	r3, #4

080011a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ac:	d3f9      	bcc.n	80011a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ae:	4a09      	ldr	r2, [pc, #36]	@ (80011d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011b0:	4c09      	ldr	r4, [pc, #36]	@ (80011d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b4:	e001      	b.n	80011ba <LoopFillZerobss>

080011b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b8:	3204      	adds	r2, #4

080011ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011bc:	d3fb      	bcc.n	80011b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011be:	f004 fced 	bl	8005b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011c2:	f7ff fcad 	bl	8000b20 <main>
  bx lr
 80011c6:	4770      	bx	lr
  ldr r0, =_sdata
 80011c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011cc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80011d0:	08005d18 	.word	0x08005d18
  ldr r2, =_sbss
 80011d4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80011d8:	20001af4 	.word	0x20001af4

080011dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011dc:	e7fe      	b.n	80011dc <ADC1_2_IRQHandler>
	...

080011e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e4:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <HAL_Init+0x28>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a07      	ldr	r2, [pc, #28]	@ (8001208 <HAL_Init+0x28>)
 80011ea:	f043 0310 	orr.w	r3, r3, #16
 80011ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f0:	2003      	movs	r0, #3
 80011f2:	f000 f8f5 	bl	80013e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f6:	200f      	movs	r0, #15
 80011f8:	f7ff ff24 	bl	8001044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011fc:	f7ff fe56 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40022000 	.word	0x40022000

0800120c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001210:	4b05      	ldr	r3, [pc, #20]	@ (8001228 <HAL_IncTick+0x1c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b05      	ldr	r3, [pc, #20]	@ (800122c <HAL_IncTick+0x20>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a03      	ldr	r2, [pc, #12]	@ (800122c <HAL_IncTick+0x20>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	20000010 	.word	0x20000010
 800122c:	200001a8 	.word	0x200001a8

08001230 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b02      	ldr	r3, [pc, #8]	@ (8001240 <HAL_GetTick+0x10>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	200001a8 	.word	0x200001a8

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff fff0 	bl	8001230 <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126a:	bf00      	nop
 800126c:	f7ff ffe0 	bl	8001230 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000010 	.word	0x20000010

0800128c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a8:	4013      	ands	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012be:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	60d3      	str	r3, [r2, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d8:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <__NVIC_GetPriorityGrouping+0x18>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	f003 0307 	and.w	r3, r3, #7
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	db0b      	blt.n	800131a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	f003 021f 	and.w	r2, r3, #31
 8001308:	4906      	ldr	r1, [pc, #24]	@ (8001324 <__NVIC_EnableIRQ+0x34>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	095b      	lsrs	r3, r3, #5
 8001310:	2001      	movs	r0, #1
 8001312:	fa00 f202 	lsl.w	r2, r0, r2
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	@ (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	@ (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	@ 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	@ 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ff4f 	bl	800128c <__NVIC_SetPriorityGrouping>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001408:	f7ff ff64 	bl	80012d4 <__NVIC_GetPriorityGrouping>
 800140c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	6978      	ldr	r0, [r7, #20]
 8001414:	f7ff ffb2 	bl	800137c <NVIC_EncodePriority>
 8001418:	4602      	mov	r2, r0
 800141a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff81 	bl	8001328 <__NVIC_SetPriority>
}
 8001426:	bf00      	nop
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff57 	bl	80012f0 <__NVIC_EnableIRQ>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800144c:	b480      	push	{r7}
 800144e:	b08b      	sub	sp, #44	@ 0x2c
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145e:	e169      	b.n	8001734 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001460:	2201      	movs	r2, #1
 8001462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	69fa      	ldr	r2, [r7, #28]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	429a      	cmp	r2, r3
 800147a:	f040 8158 	bne.w	800172e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	4a9a      	ldr	r2, [pc, #616]	@ (80016ec <HAL_GPIO_Init+0x2a0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d05e      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 8001488:	4a98      	ldr	r2, [pc, #608]	@ (80016ec <HAL_GPIO_Init+0x2a0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d875      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 800148e:	4a98      	ldr	r2, [pc, #608]	@ (80016f0 <HAL_GPIO_Init+0x2a4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d058      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 8001494:	4a96      	ldr	r2, [pc, #600]	@ (80016f0 <HAL_GPIO_Init+0x2a4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d86f      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 800149a:	4a96      	ldr	r2, [pc, #600]	@ (80016f4 <HAL_GPIO_Init+0x2a8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d052      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 80014a0:	4a94      	ldr	r2, [pc, #592]	@ (80016f4 <HAL_GPIO_Init+0x2a8>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d869      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 80014a6:	4a94      	ldr	r2, [pc, #592]	@ (80016f8 <HAL_GPIO_Init+0x2ac>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d04c      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 80014ac:	4a92      	ldr	r2, [pc, #584]	@ (80016f8 <HAL_GPIO_Init+0x2ac>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d863      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 80014b2:	4a92      	ldr	r2, [pc, #584]	@ (80016fc <HAL_GPIO_Init+0x2b0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d046      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 80014b8:	4a90      	ldr	r2, [pc, #576]	@ (80016fc <HAL_GPIO_Init+0x2b0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d85d      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 80014be:	2b12      	cmp	r3, #18
 80014c0:	d82a      	bhi.n	8001518 <HAL_GPIO_Init+0xcc>
 80014c2:	2b12      	cmp	r3, #18
 80014c4:	d859      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 80014c6:	a201      	add	r2, pc, #4	@ (adr r2, 80014cc <HAL_GPIO_Init+0x80>)
 80014c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014cc:	08001547 	.word	0x08001547
 80014d0:	08001521 	.word	0x08001521
 80014d4:	08001533 	.word	0x08001533
 80014d8:	08001575 	.word	0x08001575
 80014dc:	0800157b 	.word	0x0800157b
 80014e0:	0800157b 	.word	0x0800157b
 80014e4:	0800157b 	.word	0x0800157b
 80014e8:	0800157b 	.word	0x0800157b
 80014ec:	0800157b 	.word	0x0800157b
 80014f0:	0800157b 	.word	0x0800157b
 80014f4:	0800157b 	.word	0x0800157b
 80014f8:	0800157b 	.word	0x0800157b
 80014fc:	0800157b 	.word	0x0800157b
 8001500:	0800157b 	.word	0x0800157b
 8001504:	0800157b 	.word	0x0800157b
 8001508:	0800157b 	.word	0x0800157b
 800150c:	0800157b 	.word	0x0800157b
 8001510:	08001529 	.word	0x08001529
 8001514:	0800153d 	.word	0x0800153d
 8001518:	4a79      	ldr	r2, [pc, #484]	@ (8001700 <HAL_GPIO_Init+0x2b4>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d013      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800151e:	e02c      	b.n	800157a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	623b      	str	r3, [r7, #32]
          break;
 8001526:	e029      	b.n	800157c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	3304      	adds	r3, #4
 800152e:	623b      	str	r3, [r7, #32]
          break;
 8001530:	e024      	b.n	800157c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	3308      	adds	r3, #8
 8001538:	623b      	str	r3, [r7, #32]
          break;
 800153a:	e01f      	b.n	800157c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	330c      	adds	r3, #12
 8001542:	623b      	str	r3, [r7, #32]
          break;
 8001544:	e01a      	b.n	800157c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d102      	bne.n	8001554 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800154e:	2304      	movs	r3, #4
 8001550:	623b      	str	r3, [r7, #32]
          break;
 8001552:	e013      	b.n	800157c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d105      	bne.n	8001568 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800155c:	2308      	movs	r3, #8
 800155e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	611a      	str	r2, [r3, #16]
          break;
 8001566:	e009      	b.n	800157c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001568:	2308      	movs	r3, #8
 800156a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	615a      	str	r2, [r3, #20]
          break;
 8001572:	e003      	b.n	800157c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
          break;
 8001578:	e000      	b.n	800157c <HAL_GPIO_Init+0x130>
          break;
 800157a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2bff      	cmp	r3, #255	@ 0xff
 8001580:	d801      	bhi.n	8001586 <HAL_GPIO_Init+0x13a>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	e001      	b.n	800158a <HAL_GPIO_Init+0x13e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3304      	adds	r3, #4
 800158a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	2bff      	cmp	r3, #255	@ 0xff
 8001590:	d802      	bhi.n	8001598 <HAL_GPIO_Init+0x14c>
 8001592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	e002      	b.n	800159e <HAL_GPIO_Init+0x152>
 8001598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159a:	3b08      	subs	r3, #8
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	210f      	movs	r1, #15
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	401a      	ands	r2, r3
 80015b0:	6a39      	ldr	r1, [r7, #32]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	fa01 f303 	lsl.w	r3, r1, r3
 80015b8:	431a      	orrs	r2, r3
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 80b1 	beq.w	800172e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015cc:	4b4d      	ldr	r3, [pc, #308]	@ (8001704 <HAL_GPIO_Init+0x2b8>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001704 <HAL_GPIO_Init+0x2b8>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b4a      	ldr	r3, [pc, #296]	@ (8001704 <HAL_GPIO_Init+0x2b8>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015e4:	4a48      	ldr	r2, [pc, #288]	@ (8001708 <HAL_GPIO_Init+0x2bc>)
 80015e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3302      	adds	r3, #2
 80015ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	220f      	movs	r2, #15
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4013      	ands	r3, r2
 8001606:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a40      	ldr	r2, [pc, #256]	@ (800170c <HAL_GPIO_Init+0x2c0>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d013      	beq.n	8001638 <HAL_GPIO_Init+0x1ec>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a3f      	ldr	r2, [pc, #252]	@ (8001710 <HAL_GPIO_Init+0x2c4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d00d      	beq.n	8001634 <HAL_GPIO_Init+0x1e8>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a3e      	ldr	r2, [pc, #248]	@ (8001714 <HAL_GPIO_Init+0x2c8>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d007      	beq.n	8001630 <HAL_GPIO_Init+0x1e4>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a3d      	ldr	r2, [pc, #244]	@ (8001718 <HAL_GPIO_Init+0x2cc>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d101      	bne.n	800162c <HAL_GPIO_Init+0x1e0>
 8001628:	2303      	movs	r3, #3
 800162a:	e006      	b.n	800163a <HAL_GPIO_Init+0x1ee>
 800162c:	2304      	movs	r3, #4
 800162e:	e004      	b.n	800163a <HAL_GPIO_Init+0x1ee>
 8001630:	2302      	movs	r3, #2
 8001632:	e002      	b.n	800163a <HAL_GPIO_Init+0x1ee>
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <HAL_GPIO_Init+0x1ee>
 8001638:	2300      	movs	r3, #0
 800163a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800163c:	f002 0203 	and.w	r2, r2, #3
 8001640:	0092      	lsls	r2, r2, #2
 8001642:	4093      	lsls	r3, r2
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800164a:	492f      	ldr	r1, [pc, #188]	@ (8001708 <HAL_GPIO_Init+0x2bc>)
 800164c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164e:	089b      	lsrs	r3, r3, #2
 8001650:	3302      	adds	r3, #2
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d006      	beq.n	8001672 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001664:	4b2d      	ldr	r3, [pc, #180]	@ (800171c <HAL_GPIO_Init+0x2d0>)
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	492c      	ldr	r1, [pc, #176]	@ (800171c <HAL_GPIO_Init+0x2d0>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	608b      	str	r3, [r1, #8]
 8001670:	e006      	b.n	8001680 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001672:	4b2a      	ldr	r3, [pc, #168]	@ (800171c <HAL_GPIO_Init+0x2d0>)
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	43db      	mvns	r3, r3
 800167a:	4928      	ldr	r1, [pc, #160]	@ (800171c <HAL_GPIO_Init+0x2d0>)
 800167c:	4013      	ands	r3, r2
 800167e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d006      	beq.n	800169a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800168c:	4b23      	ldr	r3, [pc, #140]	@ (800171c <HAL_GPIO_Init+0x2d0>)
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	4922      	ldr	r1, [pc, #136]	@ (800171c <HAL_GPIO_Init+0x2d0>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	60cb      	str	r3, [r1, #12]
 8001698:	e006      	b.n	80016a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800169a:	4b20      	ldr	r3, [pc, #128]	@ (800171c <HAL_GPIO_Init+0x2d0>)
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	491e      	ldr	r1, [pc, #120]	@ (800171c <HAL_GPIO_Init+0x2d0>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d006      	beq.n	80016c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016b4:	4b19      	ldr	r3, [pc, #100]	@ (800171c <HAL_GPIO_Init+0x2d0>)
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	4918      	ldr	r1, [pc, #96]	@ (800171c <HAL_GPIO_Init+0x2d0>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	4313      	orrs	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
 80016c0:	e006      	b.n	80016d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016c2:	4b16      	ldr	r3, [pc, #88]	@ (800171c <HAL_GPIO_Init+0x2d0>)
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	4914      	ldr	r1, [pc, #80]	@ (800171c <HAL_GPIO_Init+0x2d0>)
 80016cc:	4013      	ands	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d021      	beq.n	8001720 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016dc:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <HAL_GPIO_Init+0x2d0>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	490e      	ldr	r1, [pc, #56]	@ (800171c <HAL_GPIO_Init+0x2d0>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]
 80016e8:	e021      	b.n	800172e <HAL_GPIO_Init+0x2e2>
 80016ea:	bf00      	nop
 80016ec:	10320000 	.word	0x10320000
 80016f0:	10310000 	.word	0x10310000
 80016f4:	10220000 	.word	0x10220000
 80016f8:	10210000 	.word	0x10210000
 80016fc:	10120000 	.word	0x10120000
 8001700:	10110000 	.word	0x10110000
 8001704:	40021000 	.word	0x40021000
 8001708:	40010000 	.word	0x40010000
 800170c:	40010800 	.word	0x40010800
 8001710:	40010c00 	.word	0x40010c00
 8001714:	40011000 	.word	0x40011000
 8001718:	40011400 	.word	0x40011400
 800171c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001720:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <HAL_GPIO_Init+0x304>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	43db      	mvns	r3, r3
 8001728:	4909      	ldr	r1, [pc, #36]	@ (8001750 <HAL_GPIO_Init+0x304>)
 800172a:	4013      	ands	r3, r2
 800172c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001730:	3301      	adds	r3, #1
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173a:	fa22 f303 	lsr.w	r3, r2, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	f47f ae8e 	bne.w	8001460 <HAL_GPIO_Init+0x14>
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	372c      	adds	r7, #44	@ 0x2c
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr
 8001750:	40010400 	.word	0x40010400

08001754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	807b      	strh	r3, [r7, #2]
 8001760:	4613      	mov	r3, r2
 8001762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001764:	787b      	ldrb	r3, [r7, #1]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800176a:	887a      	ldrh	r2, [r7, #2]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001770:	e003      	b.n	800177a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001772:	887b      	ldrh	r3, [r7, #2]
 8001774:	041a      	lsls	r2, r3, #16
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	611a      	str	r2, [r3, #16]
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e272      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 8087 	beq.w	80018b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a4:	4b92      	ldr	r3, [pc, #584]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d00c      	beq.n	80017ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017b0:	4b8f      	ldr	r3, [pc, #572]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d112      	bne.n	80017e2 <HAL_RCC_OscConfig+0x5e>
 80017bc:	4b8c      	ldr	r3, [pc, #560]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017c8:	d10b      	bne.n	80017e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ca:	4b89      	ldr	r3, [pc, #548]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d06c      	beq.n	80018b0 <HAL_RCC_OscConfig+0x12c>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d168      	bne.n	80018b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e24c      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017ea:	d106      	bne.n	80017fa <HAL_RCC_OscConfig+0x76>
 80017ec:	4b80      	ldr	r3, [pc, #512]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a7f      	ldr	r2, [pc, #508]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	e02e      	b.n	8001858 <HAL_RCC_OscConfig+0xd4>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10c      	bne.n	800181c <HAL_RCC_OscConfig+0x98>
 8001802:	4b7b      	ldr	r3, [pc, #492]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a7a      	ldr	r2, [pc, #488]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	4b78      	ldr	r3, [pc, #480]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a77      	ldr	r2, [pc, #476]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001814:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	e01d      	b.n	8001858 <HAL_RCC_OscConfig+0xd4>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001824:	d10c      	bne.n	8001840 <HAL_RCC_OscConfig+0xbc>
 8001826:	4b72      	ldr	r3, [pc, #456]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a71      	ldr	r2, [pc, #452]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800182c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b6f      	ldr	r3, [pc, #444]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a6e      	ldr	r2, [pc, #440]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e00b      	b.n	8001858 <HAL_RCC_OscConfig+0xd4>
 8001840:	4b6b      	ldr	r3, [pc, #428]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a6a      	ldr	r2, [pc, #424]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	4b68      	ldr	r3, [pc, #416]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a67      	ldr	r2, [pc, #412]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001856:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d013      	beq.n	8001888 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fce6 	bl	8001230 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001868:	f7ff fce2 	bl	8001230 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	@ 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e200      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187a:	4b5d      	ldr	r3, [pc, #372]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0xe4>
 8001886:	e014      	b.n	80018b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001888:	f7ff fcd2 	bl	8001230 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001890:	f7ff fcce 	bl	8001230 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	@ 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e1ec      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a2:	4b53      	ldr	r3, [pc, #332]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x10c>
 80018ae:	e000      	b.n	80018b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d063      	beq.n	8001986 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018be:	4b4c      	ldr	r3, [pc, #304]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00b      	beq.n	80018e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ca:	4b49      	ldr	r3, [pc, #292]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d11c      	bne.n	8001910 <HAL_RCC_OscConfig+0x18c>
 80018d6:	4b46      	ldr	r3, [pc, #280]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d116      	bne.n	8001910 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e2:	4b43      	ldr	r3, [pc, #268]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d005      	beq.n	80018fa <HAL_RCC_OscConfig+0x176>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d001      	beq.n	80018fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e1c0      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fa:	4b3d      	ldr	r3, [pc, #244]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	4939      	ldr	r1, [pc, #228]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190e:	e03a      	b.n	8001986 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d020      	beq.n	800195a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001918:	4b36      	ldr	r3, [pc, #216]	@ (80019f4 <HAL_RCC_OscConfig+0x270>)
 800191a:	2201      	movs	r2, #1
 800191c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191e:	f7ff fc87 	bl	8001230 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001926:	f7ff fc83 	bl	8001230 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e1a1      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001938:	4b2d      	ldr	r3, [pc, #180]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001944:	4b2a      	ldr	r3, [pc, #168]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	4927      	ldr	r1, [pc, #156]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001954:	4313      	orrs	r3, r2
 8001956:	600b      	str	r3, [r1, #0]
 8001958:	e015      	b.n	8001986 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800195a:	4b26      	ldr	r3, [pc, #152]	@ (80019f4 <HAL_RCC_OscConfig+0x270>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff fc66 	bl	8001230 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001968:	f7ff fc62 	bl	8001230 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e180      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197a:	4b1d      	ldr	r3, [pc, #116]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d03a      	beq.n	8001a08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d019      	beq.n	80019ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800199a:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 800199c:	2201      	movs	r2, #1
 800199e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a0:	f7ff fc46 	bl	8001230 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a8:	f7ff fc42 	bl	8001230 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e160      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ba:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0f0      	beq.n	80019a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019c6:	2001      	movs	r0, #1
 80019c8:	f000 fafe 	bl	8001fc8 <RCC_Delay>
 80019cc:	e01c      	b.n	8001a08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ce:	4b0a      	ldr	r3, [pc, #40]	@ (80019f8 <HAL_RCC_OscConfig+0x274>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d4:	f7ff fc2c 	bl	8001230 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019da:	e00f      	b.n	80019fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019dc:	f7ff fc28 	bl	8001230 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d908      	bls.n	80019fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e146      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000
 80019f4:	42420000 	.word	0x42420000
 80019f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019fc:	4b92      	ldr	r3, [pc, #584]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1e9      	bne.n	80019dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80a6 	beq.w	8001b62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a1a:	4b8b      	ldr	r3, [pc, #556]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10d      	bne.n	8001a42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	4b88      	ldr	r3, [pc, #544]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	4a87      	ldr	r2, [pc, #540]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a30:	61d3      	str	r3, [r2, #28]
 8001a32:	4b85      	ldr	r3, [pc, #532]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a42:	4b82      	ldr	r3, [pc, #520]	@ (8001c4c <HAL_RCC_OscConfig+0x4c8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d118      	bne.n	8001a80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a4e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c4c <HAL_RCC_OscConfig+0x4c8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a7e      	ldr	r2, [pc, #504]	@ (8001c4c <HAL_RCC_OscConfig+0x4c8>)
 8001a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fbe9 	bl	8001230 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a62:	f7ff fbe5 	bl	8001230 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b64      	cmp	r3, #100	@ 0x64
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e103      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	4b75      	ldr	r3, [pc, #468]	@ (8001c4c <HAL_RCC_OscConfig+0x4c8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d106      	bne.n	8001a96 <HAL_RCC_OscConfig+0x312>
 8001a88:	4b6f      	ldr	r3, [pc, #444]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	4a6e      	ldr	r2, [pc, #440]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6213      	str	r3, [r2, #32]
 8001a94:	e02d      	b.n	8001af2 <HAL_RCC_OscConfig+0x36e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x334>
 8001a9e:	4b6a      	ldr	r3, [pc, #424]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	4a69      	ldr	r2, [pc, #420]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	6213      	str	r3, [r2, #32]
 8001aaa:	4b67      	ldr	r3, [pc, #412]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	4a66      	ldr	r2, [pc, #408]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	f023 0304 	bic.w	r3, r3, #4
 8001ab4:	6213      	str	r3, [r2, #32]
 8001ab6:	e01c      	b.n	8001af2 <HAL_RCC_OscConfig+0x36e>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b05      	cmp	r3, #5
 8001abe:	d10c      	bne.n	8001ada <HAL_RCC_OscConfig+0x356>
 8001ac0:	4b61      	ldr	r3, [pc, #388]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4a60      	ldr	r2, [pc, #384]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	f043 0304 	orr.w	r3, r3, #4
 8001aca:	6213      	str	r3, [r2, #32]
 8001acc:	4b5e      	ldr	r3, [pc, #376]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	4a5d      	ldr	r2, [pc, #372]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6213      	str	r3, [r2, #32]
 8001ad8:	e00b      	b.n	8001af2 <HAL_RCC_OscConfig+0x36e>
 8001ada:	4b5b      	ldr	r3, [pc, #364]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	4a5a      	ldr	r2, [pc, #360]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	f023 0301 	bic.w	r3, r3, #1
 8001ae4:	6213      	str	r3, [r2, #32]
 8001ae6:	4b58      	ldr	r3, [pc, #352]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	4a57      	ldr	r2, [pc, #348]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	f023 0304 	bic.w	r3, r3, #4
 8001af0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d015      	beq.n	8001b26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afa:	f7ff fb99 	bl	8001230 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b00:	e00a      	b.n	8001b18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b02:	f7ff fb95 	bl	8001230 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e0b1      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b18:	4b4b      	ldr	r3, [pc, #300]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0ee      	beq.n	8001b02 <HAL_RCC_OscConfig+0x37e>
 8001b24:	e014      	b.n	8001b50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b26:	f7ff fb83 	bl	8001230 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b2c:	e00a      	b.n	8001b44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2e:	f7ff fb7f 	bl	8001230 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e09b      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b44:	4b40      	ldr	r3, [pc, #256]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1ee      	bne.n	8001b2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d105      	bne.n	8001b62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b56:	4b3c      	ldr	r3, [pc, #240]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	4a3b      	ldr	r2, [pc, #236]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8087 	beq.w	8001c7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b6c:	4b36      	ldr	r3, [pc, #216]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d061      	beq.n	8001c3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d146      	bne.n	8001c0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b80:	4b33      	ldr	r3, [pc, #204]	@ (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b86:	f7ff fb53 	bl	8001230 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8e:	f7ff fb4f 	bl	8001230 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e06d      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba0:	4b29      	ldr	r3, [pc, #164]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f0      	bne.n	8001b8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bb4:	d108      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bb6:	4b24      	ldr	r3, [pc, #144]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	4921      	ldr	r1, [pc, #132]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a19      	ldr	r1, [r3, #32]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	491b      	ldr	r1, [pc, #108]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7ff fb23 	bl	8001230 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bee:	f7ff fb1f 	bl	8001230 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e03d      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c00:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x46a>
 8001c0c:	e035      	b.n	8001c7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0e:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff fb0c 	bl	8001230 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff fb08 	bl	8001230 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e026      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x498>
 8001c3a:	e01e      	b.n	8001c7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d107      	bne.n	8001c54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e019      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40007000 	.word	0x40007000
 8001c50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c54:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <HAL_RCC_OscConfig+0x500>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40021000 	.word	0x40021000

08001c88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0d0      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d910      	bls.n	8001ccc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001caa:	4b67      	ldr	r3, [pc, #412]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 0207 	bic.w	r2, r3, #7
 8001cb2:	4965      	ldr	r1, [pc, #404]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cba:	4b63      	ldr	r3, [pc, #396]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0b8      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d020      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce4:	4b59      	ldr	r3, [pc, #356]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4a58      	ldr	r2, [pc, #352]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cfc:	4b53      	ldr	r3, [pc, #332]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4a52      	ldr	r2, [pc, #328]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001d06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d08:	4b50      	ldr	r3, [pc, #320]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	494d      	ldr	r1, [pc, #308]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d040      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	4b47      	ldr	r3, [pc, #284]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d115      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e07f      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d46:	4b41      	ldr	r3, [pc, #260]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d109      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e073      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d56:	4b3d      	ldr	r3, [pc, #244]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e06b      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d66:	4b39      	ldr	r3, [pc, #228]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f023 0203 	bic.w	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4936      	ldr	r1, [pc, #216]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d78:	f7ff fa5a 	bl	8001230 <HAL_GetTick>
 8001d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	e00a      	b.n	8001d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d80:	f7ff fa56 	bl	8001230 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e053      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d96:	4b2d      	ldr	r3, [pc, #180]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 020c 	and.w	r2, r3, #12
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d1eb      	bne.n	8001d80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001da8:	4b27      	ldr	r3, [pc, #156]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d210      	bcs.n	8001dd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4b24      	ldr	r3, [pc, #144]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 0207 	bic.w	r2, r3, #7
 8001dbe:	4922      	ldr	r1, [pc, #136]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e032      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de4:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	4916      	ldr	r1, [pc, #88]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d009      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	490e      	ldr	r1, [pc, #56]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e16:	f000 f821 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	490a      	ldr	r1, [pc, #40]	@ (8001e50 <HAL_RCC_ClockConfig+0x1c8>)
 8001e28:	5ccb      	ldrb	r3, [r1, r3]
 8001e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2e:	4a09      	ldr	r2, [pc, #36]	@ (8001e54 <HAL_RCC_ClockConfig+0x1cc>)
 8001e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e32:	4b09      	ldr	r3, [pc, #36]	@ (8001e58 <HAL_RCC_ClockConfig+0x1d0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff f904 	bl	8001044 <HAL_InitTick>

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40022000 	.word	0x40022000
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08005ce4 	.word	0x08005ce4
 8001e54:	20000008 	.word	0x20000008
 8001e58:	2000000c 	.word	0x2000000c

08001e5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d002      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x30>
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d003      	beq.n	8001e92 <HAL_RCC_GetSysClockFreq+0x36>
 8001e8a:	e027      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e8e:	613b      	str	r3, [r7, #16]
      break;
 8001e90:	e027      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	0c9b      	lsrs	r3, r3, #18
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	4a17      	ldr	r2, [pc, #92]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e9c:	5cd3      	ldrb	r3, [r2, r3]
 8001e9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d010      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eaa:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	0c5b      	lsrs	r3, r3, #17
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	4a11      	ldr	r2, [pc, #68]	@ (8001efc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001eb6:	5cd3      	ldrb	r3, [r2, r3]
 8001eb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ebe:	fb03 f202 	mul.w	r2, r3, r2
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	e004      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a0c      	ldr	r2, [pc, #48]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ed0:	fb02 f303 	mul.w	r3, r2, r3
 8001ed4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	613b      	str	r3, [r7, #16]
      break;
 8001eda:	e002      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001edc:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ede:	613b      	str	r3, [r7, #16]
      break;
 8001ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ee2:	693b      	ldr	r3, [r7, #16]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	371c      	adds	r7, #28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	007a1200 	.word	0x007a1200
 8001ef8:	08005cfc 	.word	0x08005cfc
 8001efc:	08005d0c 	.word	0x08005d0c
 8001f00:	003d0900 	.word	0x003d0900

08001f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f08:	4b02      	ldr	r3, [pc, #8]	@ (8001f14 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	20000008 	.word	0x20000008

08001f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f1c:	f7ff fff2 	bl	8001f04 <HAL_RCC_GetHCLKFreq>
 8001f20:	4602      	mov	r2, r0
 8001f22:	4b05      	ldr	r3, [pc, #20]	@ (8001f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	4903      	ldr	r1, [pc, #12]	@ (8001f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f2e:	5ccb      	ldrb	r3, [r1, r3]
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08005cf4 	.word	0x08005cf4

08001f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f44:	f7ff ffde 	bl	8001f04 <HAL_RCC_GetHCLKFreq>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	0adb      	lsrs	r3, r3, #11
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	4903      	ldr	r1, [pc, #12]	@ (8001f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f56:	5ccb      	ldrb	r3, [r1, r3]
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	08005cf4 	.word	0x08005cf4

08001f68 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	220f      	movs	r2, #15
 8001f76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f78:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <HAL_RCC_GetClockConfig+0x58>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0203 	and.w	r2, r3, #3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f84:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc0 <HAL_RCC_GetClockConfig+0x58>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f90:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <HAL_RCC_GetClockConfig+0x58>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f9c:	4b08      	ldr	r3, [pc, #32]	@ (8001fc0 <HAL_RCC_GetClockConfig+0x58>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	08db      	lsrs	r3, r3, #3
 8001fa2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001faa:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0207 	and.w	r2, r3, #7
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40022000 	.word	0x40022000

08001fc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ffc <RCC_Delay+0x34>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8002000 <RCC_Delay+0x38>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	0a5b      	lsrs	r3, r3, #9
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	fb02 f303 	mul.w	r3, r2, r3
 8001fe2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fe4:	bf00      	nop
  }
  while (Delay --);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1e5a      	subs	r2, r3, #1
 8001fea:	60fa      	str	r2, [r7, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1f9      	bne.n	8001fe4 <RCC_Delay+0x1c>
}
 8001ff0:	bf00      	nop
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	20000008 	.word	0x20000008
 8002000:	10624dd3 	.word	0x10624dd3

08002004 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e076      	b.n	8002104 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201a:	2b00      	cmp	r3, #0
 800201c:	d108      	bne.n	8002030 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002026:	d009      	beq.n	800203c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	61da      	str	r2, [r3, #28]
 800202e:	e005      	b.n	800203c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe ff60 	bl	8000f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2202      	movs	r2, #2
 8002060:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002072:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c0:	ea42 0103 	orr.w	r1, r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	0c1a      	lsrs	r2, r3, #16
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f002 0204 	and.w	r2, r2, #4
 80020e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69da      	ldr	r2, [r3, #28]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	4613      	mov	r3, r2
 800211a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_SPI_Transmit+0x22>
 800212a:	2302      	movs	r3, #2
 800212c:	e12d      	b.n	800238a <HAL_SPI_Transmit+0x27e>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002136:	f7ff f87b 	bl	8001230 <HAL_GetTick>
 800213a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800213c:	88fb      	ldrh	r3, [r7, #6]
 800213e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b01      	cmp	r3, #1
 800214a:	d002      	beq.n	8002152 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800214c:	2302      	movs	r3, #2
 800214e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002150:	e116      	b.n	8002380 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <HAL_SPI_Transmit+0x52>
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d102      	bne.n	8002164 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002162:	e10d      	b.n	8002380 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2203      	movs	r2, #3
 8002168:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	88fa      	ldrh	r2, [r7, #6]
 800217c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	88fa      	ldrh	r2, [r7, #6]
 8002182:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021aa:	d10f      	bne.n	80021cc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d6:	2b40      	cmp	r3, #64	@ 0x40
 80021d8:	d007      	beq.n	80021ea <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021f2:	d14f      	bne.n	8002294 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <HAL_SPI_Transmit+0xf6>
 80021fc:	8afb      	ldrh	r3, [r7, #22]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d142      	bne.n	8002288 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	881a      	ldrh	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	1c9a      	adds	r2, r3, #2
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800221c:	b29b      	uxth	r3, r3
 800221e:	3b01      	subs	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002226:	e02f      	b.n	8002288 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b02      	cmp	r3, #2
 8002234:	d112      	bne.n	800225c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	881a      	ldrh	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	1c9a      	adds	r2, r3, #2
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	86da      	strh	r2, [r3, #54]	@ 0x36
 800225a:	e015      	b.n	8002288 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800225c:	f7fe ffe8 	bl	8001230 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d803      	bhi.n	8002274 <HAL_SPI_Transmit+0x168>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002272:	d102      	bne.n	800227a <HAL_SPI_Transmit+0x16e>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002286:	e07b      	b.n	8002380 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1ca      	bne.n	8002228 <HAL_SPI_Transmit+0x11c>
 8002292:	e050      	b.n	8002336 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <HAL_SPI_Transmit+0x196>
 800229c:	8afb      	ldrh	r3, [r7, #22]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d144      	bne.n	800232c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	330c      	adds	r3, #12
 80022ac:	7812      	ldrb	r2, [r2, #0]
 80022ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022c8:	e030      	b.n	800232c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d113      	bne.n	8002300 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	330c      	adds	r3, #12
 80022e2:	7812      	ldrb	r2, [r2, #0]
 80022e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80022fe:	e015      	b.n	800232c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002300:	f7fe ff96 	bl	8001230 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d803      	bhi.n	8002318 <HAL_SPI_Transmit+0x20c>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002316:	d102      	bne.n	800231e <HAL_SPI_Transmit+0x212>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800232a:	e029      	b.n	8002380 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002330:	b29b      	uxth	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1c9      	bne.n	80022ca <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	6839      	ldr	r1, [r7, #0]
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 fbcc 	bl	8002ad8 <SPI_EndRxTxTransaction>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2220      	movs	r2, #32
 800234a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10a      	bne.n	800236a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002354:	2300      	movs	r3, #0
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	77fb      	strb	r3, [r7, #31]
 8002376:	e003      	b.n	8002380 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002388:	7ffb      	ldrb	r3, [r7, #31]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3720      	adds	r7, #32
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b088      	sub	sp, #32
 8002396:	af02      	add	r7, sp, #8
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	4613      	mov	r3, r2
 80023a0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d002      	beq.n	80023b8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80023b2:	2302      	movs	r3, #2
 80023b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023b6:	e0fb      	b.n	80025b0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023c0:	d112      	bne.n	80023e8 <HAL_SPI_Receive+0x56>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10e      	bne.n	80023e8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2204      	movs	r2, #4
 80023ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80023d2:	88fa      	ldrh	r2, [r7, #6]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	4613      	mov	r3, r2
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 f8ef 	bl	80025c2 <HAL_SPI_TransmitReceive>
 80023e4:	4603      	mov	r3, r0
 80023e6:	e0e8      	b.n	80025ba <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_SPI_Receive+0x64>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e0e1      	b.n	80025ba <HAL_SPI_Receive+0x228>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023fe:	f7fe ff17 	bl	8001230 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_SPI_Receive+0x7e>
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002414:	e0cc      	b.n	80025b0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2204      	movs	r2, #4
 800241a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	88fa      	ldrh	r2, [r7, #6]
 800242e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	88fa      	ldrh	r2, [r7, #6]
 8002434:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800245c:	d10f      	bne.n	800247e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800246c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800247c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002488:	2b40      	cmp	r3, #64	@ 0x40
 800248a:	d007      	beq.n	800249c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800249a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d16a      	bne.n	800257a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80024a4:	e032      	b.n	800250c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d115      	bne.n	80024e0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f103 020c 	add.w	r2, r3, #12
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c0:	7812      	ldrb	r2, [r2, #0]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80024de:	e015      	b.n	800250c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024e0:	f7fe fea6 	bl	8001230 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d803      	bhi.n	80024f8 <HAL_SPI_Receive+0x166>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f6:	d102      	bne.n	80024fe <HAL_SPI_Receive+0x16c>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d106      	bne.n	800250c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800250a:	e051      	b.n	80025b0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002510:	b29b      	uxth	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1c7      	bne.n	80024a6 <HAL_SPI_Receive+0x114>
 8002516:	e035      	b.n	8002584 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b01      	cmp	r3, #1
 8002524:	d113      	bne.n	800254e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002530:	b292      	uxth	r2, r2
 8002532:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002538:	1c9a      	adds	r2, r3, #2
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800254c:	e015      	b.n	800257a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800254e:	f7fe fe6f 	bl	8001230 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d803      	bhi.n	8002566 <HAL_SPI_Receive+0x1d4>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d102      	bne.n	800256c <HAL_SPI_Receive+0x1da>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d106      	bne.n	800257a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002578:	e01a      	b.n	80025b0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1c9      	bne.n	8002518 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	6839      	ldr	r1, [r7, #0]
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 fa53 	bl	8002a34 <SPI_EndRxTransaction>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2220      	movs	r2, #32
 8002598:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	75fb      	strb	r3, [r7, #23]
 80025a6:	e003      	b.n	80025b0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80025b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b08c      	sub	sp, #48	@ 0x30
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025d0:	2301      	movs	r3, #1
 80025d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_SPI_TransmitReceive+0x26>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e198      	b.n	800291a <HAL_SPI_TransmitReceive+0x358>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025f0:	f7fe fe1e 	bl	8001230 <HAL_GetTick>
 80025f4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800260a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800260e:	2b01      	cmp	r3, #1
 8002610:	d00f      	beq.n	8002632 <HAL_SPI_TransmitReceive+0x70>
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002618:	d107      	bne.n	800262a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d103      	bne.n	800262a <HAL_SPI_TransmitReceive+0x68>
 8002622:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002626:	2b04      	cmp	r3, #4
 8002628:	d003      	beq.n	8002632 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800262a:	2302      	movs	r3, #2
 800262c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002630:	e16d      	b.n	800290e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_SPI_TransmitReceive+0x82>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_SPI_TransmitReceive+0x82>
 800263e:	887b      	ldrh	r3, [r7, #2]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d103      	bne.n	800264c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800264a:	e160      	b.n	800290e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b04      	cmp	r3, #4
 8002656:	d003      	beq.n	8002660 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2205      	movs	r2, #5
 800265c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	887a      	ldrh	r2, [r7, #2]
 8002676:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	887a      	ldrh	r2, [r7, #2]
 8002682:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	887a      	ldrh	r2, [r7, #2]
 8002688:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a0:	2b40      	cmp	r3, #64	@ 0x40
 80026a2:	d007      	beq.n	80026b4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026bc:	d17c      	bne.n	80027b8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <HAL_SPI_TransmitReceive+0x10a>
 80026c6:	8b7b      	ldrh	r3, [r7, #26]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d16a      	bne.n	80027a2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d0:	881a      	ldrh	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026dc:	1c9a      	adds	r2, r3, #2
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026f0:	e057      	b.n	80027a2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d11b      	bne.n	8002738 <HAL_SPI_TransmitReceive+0x176>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d016      	beq.n	8002738 <HAL_SPI_TransmitReceive+0x176>
 800270a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270c:	2b01      	cmp	r3, #1
 800270e:	d113      	bne.n	8002738 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002714:	881a      	ldrh	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002720:	1c9a      	adds	r2, r3, #2
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b01      	cmp	r3, #1
 8002744:	d119      	bne.n	800277a <HAL_SPI_TransmitReceive+0x1b8>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800274a:	b29b      	uxth	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d014      	beq.n	800277a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800275a:	b292      	uxth	r2, r2
 800275c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002762:	1c9a      	adds	r2, r3, #2
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800276c:	b29b      	uxth	r3, r3
 800276e:	3b01      	subs	r3, #1
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002776:	2301      	movs	r3, #1
 8002778:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800277a:	f7fe fd59 	bl	8001230 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002786:	429a      	cmp	r2, r3
 8002788:	d80b      	bhi.n	80027a2 <HAL_SPI_TransmitReceive+0x1e0>
 800278a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002790:	d007      	beq.n	80027a2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80027a0:	e0b5      	b.n	800290e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1a2      	bne.n	80026f2 <HAL_SPI_TransmitReceive+0x130>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d19d      	bne.n	80026f2 <HAL_SPI_TransmitReceive+0x130>
 80027b6:	e080      	b.n	80028ba <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_SPI_TransmitReceive+0x204>
 80027c0:	8b7b      	ldrh	r3, [r7, #26]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d16f      	bne.n	80028a6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	330c      	adds	r3, #12
 80027d0:	7812      	ldrb	r2, [r2, #0]
 80027d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027ec:	e05b      	b.n	80028a6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d11c      	bne.n	8002836 <HAL_SPI_TransmitReceive+0x274>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002800:	b29b      	uxth	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d017      	beq.n	8002836 <HAL_SPI_TransmitReceive+0x274>
 8002806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002808:	2b01      	cmp	r3, #1
 800280a:	d114      	bne.n	8002836 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	330c      	adds	r3, #12
 8002816:	7812      	ldrb	r2, [r2, #0]
 8002818:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b01      	cmp	r3, #1
 8002842:	d119      	bne.n	8002878 <HAL_SPI_TransmitReceive+0x2b6>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d014      	beq.n	8002878 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800286a:	b29b      	uxth	r3, r3
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002874:	2301      	movs	r3, #1
 8002876:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002878:	f7fe fcda 	bl	8001230 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002884:	429a      	cmp	r2, r3
 8002886:	d803      	bhi.n	8002890 <HAL_SPI_TransmitReceive+0x2ce>
 8002888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800288a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288e:	d102      	bne.n	8002896 <HAL_SPI_TransmitReceive+0x2d4>
 8002890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002892:	2b00      	cmp	r3, #0
 8002894:	d107      	bne.n	80028a6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80028a4:	e033      	b.n	800290e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d19e      	bne.n	80027ee <HAL_SPI_TransmitReceive+0x22c>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d199      	bne.n	80027ee <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f90a 	bl	8002ad8 <SPI_EndRxTxTransaction>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d006      	beq.n	80028d8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80028d6:	e01a      	b.n	800290e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10a      	bne.n	80028f6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002904:	e003      	b.n	800290e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002916:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800291a:	4618      	mov	r0, r3
 800291c:	3730      	adds	r7, #48	@ 0x30
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	4613      	mov	r3, r2
 8002932:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002934:	f7fe fc7c 	bl	8001230 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	4413      	add	r3, r2
 8002942:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002944:	f7fe fc74 	bl	8001230 <HAL_GetTick>
 8002948:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800294a:	4b39      	ldr	r3, [pc, #228]	@ (8002a30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	015b      	lsls	r3, r3, #5
 8002950:	0d1b      	lsrs	r3, r3, #20
 8002952:	69fa      	ldr	r2, [r7, #28]
 8002954:	fb02 f303 	mul.w	r3, r2, r3
 8002958:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800295a:	e054      	b.n	8002a06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002962:	d050      	beq.n	8002a06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002964:	f7fe fc64 	bl	8001230 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	429a      	cmp	r2, r3
 8002972:	d902      	bls.n	800297a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d13d      	bne.n	80029f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002988:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002992:	d111      	bne.n	80029b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800299c:	d004      	beq.n	80029a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029a6:	d107      	bne.n	80029b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029c0:	d10f      	bne.n	80029e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e017      	b.n	8002a26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	bf0c      	ite	eq
 8002a16:	2301      	moveq	r3, #1
 8002a18:	2300      	movne	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d19b      	bne.n	800295c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3720      	adds	r7, #32
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000008 	.word	0x20000008

08002a34 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a48:	d111      	bne.n	8002a6e <SPI_EndRxTransaction+0x3a>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a52:	d004      	beq.n	8002a5e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a5c:	d107      	bne.n	8002a6e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a6c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a76:	d117      	bne.n	8002aa8 <SPI_EndRxTransaction+0x74>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a80:	d112      	bne.n	8002aa8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f7ff ff49 	bl	8002924 <SPI_WaitFlagStateUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01a      	beq.n	8002ace <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9c:	f043 0220 	orr.w	r2, r3, #32
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e013      	b.n	8002ad0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2180      	movs	r1, #128	@ 0x80
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f7ff ff36 	bl	8002924 <SPI_WaitFlagStateUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d007      	beq.n	8002ace <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac2:	f043 0220 	orr.w	r2, r3, #32
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e000      	b.n	8002ad0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2200      	movs	r2, #0
 8002aec:	2180      	movs	r1, #128	@ 0x80
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f7ff ff18 	bl	8002924 <SPI_WaitFlagStateUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d007      	beq.n	8002b0a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002afe:	f043 0220 	orr.w	r2, r3, #32
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e000      	b.n	8002b0c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e041      	b.n	8002baa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f839 	bl	8002bb2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3304      	adds	r3, #4
 8002b50:	4619      	mov	r1, r3
 8002b52:	4610      	mov	r0, r2
 8002b54:	f000 f9b4 	bl	8002ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d001      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e03a      	b.n	8002c52 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a18      	ldr	r2, [pc, #96]	@ (8002c5c <HAL_TIM_Base_Start_IT+0x98>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00e      	beq.n	8002c1c <HAL_TIM_Base_Start_IT+0x58>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c06:	d009      	beq.n	8002c1c <HAL_TIM_Base_Start_IT+0x58>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a14      	ldr	r2, [pc, #80]	@ (8002c60 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d004      	beq.n	8002c1c <HAL_TIM_Base_Start_IT+0x58>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a13      	ldr	r2, [pc, #76]	@ (8002c64 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d111      	bne.n	8002c40 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b06      	cmp	r3, #6
 8002c2c:	d010      	beq.n	8002c50 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0201 	orr.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c3e:	e007      	b.n	8002c50 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr
 8002c5c:	40012c00 	.word	0x40012c00
 8002c60:	40000400 	.word	0x40000400
 8002c64:	40000800 	.word	0x40000800

08002c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d122      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d11b      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0202 	mvn.w	r2, #2
 8002c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f8ed 	bl	8002e8a <HAL_TIM_IC_CaptureCallback>
 8002cb0:	e005      	b.n	8002cbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f8e0 	bl	8002e78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f8ef 	bl	8002e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d122      	bne.n	8002d18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d11b      	bne.n	8002d18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0204 	mvn.w	r2, #4
 8002ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2202      	movs	r2, #2
 8002cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f8c3 	bl	8002e8a <HAL_TIM_IC_CaptureCallback>
 8002d04:	e005      	b.n	8002d12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f8b6 	bl	8002e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f8c5 	bl	8002e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d122      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d11b      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0208 	mvn.w	r2, #8
 8002d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2204      	movs	r2, #4
 8002d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f899 	bl	8002e8a <HAL_TIM_IC_CaptureCallback>
 8002d58:	e005      	b.n	8002d66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f88c 	bl	8002e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f89b 	bl	8002e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d122      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b10      	cmp	r3, #16
 8002d86:	d11b      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0210 	mvn.w	r2, #16
 8002d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2208      	movs	r2, #8
 8002d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f86f 	bl	8002e8a <HAL_TIM_IC_CaptureCallback>
 8002dac:	e005      	b.n	8002dba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f862 	bl	8002e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f871 	bl	8002e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d10e      	bne.n	8002dec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d107      	bne.n	8002dec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0201 	mvn.w	r2, #1
 8002de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fe f848 	bl	8000e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df6:	2b80      	cmp	r3, #128	@ 0x80
 8002df8:	d10e      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e04:	2b80      	cmp	r3, #128	@ 0x80
 8002e06:	d107      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f8bf 	bl	8002f96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e22:	2b40      	cmp	r3, #64	@ 0x40
 8002e24:	d10e      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e30:	2b40      	cmp	r3, #64	@ 0x40
 8002e32:	d107      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f835 	bl	8002eae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b20      	cmp	r3, #32
 8002e50:	d10e      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d107      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f06f 0220 	mvn.w	r2, #32
 8002e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f88a 	bl	8002f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr

08002e8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr

08002eae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a29      	ldr	r2, [pc, #164]	@ (8002f78 <TIM_Base_SetConfig+0xb8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00b      	beq.n	8002ef0 <TIM_Base_SetConfig+0x30>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ede:	d007      	beq.n	8002ef0 <TIM_Base_SetConfig+0x30>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a26      	ldr	r2, [pc, #152]	@ (8002f7c <TIM_Base_SetConfig+0xbc>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d003      	beq.n	8002ef0 <TIM_Base_SetConfig+0x30>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a25      	ldr	r2, [pc, #148]	@ (8002f80 <TIM_Base_SetConfig+0xc0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d108      	bne.n	8002f02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a1c      	ldr	r2, [pc, #112]	@ (8002f78 <TIM_Base_SetConfig+0xb8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00b      	beq.n	8002f22 <TIM_Base_SetConfig+0x62>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f10:	d007      	beq.n	8002f22 <TIM_Base_SetConfig+0x62>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a19      	ldr	r2, [pc, #100]	@ (8002f7c <TIM_Base_SetConfig+0xbc>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d003      	beq.n	8002f22 <TIM_Base_SetConfig+0x62>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a18      	ldr	r2, [pc, #96]	@ (8002f80 <TIM_Base_SetConfig+0xc0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d108      	bne.n	8002f34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a07      	ldr	r2, [pc, #28]	@ (8002f78 <TIM_Base_SetConfig+0xb8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d103      	bne.n	8002f68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	615a      	str	r2, [r3, #20]
}
 8002f6e:	bf00      	nop
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	40012c00 	.word	0x40012c00
 8002f7c:	40000400 	.word	0x40000400
 8002f80:	40000800 	.word	0x40000800

08002f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr

08002f96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e042      	b.n	8003040 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fd ffee 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2224      	movs	r2, #36	@ 0x24
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f82b 	bl	8003048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003010:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003020:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003082:	f023 030c 	bic.w	r3, r3, #12
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	430b      	orrs	r3, r1
 800308e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a2c      	ldr	r2, [pc, #176]	@ (800315c <UART_SetConfig+0x114>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d103      	bne.n	80030b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030b0:	f7fe ff46 	bl	8001f40 <HAL_RCC_GetPCLK2Freq>
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	e002      	b.n	80030be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030b8:	f7fe ff2e 	bl	8001f18 <HAL_RCC_GetPCLK1Freq>
 80030bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	009a      	lsls	r2, r3, #2
 80030c8:	441a      	add	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d4:	4a22      	ldr	r2, [pc, #136]	@ (8003160 <UART_SetConfig+0x118>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	0119      	lsls	r1, r3, #4
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	009a      	lsls	r2, r3, #2
 80030e8:	441a      	add	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003160 <UART_SetConfig+0x118>)
 80030f6:	fba3 0302 	umull	r0, r3, r3, r2
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	2064      	movs	r0, #100	@ 0x64
 80030fe:	fb00 f303 	mul.w	r3, r0, r3
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	3332      	adds	r3, #50	@ 0x32
 8003108:	4a15      	ldr	r2, [pc, #84]	@ (8003160 <UART_SetConfig+0x118>)
 800310a:	fba2 2303 	umull	r2, r3, r2, r3
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003114:	4419      	add	r1, r3
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	009a      	lsls	r2, r3, #2
 8003120:	441a      	add	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	fbb2 f2f3 	udiv	r2, r2, r3
 800312c:	4b0c      	ldr	r3, [pc, #48]	@ (8003160 <UART_SetConfig+0x118>)
 800312e:	fba3 0302 	umull	r0, r3, r3, r2
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	2064      	movs	r0, #100	@ 0x64
 8003136:	fb00 f303 	mul.w	r3, r0, r3
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	3332      	adds	r3, #50	@ 0x32
 8003140:	4a07      	ldr	r2, [pc, #28]	@ (8003160 <UART_SetConfig+0x118>)
 8003142:	fba2 2303 	umull	r2, r3, r2, r3
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	f003 020f 	and.w	r2, r3, #15
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	440a      	add	r2, r1
 8003152:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003154:	bf00      	nop
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40013800 	.word	0x40013800
 8003160:	51eb851f 	.word	0x51eb851f

08003164 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800316a:	f3ef 8305 	mrs	r3, IPSR
 800316e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003170:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10f      	bne.n	8003196 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003176:	f3ef 8310 	mrs	r3, PRIMASK
 800317a:	607b      	str	r3, [r7, #4]
  return(result);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <osKernelInitialize+0x32>
 8003182:	4b10      	ldr	r3, [pc, #64]	@ (80031c4 <osKernelInitialize+0x60>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d109      	bne.n	800319e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800318a:	f3ef 8311 	mrs	r3, BASEPRI
 800318e:	603b      	str	r3, [r7, #0]
  return(result);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003196:	f06f 0305 	mvn.w	r3, #5
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	e00c      	b.n	80031b8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800319e:	4b09      	ldr	r3, [pc, #36]	@ (80031c4 <osKernelInitialize+0x60>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d105      	bne.n	80031b2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80031a6:	4b07      	ldr	r3, [pc, #28]	@ (80031c4 <osKernelInitialize+0x60>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	e002      	b.n	80031b8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80031b2:	f04f 33ff 	mov.w	r3, #4294967295
 80031b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80031b8:	68fb      	ldr	r3, [r7, #12]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr
 80031c4:	200001ac 	.word	0x200001ac

080031c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031ce:	f3ef 8305 	mrs	r3, IPSR
 80031d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80031d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10f      	bne.n	80031fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031da:	f3ef 8310 	mrs	r3, PRIMASK
 80031de:	607b      	str	r3, [r7, #4]
  return(result);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <osKernelStart+0x32>
 80031e6:	4b11      	ldr	r3, [pc, #68]	@ (800322c <osKernelStart+0x64>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d109      	bne.n	8003202 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031ee:	f3ef 8311 	mrs	r3, BASEPRI
 80031f2:	603b      	str	r3, [r7, #0]
  return(result);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <osKernelStart+0x3a>
    stat = osErrorISR;
 80031fa:	f06f 0305 	mvn.w	r3, #5
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	e00e      	b.n	8003220 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003202:	4b0a      	ldr	r3, [pc, #40]	@ (800322c <osKernelStart+0x64>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d107      	bne.n	800321a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800320a:	4b08      	ldr	r3, [pc, #32]	@ (800322c <osKernelStart+0x64>)
 800320c:	2202      	movs	r2, #2
 800320e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003210:	f001 f890 	bl	8004334 <vTaskStartScheduler>
      stat = osOK;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	e002      	b.n	8003220 <osKernelStart+0x58>
    } else {
      stat = osError;
 800321a:	f04f 33ff 	mov.w	r3, #4294967295
 800321e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003220:	68fb      	ldr	r3, [r7, #12]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	200001ac 	.word	0x200001ac

08003230 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003230:	b580      	push	{r7, lr}
 8003232:	b092      	sub	sp, #72	@ 0x48
 8003234:	af04      	add	r7, sp, #16
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003240:	f3ef 8305 	mrs	r3, IPSR
 8003244:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003248:	2b00      	cmp	r3, #0
 800324a:	f040 8094 	bne.w	8003376 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800324e:	f3ef 8310 	mrs	r3, PRIMASK
 8003252:	623b      	str	r3, [r7, #32]
  return(result);
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	2b00      	cmp	r3, #0
 8003258:	f040 808d 	bne.w	8003376 <osThreadNew+0x146>
 800325c:	4b48      	ldr	r3, [pc, #288]	@ (8003380 <osThreadNew+0x150>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d106      	bne.n	8003272 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003264:	f3ef 8311 	mrs	r3, BASEPRI
 8003268:	61fb      	str	r3, [r7, #28]
  return(result);
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	2b00      	cmp	r3, #0
 800326e:	f040 8082 	bne.w	8003376 <osThreadNew+0x146>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d07e      	beq.n	8003376 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003278:	2380      	movs	r3, #128	@ 0x80
 800327a:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800327c:	2318      	movs	r3, #24
 800327e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8003280:	2300      	movs	r3, #0
 8003282:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003284:	f107 031b 	add.w	r3, r7, #27
 8003288:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800328a:	f04f 33ff 	mov.w	r3, #4294967295
 800328e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d045      	beq.n	8003322 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <osThreadNew+0x74>
        name = attr->name;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80032b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <osThreadNew+0x9a>
 80032b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ba:	2b38      	cmp	r3, #56	@ 0x38
 80032bc:	d805      	bhi.n	80032ca <osThreadNew+0x9a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <osThreadNew+0x9e>
        return (NULL);
 80032ca:	2300      	movs	r3, #0
 80032cc:	e054      	b.n	8003378 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00e      	beq.n	8003304 <osThreadNew+0xd4>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	2b5b      	cmp	r3, #91	@ 0x5b
 80032ec:	d90a      	bls.n	8003304 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d006      	beq.n	8003304 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <osThreadNew+0xd4>
        mem = 1;
 80032fe:	2301      	movs	r3, #1
 8003300:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003302:	e010      	b.n	8003326 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10c      	bne.n	8003326 <osThreadNew+0xf6>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d108      	bne.n	8003326 <osThreadNew+0xf6>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d104      	bne.n	8003326 <osThreadNew+0xf6>
          mem = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003320:	e001      	b.n	8003326 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8003326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003328:	2b01      	cmp	r3, #1
 800332a:	d110      	bne.n	800334e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003334:	9202      	str	r2, [sp, #8]
 8003336:	9301      	str	r3, [sp, #4]
 8003338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003340:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 fe24 	bl	8003f90 <xTaskCreateStatic>
 8003348:	4603      	mov	r3, r0
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	e013      	b.n	8003376 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800334e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003350:	2b00      	cmp	r3, #0
 8003352:	d110      	bne.n	8003376 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003356:	b29a      	uxth	r2, r3
 8003358:	f107 0314 	add.w	r3, r7, #20
 800335c:	9301      	str	r3, [sp, #4]
 800335e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 fe71 	bl	800404e <xTaskCreate>
 800336c:	4603      	mov	r3, r0
 800336e:	2b01      	cmp	r3, #1
 8003370:	d001      	beq.n	8003376 <osThreadNew+0x146>
          hTask = NULL;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003376:	697b      	ldr	r3, [r7, #20]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3738      	adds	r7, #56	@ 0x38
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	200001ac 	.word	0x200001ac

08003384 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800338c:	f3ef 8305 	mrs	r3, IPSR
 8003390:	613b      	str	r3, [r7, #16]
  return(result);
 8003392:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10f      	bne.n	80033b8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003398:	f3ef 8310 	mrs	r3, PRIMASK
 800339c:	60fb      	str	r3, [r7, #12]
  return(result);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d109      	bne.n	80033b8 <osDelay+0x34>
 80033a4:	4b0d      	ldr	r3, [pc, #52]	@ (80033dc <osDelay+0x58>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d109      	bne.n	80033c0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033ac:	f3ef 8311 	mrs	r3, BASEPRI
 80033b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <osDelay+0x3c>
    stat = osErrorISR;
 80033b8:	f06f 0305 	mvn.w	r3, #5
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	e007      	b.n	80033d0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 ff7c 	bl	80042c8 <vTaskDelay>
    }
  }

  return (stat);
 80033d0:	697b      	ldr	r3, [r7, #20]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	200001ac 	.word	0x200001ac

080033e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4a06      	ldr	r2, [pc, #24]	@ (8003408 <vApplicationGetIdleTaskMemory+0x28>)
 80033f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	4a05      	ldr	r2, [pc, #20]	@ (800340c <vApplicationGetIdleTaskMemory+0x2c>)
 80033f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2280      	movs	r2, #128	@ 0x80
 80033fc:	601a      	str	r2, [r3, #0]
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	200001b0 	.word	0x200001b0
 800340c:	2000020c 	.word	0x2000020c

08003410 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4a07      	ldr	r2, [pc, #28]	@ (800343c <vApplicationGetTimerTaskMemory+0x2c>)
 8003420:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	4a06      	ldr	r2, [pc, #24]	@ (8003440 <vApplicationGetTimerTaskMemory+0x30>)
 8003426:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800342e:	601a      	str	r2, [r3, #0]
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	2000040c 	.word	0x2000040c
 8003440:	20000468 	.word	0x20000468

08003444 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f103 0208 	add.w	r2, r3, #8
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f04f 32ff 	mov.w	r2, #4294967295
 800345c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f103 0208 	add.w	r2, r3, #8
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f103 0208 	add.w	r2, r3, #8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr

0800349a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800349a:	b480      	push	{r7}
 800349c:	b085      	sub	sp, #20
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	601a      	str	r2, [r3, #0]
}
 80034d6:	bf00      	nop
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr

080034e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f6:	d103      	bne.n	8003500 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	e00c      	b.n	800351a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3308      	adds	r3, #8
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	e002      	b.n	800350e <vListInsert+0x2e>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	429a      	cmp	r2, r3
 8003518:	d2f6      	bcs.n	8003508 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	601a      	str	r2, [r3, #0]
}
 8003546:	bf00      	nop
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr

08003550 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6892      	ldr	r2, [r2, #8]
 8003566:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6852      	ldr	r2, [r2, #4]
 8003570:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	429a      	cmp	r2, r3
 800357a:	d103      	bne.n	8003584 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	1e5a      	subs	r2, r3, #1
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr
	...

080035a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10b      	bne.n	80035d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80035ca:	bf00      	nop
 80035cc:	bf00      	nop
 80035ce:	e7fd      	b.n	80035cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80035d0:	f001 fffc 	bl	80055cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035dc:	68f9      	ldr	r1, [r7, #12]
 80035de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80035e0:	fb01 f303 	mul.w	r3, r1, r3
 80035e4:	441a      	add	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003600:	3b01      	subs	r3, #1
 8003602:	68f9      	ldr	r1, [r7, #12]
 8003604:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	441a      	add	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	22ff      	movs	r2, #255	@ 0xff
 8003614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	22ff      	movs	r2, #255	@ 0xff
 800361c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d114      	bne.n	8003650 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d01a      	beq.n	8003664 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	3310      	adds	r3, #16
 8003632:	4618      	mov	r0, r3
 8003634:	f001 f910 	bl	8004858 <xTaskRemoveFromEventList>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d012      	beq.n	8003664 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800363e:	4b0d      	ldr	r3, [pc, #52]	@ (8003674 <xQueueGenericReset+0xd0>)
 8003640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	e009      	b.n	8003664 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	3310      	adds	r3, #16
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff fef5 	bl	8003444 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3324      	adds	r3, #36	@ 0x24
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fef0 	bl	8003444 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003664:	f001 ffe2 	bl	800562c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003668:	2301      	movs	r3, #1
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	e000ed04 	.word	0xe000ed04

08003678 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08e      	sub	sp, #56	@ 0x38
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10b      	bne.n	80036a4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800368c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800369e:	bf00      	nop
 80036a0:	bf00      	nop
 80036a2:	e7fd      	b.n	80036a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10b      	bne.n	80036c2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80036aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ae:	f383 8811 	msr	BASEPRI, r3
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	e7fd      	b.n	80036be <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <xQueueGenericCreateStatic+0x56>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <xQueueGenericCreateStatic+0x5a>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <xQueueGenericCreateStatic+0x5c>
 80036d2:	2300      	movs	r3, #0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10b      	bne.n	80036f0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80036d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036dc:	f383 8811 	msr	BASEPRI, r3
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	623b      	str	r3, [r7, #32]
}
 80036ea:	bf00      	nop
 80036ec:	bf00      	nop
 80036ee:	e7fd      	b.n	80036ec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d102      	bne.n	80036fc <xQueueGenericCreateStatic+0x84>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <xQueueGenericCreateStatic+0x88>
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <xQueueGenericCreateStatic+0x8a>
 8003700:	2300      	movs	r3, #0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10b      	bne.n	800371e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800370a:	f383 8811 	msr	BASEPRI, r3
 800370e:	f3bf 8f6f 	isb	sy
 8003712:	f3bf 8f4f 	dsb	sy
 8003716:	61fb      	str	r3, [r7, #28]
}
 8003718:	bf00      	nop
 800371a:	bf00      	nop
 800371c:	e7fd      	b.n	800371a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800371e:	2350      	movs	r3, #80	@ 0x50
 8003720:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2b50      	cmp	r3, #80	@ 0x50
 8003726:	d00b      	beq.n	8003740 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	61bb      	str	r3, [r7, #24]
}
 800373a:	bf00      	nop
 800373c:	bf00      	nop
 800373e:	e7fd      	b.n	800373c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00d      	beq.n	8003766 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800374a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003752:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	4613      	mov	r3, r2
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	68b9      	ldr	r1, [r7, #8]
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 f805 	bl	8003770 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003768:	4618      	mov	r0, r3
 800376a:	3730      	adds	r7, #48	@ 0x30
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d103      	bne.n	800378c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	e002      	b.n	8003792 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800379e:	2101      	movs	r1, #1
 80037a0:	69b8      	ldr	r0, [r7, #24]
 80037a2:	f7ff feff 	bl	80035a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08e      	sub	sp, #56	@ 0x38
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037c6:	2300      	movs	r3, #0
 80037c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80037ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10b      	bne.n	80037ec <xQueueGenericSend+0x34>
	__asm volatile
 80037d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80037e6:	bf00      	nop
 80037e8:	bf00      	nop
 80037ea:	e7fd      	b.n	80037e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d103      	bne.n	80037fa <xQueueGenericSend+0x42>
 80037f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <xQueueGenericSend+0x46>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <xQueueGenericSend+0x48>
 80037fe:	2300      	movs	r3, #0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10b      	bne.n	800381c <xQueueGenericSend+0x64>
	__asm volatile
 8003804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003816:	bf00      	nop
 8003818:	bf00      	nop
 800381a:	e7fd      	b.n	8003818 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d103      	bne.n	800382a <xQueueGenericSend+0x72>
 8003822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <xQueueGenericSend+0x76>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <xQueueGenericSend+0x78>
 800382e:	2300      	movs	r3, #0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10b      	bne.n	800384c <xQueueGenericSend+0x94>
	__asm volatile
 8003834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	623b      	str	r3, [r7, #32]
}
 8003846:	bf00      	nop
 8003848:	bf00      	nop
 800384a:	e7fd      	b.n	8003848 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800384c:	f001 f9c8 	bl	8004be0 <xTaskGetSchedulerState>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d102      	bne.n	800385c <xQueueGenericSend+0xa4>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <xQueueGenericSend+0xa8>
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <xQueueGenericSend+0xaa>
 8003860:	2300      	movs	r3, #0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10b      	bne.n	800387e <xQueueGenericSend+0xc6>
	__asm volatile
 8003866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	61fb      	str	r3, [r7, #28]
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	e7fd      	b.n	800387a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800387e:	f001 fea5 	bl	80055cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003884:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388a:	429a      	cmp	r2, r3
 800388c:	d302      	bcc.n	8003894 <xQueueGenericSend+0xdc>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d129      	bne.n	80038e8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800389a:	f000 fa0d 	bl	8003cb8 <prvCopyDataToQueue>
 800389e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d010      	beq.n	80038ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038aa:	3324      	adds	r3, #36	@ 0x24
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 ffd3 	bl	8004858 <xTaskRemoveFromEventList>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d013      	beq.n	80038e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038b8:	4b3f      	ldr	r3, [pc, #252]	@ (80039b8 <xQueueGenericSend+0x200>)
 80038ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	e00a      	b.n	80038e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038d0:	4b39      	ldr	r3, [pc, #228]	@ (80039b8 <xQueueGenericSend+0x200>)
 80038d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038e0:	f001 fea4 	bl	800562c <vPortExitCritical>
				return pdPASS;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e063      	b.n	80039b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d103      	bne.n	80038f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038ee:	f001 fe9d 	bl	800562c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e05c      	b.n	80039b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d106      	bne.n	800390a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038fc:	f107 0314 	add.w	r3, r7, #20
 8003900:	4618      	mov	r0, r3
 8003902:	f001 f80d 	bl	8004920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003906:	2301      	movs	r3, #1
 8003908:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800390a:	f001 fe8f 	bl	800562c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800390e:	f000 fd79 	bl	8004404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003912:	f001 fe5b 	bl	80055cc <vPortEnterCritical>
 8003916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003918:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800391c:	b25b      	sxtb	r3, r3
 800391e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003922:	d103      	bne.n	800392c <xQueueGenericSend+0x174>
 8003924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800392c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003932:	b25b      	sxtb	r3, r3
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003938:	d103      	bne.n	8003942 <xQueueGenericSend+0x18a>
 800393a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003942:	f001 fe73 	bl	800562c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003946:	1d3a      	adds	r2, r7, #4
 8003948:	f107 0314 	add.w	r3, r7, #20
 800394c:	4611      	mov	r1, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fffc 	bl	800494c <xTaskCheckForTimeOut>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d124      	bne.n	80039a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800395a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800395c:	f000 faa4 	bl	8003ea8 <prvIsQueueFull>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d018      	beq.n	8003998 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003968:	3310      	adds	r3, #16
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	4611      	mov	r1, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f000 ff20 	bl	80047b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003974:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003976:	f000 fa2f 	bl	8003dd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800397a:	f000 fd51 	bl	8004420 <xTaskResumeAll>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	f47f af7c 	bne.w	800387e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003986:	4b0c      	ldr	r3, [pc, #48]	@ (80039b8 <xQueueGenericSend+0x200>)
 8003988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	e772      	b.n	800387e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003998:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800399a:	f000 fa1d 	bl	8003dd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800399e:	f000 fd3f 	bl	8004420 <xTaskResumeAll>
 80039a2:	e76c      	b.n	800387e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80039a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039a6:	f000 fa17 	bl	8003dd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039aa:	f000 fd39 	bl	8004420 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80039ae:	2300      	movs	r3, #0
		}
	}
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3738      	adds	r7, #56	@ 0x38
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	e000ed04 	.word	0xe000ed04

080039bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08e      	sub	sp, #56	@ 0x38
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80039ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10b      	bne.n	80039ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80039e6:	bf00      	nop
 80039e8:	bf00      	nop
 80039ea:	e7fd      	b.n	80039e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d103      	bne.n	80039fa <xQueueGenericSendFromISR+0x3e>
 80039f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <xQueueGenericSendFromISR+0x42>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <xQueueGenericSendFromISR+0x44>
 80039fe:	2300      	movs	r3, #0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10b      	bne.n	8003a1c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	623b      	str	r3, [r7, #32]
}
 8003a16:	bf00      	nop
 8003a18:	bf00      	nop
 8003a1a:	e7fd      	b.n	8003a18 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d103      	bne.n	8003a2a <xQueueGenericSendFromISR+0x6e>
 8003a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <xQueueGenericSendFromISR+0x72>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <xQueueGenericSendFromISR+0x74>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10b      	bne.n	8003a4c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	61fb      	str	r3, [r7, #28]
}
 8003a46:	bf00      	nop
 8003a48:	bf00      	nop
 8003a4a:	e7fd      	b.n	8003a48 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a4c:	f001 fe80 	bl	8005750 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a50:	f3ef 8211 	mrs	r2, BASEPRI
 8003a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	61ba      	str	r2, [r7, #24]
 8003a66:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a68:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d302      	bcc.n	8003a7e <xQueueGenericSendFromISR+0xc2>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d12c      	bne.n	8003ad8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	68b9      	ldr	r1, [r7, #8]
 8003a8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a8e:	f000 f913 	bl	8003cb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a92:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9a:	d112      	bne.n	8003ac2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d016      	beq.n	8003ad2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa6:	3324      	adds	r3, #36	@ 0x24
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fed5 	bl	8004858 <xTaskRemoveFromEventList>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00e      	beq.n	8003ad2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00b      	beq.n	8003ad2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	e007      	b.n	8003ad2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	b25a      	sxtb	r2, r3
 8003acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ace:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003ad6:	e001      	b.n	8003adc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8003adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ade:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ae6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3738      	adds	r7, #56	@ 0x38
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08c      	sub	sp, #48	@ 0x30
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b00:	2300      	movs	r3, #0
 8003b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10b      	bne.n	8003b26 <xQueueReceive+0x32>
	__asm volatile
 8003b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b12:	f383 8811 	msr	BASEPRI, r3
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	623b      	str	r3, [r7, #32]
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
 8003b24:	e7fd      	b.n	8003b22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d103      	bne.n	8003b34 <xQueueReceive+0x40>
 8003b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <xQueueReceive+0x44>
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <xQueueReceive+0x46>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10b      	bne.n	8003b56 <xQueueReceive+0x62>
	__asm volatile
 8003b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	61fb      	str	r3, [r7, #28]
}
 8003b50:	bf00      	nop
 8003b52:	bf00      	nop
 8003b54:	e7fd      	b.n	8003b52 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b56:	f001 f843 	bl	8004be0 <xTaskGetSchedulerState>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d102      	bne.n	8003b66 <xQueueReceive+0x72>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <xQueueReceive+0x76>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <xQueueReceive+0x78>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10b      	bne.n	8003b88 <xQueueReceive+0x94>
	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	61bb      	str	r3, [r7, #24]
}
 8003b82:	bf00      	nop
 8003b84:	bf00      	nop
 8003b86:	e7fd      	b.n	8003b84 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b88:	f001 fd20 	bl	80055cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b90:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d01f      	beq.n	8003bd8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b9c:	f000 f8f6 	bl	8003d8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba2:	1e5a      	subs	r2, r3, #1
 8003ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00f      	beq.n	8003bd0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb2:	3310      	adds	r3, #16
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 fe4f 	bl	8004858 <xTaskRemoveFromEventList>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d007      	beq.n	8003bd0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003bc0:	4b3c      	ldr	r3, [pc, #240]	@ (8003cb4 <xQueueReceive+0x1c0>)
 8003bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003bd0:	f001 fd2c 	bl	800562c <vPortExitCritical>
				return pdPASS;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e069      	b.n	8003cac <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d103      	bne.n	8003be6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bde:	f001 fd25 	bl	800562c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003be2:	2300      	movs	r3, #0
 8003be4:	e062      	b.n	8003cac <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d106      	bne.n	8003bfa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bec:	f107 0310 	add.w	r3, r7, #16
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fe95 	bl	8004920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bfa:	f001 fd17 	bl	800562c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bfe:	f000 fc01 	bl	8004404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c02:	f001 fce3 	bl	80055cc <vPortEnterCritical>
 8003c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c0c:	b25b      	sxtb	r3, r3
 8003c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c12:	d103      	bne.n	8003c1c <xQueueReceive+0x128>
 8003c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c22:	b25b      	sxtb	r3, r3
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c28:	d103      	bne.n	8003c32 <xQueueReceive+0x13e>
 8003c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c32:	f001 fcfb 	bl	800562c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c36:	1d3a      	adds	r2, r7, #4
 8003c38:	f107 0310 	add.w	r3, r7, #16
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fe84 	bl	800494c <xTaskCheckForTimeOut>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d123      	bne.n	8003c92 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c4c:	f000 f916 	bl	8003e7c <prvIsQueueEmpty>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d017      	beq.n	8003c86 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c58:	3324      	adds	r3, #36	@ 0x24
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fda8 	bl	80047b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c66:	f000 f8b7 	bl	8003dd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c6a:	f000 fbd9 	bl	8004420 <xTaskResumeAll>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d189      	bne.n	8003b88 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003c74:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb4 <xQueueReceive+0x1c0>)
 8003c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	e780      	b.n	8003b88 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c88:	f000 f8a6 	bl	8003dd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c8c:	f000 fbc8 	bl	8004420 <xTaskResumeAll>
 8003c90:	e77a      	b.n	8003b88 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c94:	f000 f8a0 	bl	8003dd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c98:	f000 fbc2 	bl	8004420 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c9e:	f000 f8ed 	bl	8003e7c <prvIsQueueEmpty>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f43f af6f 	beq.w	8003b88 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003caa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3730      	adds	r7, #48	@ 0x30
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	e000ed04 	.word	0xe000ed04

08003cb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ccc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10d      	bne.n	8003cf2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d14d      	bne.n	8003d7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 ff9a 	bl	8004c1c <xTaskPriorityDisinherit>
 8003ce8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	605a      	str	r2, [r3, #4]
 8003cf0:	e043      	b.n	8003d7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d119      	bne.n	8003d2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6898      	ldr	r0, [r3, #8]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d00:	461a      	mov	r2, r3
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	f001 ff6e 	bl	8005be4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d10:	441a      	add	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d32b      	bcc.n	8003d7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	609a      	str	r2, [r3, #8]
 8003d2a:	e026      	b.n	8003d7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	68d8      	ldr	r0, [r3, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	461a      	mov	r2, r3
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	f001 ff54 	bl	8005be4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d44:	425b      	negs	r3, r3
 8003d46:	441a      	add	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d207      	bcs.n	8003d68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	425b      	negs	r3, r3
 8003d62:	441a      	add	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d105      	bne.n	8003d7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003d82:	697b      	ldr	r3, [r7, #20]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d018      	beq.n	8003dd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	441a      	add	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d303      	bcc.n	8003dc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68d9      	ldr	r1, [r3, #12]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	461a      	mov	r2, r3
 8003dca:	6838      	ldr	r0, [r7, #0]
 8003dcc:	f001 ff0a 	bl	8005be4 <memcpy>
	}
}
 8003dd0:	bf00      	nop
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003de0:	f001 fbf4 	bl	80055cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dec:	e011      	b.n	8003e12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d012      	beq.n	8003e1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3324      	adds	r3, #36	@ 0x24
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fd2c 	bl	8004858 <xTaskRemoveFromEventList>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e06:	f000 fe05 	bl	8004a14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	dce9      	bgt.n	8003dee <prvUnlockQueue+0x16>
 8003e1a:	e000      	b.n	8003e1e <prvUnlockQueue+0x46>
					break;
 8003e1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	22ff      	movs	r2, #255	@ 0xff
 8003e22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003e26:	f001 fc01 	bl	800562c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e2a:	f001 fbcf 	bl	80055cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e36:	e011      	b.n	8003e5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d012      	beq.n	8003e66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3310      	adds	r3, #16
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fd07 	bl	8004858 <xTaskRemoveFromEventList>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e50:	f000 fde0 	bl	8004a14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e54:	7bbb      	ldrb	r3, [r7, #14]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	dce9      	bgt.n	8003e38 <prvUnlockQueue+0x60>
 8003e64:	e000      	b.n	8003e68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	22ff      	movs	r2, #255	@ 0xff
 8003e6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003e70:	f001 fbdc 	bl	800562c <vPortExitCritical>
}
 8003e74:	bf00      	nop
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e84:	f001 fba2 	bl	80055cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d102      	bne.n	8003e96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e90:	2301      	movs	r3, #1
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	e001      	b.n	8003e9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e9a:	f001 fbc7 	bl	800562c <vPortExitCritical>

	return xReturn;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003eb0:	f001 fb8c 	bl	80055cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d102      	bne.n	8003ec6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	e001      	b.n	8003eca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003eca:	f001 fbaf 	bl	800562c <vPortExitCritical>

	return xReturn;
 8003ece:	68fb      	ldr	r3, [r7, #12]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	e014      	b.n	8003f12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8003f24 <vQueueAddToRegistry+0x4c>)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10b      	bne.n	8003f0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ef4:	490b      	ldr	r1, [pc, #44]	@ (8003f24 <vQueueAddToRegistry+0x4c>)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003efe:	4a09      	ldr	r2, [pc, #36]	@ (8003f24 <vQueueAddToRegistry+0x4c>)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	4413      	add	r3, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003f0a:	e006      	b.n	8003f1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2b07      	cmp	r3, #7
 8003f16:	d9e7      	bls.n	8003ee8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr
 8003f24:	20000868 	.word	0x20000868

08003f28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003f38:	f001 fb48 	bl	80055cc <vPortEnterCritical>
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f42:	b25b      	sxtb	r3, r3
 8003f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f48:	d103      	bne.n	8003f52 <vQueueWaitForMessageRestricted+0x2a>
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f58:	b25b      	sxtb	r3, r3
 8003f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5e:	d103      	bne.n	8003f68 <vQueueWaitForMessageRestricted+0x40>
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f68:	f001 fb60 	bl	800562c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d106      	bne.n	8003f82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	3324      	adds	r3, #36	@ 0x24
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	68b9      	ldr	r1, [r7, #8]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 fc3f 	bl	8004800 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003f82:	6978      	ldr	r0, [r7, #20]
 8003f84:	f7ff ff28 	bl	8003dd8 <prvUnlockQueue>
	}
 8003f88:	bf00      	nop
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08e      	sub	sp, #56	@ 0x38
 8003f94:	af04      	add	r7, sp, #16
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10b      	bne.n	8003fbc <xTaskCreateStatic+0x2c>
	__asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	623b      	str	r3, [r7, #32]
}
 8003fb6:	bf00      	nop
 8003fb8:	bf00      	nop
 8003fba:	e7fd      	b.n	8003fb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10b      	bne.n	8003fda <xTaskCreateStatic+0x4a>
	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	61fb      	str	r3, [r7, #28]
}
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop
 8003fd8:	e7fd      	b.n	8003fd6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fda:	235c      	movs	r3, #92	@ 0x5c
 8003fdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	2b5c      	cmp	r3, #92	@ 0x5c
 8003fe2:	d00b      	beq.n	8003ffc <xTaskCreateStatic+0x6c>
	__asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	61bb      	str	r3, [r7, #24]
}
 8003ff6:	bf00      	nop
 8003ff8:	bf00      	nop
 8003ffa:	e7fd      	b.n	8003ff8 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01e      	beq.n	8004040 <xTaskCreateStatic+0xb0>
 8004002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004004:	2b00      	cmp	r3, #0
 8004006:	d01b      	beq.n	8004040 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800400a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004010:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004014:	2202      	movs	r2, #2
 8004016:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800401a:	2300      	movs	r3, #0
 800401c:	9303      	str	r3, [sp, #12]
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	9302      	str	r3, [sp, #8]
 8004022:	f107 0314 	add.w	r3, r7, #20
 8004026:	9301      	str	r3, [sp, #4]
 8004028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f850 	bl	80040d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004038:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800403a:	f000 f8d5 	bl	80041e8 <prvAddNewTaskToReadyList>
 800403e:	e001      	b.n	8004044 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004044:	697b      	ldr	r3, [r7, #20]
	}
 8004046:	4618      	mov	r0, r3
 8004048:	3728      	adds	r7, #40	@ 0x28
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800404e:	b580      	push	{r7, lr}
 8004050:	b08c      	sub	sp, #48	@ 0x30
 8004052:	af04      	add	r7, sp, #16
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	603b      	str	r3, [r7, #0]
 800405a:	4613      	mov	r3, r2
 800405c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4618      	mov	r0, r3
 8004064:	f001 fbb4 	bl	80057d0 <pvPortMalloc>
 8004068:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00e      	beq.n	800408e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004070:	205c      	movs	r0, #92	@ 0x5c
 8004072:	f001 fbad 	bl	80057d0 <pvPortMalloc>
 8004076:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	631a      	str	r2, [r3, #48]	@ 0x30
 8004084:	e005      	b.n	8004092 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004086:	6978      	ldr	r0, [r7, #20]
 8004088:	f001 fc6a 	bl	8005960 <vPortFree>
 800408c:	e001      	b.n	8004092 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d017      	beq.n	80040c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040a0:	88fa      	ldrh	r2, [r7, #6]
 80040a2:	2300      	movs	r3, #0
 80040a4:	9303      	str	r3, [sp, #12]
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	9302      	str	r3, [sp, #8]
 80040aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f80e 	bl	80040d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040bc:	69f8      	ldr	r0, [r7, #28]
 80040be:	f000 f893 	bl	80041e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040c2:	2301      	movs	r3, #1
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	e002      	b.n	80040ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040c8:	f04f 33ff 	mov.w	r3, #4294967295
 80040cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040ce:	69bb      	ldr	r3, [r7, #24]
	}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3720      	adds	r7, #32
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80040e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	461a      	mov	r2, r3
 80040f0:	21a5      	movs	r1, #165	@ 0xa5
 80040f2:	f001 fd4b 	bl	8005b8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80040f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004100:	3b01      	subs	r3, #1
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	f023 0307 	bic.w	r3, r3, #7
 800410e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00b      	beq.n	8004132 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800411a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	617b      	str	r3, [r7, #20]
}
 800412c:	bf00      	nop
 800412e:	bf00      	nop
 8004130:	e7fd      	b.n	800412e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004132:	2300      	movs	r3, #0
 8004134:	61fb      	str	r3, [r7, #28]
 8004136:	e012      	b.n	800415e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	4413      	add	r3, r2
 800413e:	7819      	ldrb	r1, [r3, #0]
 8004140:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	4413      	add	r3, r2
 8004146:	3334      	adds	r3, #52	@ 0x34
 8004148:	460a      	mov	r2, r1
 800414a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	4413      	add	r3, r2
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d006      	beq.n	8004166 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	3301      	adds	r3, #1
 800415c:	61fb      	str	r3, [r7, #28]
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	2b0f      	cmp	r3, #15
 8004162:	d9e9      	bls.n	8004138 <prvInitialiseNewTask+0x60>
 8004164:	e000      	b.n	8004168 <prvInitialiseNewTask+0x90>
		{
			break;
 8004166:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004172:	2b37      	cmp	r3, #55	@ 0x37
 8004174:	d901      	bls.n	800417a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004176:	2337      	movs	r3, #55	@ 0x37
 8004178:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800417a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800417e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004182:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004184:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004188:	2200      	movs	r2, #0
 800418a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800418c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418e:	3304      	adds	r3, #4
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff f976 	bl	8003482 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004198:	3318      	adds	r3, #24
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff f971 	bl	8003482 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80041ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041b4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b8:	2200      	movs	r2, #0
 80041ba:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	68f9      	ldr	r1, [r7, #12]
 80041c8:	69b8      	ldr	r0, [r7, #24]
 80041ca:	f001 f90b 	bl	80053e4 <pxPortInitialiseStack>
 80041ce:	4602      	mov	r2, r0
 80041d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80041d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041e0:	bf00      	nop
 80041e2:	3720      	adds	r7, #32
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041f0:	f001 f9ec 	bl	80055cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041f4:	4b2d      	ldr	r3, [pc, #180]	@ (80042ac <prvAddNewTaskToReadyList+0xc4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3301      	adds	r3, #1
 80041fa:	4a2c      	ldr	r2, [pc, #176]	@ (80042ac <prvAddNewTaskToReadyList+0xc4>)
 80041fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041fe:	4b2c      	ldr	r3, [pc, #176]	@ (80042b0 <prvAddNewTaskToReadyList+0xc8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d109      	bne.n	800421a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004206:	4a2a      	ldr	r2, [pc, #168]	@ (80042b0 <prvAddNewTaskToReadyList+0xc8>)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800420c:	4b27      	ldr	r3, [pc, #156]	@ (80042ac <prvAddNewTaskToReadyList+0xc4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d110      	bne.n	8004236 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004214:	f000 fc22 	bl	8004a5c <prvInitialiseTaskLists>
 8004218:	e00d      	b.n	8004236 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800421a:	4b26      	ldr	r3, [pc, #152]	@ (80042b4 <prvAddNewTaskToReadyList+0xcc>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d109      	bne.n	8004236 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004222:	4b23      	ldr	r3, [pc, #140]	@ (80042b0 <prvAddNewTaskToReadyList+0xc8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422c:	429a      	cmp	r2, r3
 800422e:	d802      	bhi.n	8004236 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004230:	4a1f      	ldr	r2, [pc, #124]	@ (80042b0 <prvAddNewTaskToReadyList+0xc8>)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004236:	4b20      	ldr	r3, [pc, #128]	@ (80042b8 <prvAddNewTaskToReadyList+0xd0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3301      	adds	r3, #1
 800423c:	4a1e      	ldr	r2, [pc, #120]	@ (80042b8 <prvAddNewTaskToReadyList+0xd0>)
 800423e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004240:	4b1d      	ldr	r3, [pc, #116]	@ (80042b8 <prvAddNewTaskToReadyList+0xd0>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800424c:	4b1b      	ldr	r3, [pc, #108]	@ (80042bc <prvAddNewTaskToReadyList+0xd4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	429a      	cmp	r2, r3
 8004252:	d903      	bls.n	800425c <prvAddNewTaskToReadyList+0x74>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004258:	4a18      	ldr	r2, [pc, #96]	@ (80042bc <prvAddNewTaskToReadyList+0xd4>)
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4a15      	ldr	r2, [pc, #84]	@ (80042c0 <prvAddNewTaskToReadyList+0xd8>)
 800426a:	441a      	add	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3304      	adds	r3, #4
 8004270:	4619      	mov	r1, r3
 8004272:	4610      	mov	r0, r2
 8004274:	f7ff f911 	bl	800349a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004278:	f001 f9d8 	bl	800562c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800427c:	4b0d      	ldr	r3, [pc, #52]	@ (80042b4 <prvAddNewTaskToReadyList+0xcc>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00e      	beq.n	80042a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004284:	4b0a      	ldr	r3, [pc, #40]	@ (80042b0 <prvAddNewTaskToReadyList+0xc8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428e:	429a      	cmp	r2, r3
 8004290:	d207      	bcs.n	80042a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004292:	4b0c      	ldr	r3, [pc, #48]	@ (80042c4 <prvAddNewTaskToReadyList+0xdc>)
 8004294:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042a2:	bf00      	nop
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000d7c 	.word	0x20000d7c
 80042b0:	200008a8 	.word	0x200008a8
 80042b4:	20000d88 	.word	0x20000d88
 80042b8:	20000d98 	.word	0x20000d98
 80042bc:	20000d84 	.word	0x20000d84
 80042c0:	200008ac 	.word	0x200008ac
 80042c4:	e000ed04 	.word	0xe000ed04

080042c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d018      	beq.n	800430c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042da:	4b14      	ldr	r3, [pc, #80]	@ (800432c <vTaskDelay+0x64>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00b      	beq.n	80042fa <vTaskDelay+0x32>
	__asm volatile
 80042e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	60bb      	str	r3, [r7, #8]
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop
 80042f8:	e7fd      	b.n	80042f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80042fa:	f000 f883 	bl	8004404 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042fe:	2100      	movs	r1, #0
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fcfb 	bl	8004cfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004306:	f000 f88b 	bl	8004420 <xTaskResumeAll>
 800430a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d107      	bne.n	8004322 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004312:	4b07      	ldr	r3, [pc, #28]	@ (8004330 <vTaskDelay+0x68>)
 8004314:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004322:	bf00      	nop
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20000da4 	.word	0x20000da4
 8004330:	e000ed04 	.word	0xe000ed04

08004334 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	@ 0x28
 8004338:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800433a:	2300      	movs	r3, #0
 800433c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800433e:	2300      	movs	r3, #0
 8004340:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004342:	463a      	mov	r2, r7
 8004344:	1d39      	adds	r1, r7, #4
 8004346:	f107 0308 	add.w	r3, r7, #8
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff f848 	bl	80033e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004350:	6839      	ldr	r1, [r7, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	9202      	str	r2, [sp, #8]
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	2300      	movs	r3, #0
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	2300      	movs	r3, #0
 8004360:	460a      	mov	r2, r1
 8004362:	4922      	ldr	r1, [pc, #136]	@ (80043ec <vTaskStartScheduler+0xb8>)
 8004364:	4822      	ldr	r0, [pc, #136]	@ (80043f0 <vTaskStartScheduler+0xbc>)
 8004366:	f7ff fe13 	bl	8003f90 <xTaskCreateStatic>
 800436a:	4603      	mov	r3, r0
 800436c:	4a21      	ldr	r2, [pc, #132]	@ (80043f4 <vTaskStartScheduler+0xc0>)
 800436e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004370:	4b20      	ldr	r3, [pc, #128]	@ (80043f4 <vTaskStartScheduler+0xc0>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004378:	2301      	movs	r3, #1
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	e001      	b.n	8004382 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800437e:	2300      	movs	r3, #0
 8004380:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d102      	bne.n	800438e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004388:	f000 fd0c 	bl	8004da4 <xTimerCreateTimerTask>
 800438c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d116      	bne.n	80043c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004398:	f383 8811 	msr	BASEPRI, r3
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	613b      	str	r3, [r7, #16]
}
 80043a6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80043a8:	4b13      	ldr	r3, [pc, #76]	@ (80043f8 <vTaskStartScheduler+0xc4>)
 80043aa:	f04f 32ff 	mov.w	r2, #4294967295
 80043ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043b0:	4b12      	ldr	r3, [pc, #72]	@ (80043fc <vTaskStartScheduler+0xc8>)
 80043b2:	2201      	movs	r2, #1
 80043b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80043b6:	4b12      	ldr	r3, [pc, #72]	@ (8004400 <vTaskStartScheduler+0xcc>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043bc:	f001 f894 	bl	80054e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043c0:	e00f      	b.n	80043e2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c8:	d10b      	bne.n	80043e2 <vTaskStartScheduler+0xae>
	__asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	60fb      	str	r3, [r7, #12]
}
 80043dc:	bf00      	nop
 80043de:	bf00      	nop
 80043e0:	e7fd      	b.n	80043de <vTaskStartScheduler+0xaa>
}
 80043e2:	bf00      	nop
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	08005c50 	.word	0x08005c50
 80043f0:	08004a2d 	.word	0x08004a2d
 80043f4:	20000da0 	.word	0x20000da0
 80043f8:	20000d9c 	.word	0x20000d9c
 80043fc:	20000d88 	.word	0x20000d88
 8004400:	20000d80 	.word	0x20000d80

08004404 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004408:	4b04      	ldr	r3, [pc, #16]	@ (800441c <vTaskSuspendAll+0x18>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3301      	adds	r3, #1
 800440e:	4a03      	ldr	r2, [pc, #12]	@ (800441c <vTaskSuspendAll+0x18>)
 8004410:	6013      	str	r3, [r2, #0]
}
 8004412:	bf00      	nop
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20000da4 	.word	0x20000da4

08004420 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800442a:	2300      	movs	r3, #0
 800442c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800442e:	4b42      	ldr	r3, [pc, #264]	@ (8004538 <xTaskResumeAll+0x118>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10b      	bne.n	800444e <xTaskResumeAll+0x2e>
	__asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	603b      	str	r3, [r7, #0]
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	e7fd      	b.n	800444a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800444e:	f001 f8bd 	bl	80055cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004452:	4b39      	ldr	r3, [pc, #228]	@ (8004538 <xTaskResumeAll+0x118>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3b01      	subs	r3, #1
 8004458:	4a37      	ldr	r2, [pc, #220]	@ (8004538 <xTaskResumeAll+0x118>)
 800445a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800445c:	4b36      	ldr	r3, [pc, #216]	@ (8004538 <xTaskResumeAll+0x118>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d162      	bne.n	800452a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004464:	4b35      	ldr	r3, [pc, #212]	@ (800453c <xTaskResumeAll+0x11c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d05e      	beq.n	800452a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800446c:	e02f      	b.n	80044ce <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800446e:	4b34      	ldr	r3, [pc, #208]	@ (8004540 <xTaskResumeAll+0x120>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3318      	adds	r3, #24
 800447a:	4618      	mov	r0, r3
 800447c:	f7ff f868 	bl	8003550 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	3304      	adds	r3, #4
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff f863 	bl	8003550 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800448e:	4b2d      	ldr	r3, [pc, #180]	@ (8004544 <xTaskResumeAll+0x124>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d903      	bls.n	800449e <xTaskResumeAll+0x7e>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449a:	4a2a      	ldr	r2, [pc, #168]	@ (8004544 <xTaskResumeAll+0x124>)
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4a27      	ldr	r2, [pc, #156]	@ (8004548 <xTaskResumeAll+0x128>)
 80044ac:	441a      	add	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3304      	adds	r3, #4
 80044b2:	4619      	mov	r1, r3
 80044b4:	4610      	mov	r0, r2
 80044b6:	f7fe fff0 	bl	800349a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044be:	4b23      	ldr	r3, [pc, #140]	@ (800454c <xTaskResumeAll+0x12c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d302      	bcc.n	80044ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80044c8:	4b21      	ldr	r3, [pc, #132]	@ (8004550 <xTaskResumeAll+0x130>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004540 <xTaskResumeAll+0x120>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1cb      	bne.n	800446e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044dc:	f000 fb5c 	bl	8004b98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80044e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004554 <xTaskResumeAll+0x134>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d010      	beq.n	800450e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044ec:	f000 f844 	bl	8004578 <xTaskIncrementTick>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80044f6:	4b16      	ldr	r3, [pc, #88]	@ (8004550 <xTaskResumeAll+0x130>)
 80044f8:	2201      	movs	r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3b01      	subs	r3, #1
 8004500:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1f1      	bne.n	80044ec <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004508:	4b12      	ldr	r3, [pc, #72]	@ (8004554 <xTaskResumeAll+0x134>)
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800450e:	4b10      	ldr	r3, [pc, #64]	@ (8004550 <xTaskResumeAll+0x130>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d009      	beq.n	800452a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004516:	2301      	movs	r3, #1
 8004518:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800451a:	4b0f      	ldr	r3, [pc, #60]	@ (8004558 <xTaskResumeAll+0x138>)
 800451c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800452a:	f001 f87f 	bl	800562c <vPortExitCritical>

	return xAlreadyYielded;
 800452e:	68bb      	ldr	r3, [r7, #8]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20000da4 	.word	0x20000da4
 800453c:	20000d7c 	.word	0x20000d7c
 8004540:	20000d3c 	.word	0x20000d3c
 8004544:	20000d84 	.word	0x20000d84
 8004548:	200008ac 	.word	0x200008ac
 800454c:	200008a8 	.word	0x200008a8
 8004550:	20000d90 	.word	0x20000d90
 8004554:	20000d8c 	.word	0x20000d8c
 8004558:	e000ed04 	.word	0xe000ed04

0800455c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004562:	4b04      	ldr	r3, [pc, #16]	@ (8004574 <xTaskGetTickCount+0x18>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004568:	687b      	ldr	r3, [r7, #4]
}
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr
 8004574:	20000d80 	.word	0x20000d80

08004578 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004582:	4b52      	ldr	r3, [pc, #328]	@ (80046cc <xTaskIncrementTick+0x154>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	f040 808f 	bne.w	80046aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800458c:	4b50      	ldr	r3, [pc, #320]	@ (80046d0 <xTaskIncrementTick+0x158>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3301      	adds	r3, #1
 8004592:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004594:	4a4e      	ldr	r2, [pc, #312]	@ (80046d0 <xTaskIncrementTick+0x158>)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d121      	bne.n	80045e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80045a0:	4b4c      	ldr	r3, [pc, #304]	@ (80046d4 <xTaskIncrementTick+0x15c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00b      	beq.n	80045c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80045aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	603b      	str	r3, [r7, #0]
}
 80045bc:	bf00      	nop
 80045be:	bf00      	nop
 80045c0:	e7fd      	b.n	80045be <xTaskIncrementTick+0x46>
 80045c2:	4b44      	ldr	r3, [pc, #272]	@ (80046d4 <xTaskIncrementTick+0x15c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	4b43      	ldr	r3, [pc, #268]	@ (80046d8 <xTaskIncrementTick+0x160>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a41      	ldr	r2, [pc, #260]	@ (80046d4 <xTaskIncrementTick+0x15c>)
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	4a41      	ldr	r2, [pc, #260]	@ (80046d8 <xTaskIncrementTick+0x160>)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	4b41      	ldr	r3, [pc, #260]	@ (80046dc <xTaskIncrementTick+0x164>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3301      	adds	r3, #1
 80045dc:	4a3f      	ldr	r2, [pc, #252]	@ (80046dc <xTaskIncrementTick+0x164>)
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	f000 fada 	bl	8004b98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045e4:	4b3e      	ldr	r3, [pc, #248]	@ (80046e0 <xTaskIncrementTick+0x168>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d34e      	bcc.n	800468c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045ee:	4b39      	ldr	r3, [pc, #228]	@ (80046d4 <xTaskIncrementTick+0x15c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <xTaskIncrementTick+0x84>
 80045f8:	2301      	movs	r3, #1
 80045fa:	e000      	b.n	80045fe <xTaskIncrementTick+0x86>
 80045fc:	2300      	movs	r3, #0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d004      	beq.n	800460c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004602:	4b37      	ldr	r3, [pc, #220]	@ (80046e0 <xTaskIncrementTick+0x168>)
 8004604:	f04f 32ff 	mov.w	r2, #4294967295
 8004608:	601a      	str	r2, [r3, #0]
					break;
 800460a:	e03f      	b.n	800468c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800460c:	4b31      	ldr	r3, [pc, #196]	@ (80046d4 <xTaskIncrementTick+0x15c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	429a      	cmp	r2, r3
 8004622:	d203      	bcs.n	800462c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004624:	4a2e      	ldr	r2, [pc, #184]	@ (80046e0 <xTaskIncrementTick+0x168>)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6013      	str	r3, [r2, #0]
						break;
 800462a:	e02f      	b.n	800468c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	3304      	adds	r3, #4
 8004630:	4618      	mov	r0, r3
 8004632:	f7fe ff8d 	bl	8003550 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463a:	2b00      	cmp	r3, #0
 800463c:	d004      	beq.n	8004648 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	3318      	adds	r3, #24
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe ff84 	bl	8003550 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800464c:	4b25      	ldr	r3, [pc, #148]	@ (80046e4 <xTaskIncrementTick+0x16c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d903      	bls.n	800465c <xTaskIncrementTick+0xe4>
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004658:	4a22      	ldr	r2, [pc, #136]	@ (80046e4 <xTaskIncrementTick+0x16c>)
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4a1f      	ldr	r2, [pc, #124]	@ (80046e8 <xTaskIncrementTick+0x170>)
 800466a:	441a      	add	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	3304      	adds	r3, #4
 8004670:	4619      	mov	r1, r3
 8004672:	4610      	mov	r0, r2
 8004674:	f7fe ff11 	bl	800349a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800467c:	4b1b      	ldr	r3, [pc, #108]	@ (80046ec <xTaskIncrementTick+0x174>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004682:	429a      	cmp	r2, r3
 8004684:	d3b3      	bcc.n	80045ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004686:	2301      	movs	r3, #1
 8004688:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800468a:	e7b0      	b.n	80045ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800468c:	4b17      	ldr	r3, [pc, #92]	@ (80046ec <xTaskIncrementTick+0x174>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004692:	4915      	ldr	r1, [pc, #84]	@ (80046e8 <xTaskIncrementTick+0x170>)
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d907      	bls.n	80046b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80046a4:	2301      	movs	r3, #1
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	e004      	b.n	80046b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80046aa:	4b11      	ldr	r3, [pc, #68]	@ (80046f0 <xTaskIncrementTick+0x178>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3301      	adds	r3, #1
 80046b0:	4a0f      	ldr	r2, [pc, #60]	@ (80046f0 <xTaskIncrementTick+0x178>)
 80046b2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80046b4:	4b0f      	ldr	r3, [pc, #60]	@ (80046f4 <xTaskIncrementTick+0x17c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80046bc:	2301      	movs	r3, #1
 80046be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80046c0:	697b      	ldr	r3, [r7, #20]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20000da4 	.word	0x20000da4
 80046d0:	20000d80 	.word	0x20000d80
 80046d4:	20000d34 	.word	0x20000d34
 80046d8:	20000d38 	.word	0x20000d38
 80046dc:	20000d94 	.word	0x20000d94
 80046e0:	20000d9c 	.word	0x20000d9c
 80046e4:	20000d84 	.word	0x20000d84
 80046e8:	200008ac 	.word	0x200008ac
 80046ec:	200008a8 	.word	0x200008a8
 80046f0:	20000d8c 	.word	0x20000d8c
 80046f4:	20000d90 	.word	0x20000d90

080046f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046fe:	4b28      	ldr	r3, [pc, #160]	@ (80047a0 <vTaskSwitchContext+0xa8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004706:	4b27      	ldr	r3, [pc, #156]	@ (80047a4 <vTaskSwitchContext+0xac>)
 8004708:	2201      	movs	r2, #1
 800470a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800470c:	e042      	b.n	8004794 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800470e:	4b25      	ldr	r3, [pc, #148]	@ (80047a4 <vTaskSwitchContext+0xac>)
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004714:	4b24      	ldr	r3, [pc, #144]	@ (80047a8 <vTaskSwitchContext+0xb0>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	e011      	b.n	8004740 <vTaskSwitchContext+0x48>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10b      	bne.n	800473a <vTaskSwitchContext+0x42>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	607b      	str	r3, [r7, #4]
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	e7fd      	b.n	8004736 <vTaskSwitchContext+0x3e>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3b01      	subs	r3, #1
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	491a      	ldr	r1, [pc, #104]	@ (80047ac <vTaskSwitchContext+0xb4>)
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0e3      	beq.n	800471c <vTaskSwitchContext+0x24>
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4613      	mov	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4a13      	ldr	r2, [pc, #76]	@ (80047ac <vTaskSwitchContext+0xb4>)
 8004760:	4413      	add	r3, r2
 8004762:	60bb      	str	r3, [r7, #8]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	605a      	str	r2, [r3, #4]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	3308      	adds	r3, #8
 8004776:	429a      	cmp	r2, r3
 8004778:	d104      	bne.n	8004784 <vTaskSwitchContext+0x8c>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	605a      	str	r2, [r3, #4]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	4a09      	ldr	r2, [pc, #36]	@ (80047b0 <vTaskSwitchContext+0xb8>)
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	4a06      	ldr	r2, [pc, #24]	@ (80047a8 <vTaskSwitchContext+0xb0>)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6013      	str	r3, [r2, #0]
}
 8004794:	bf00      	nop
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20000da4 	.word	0x20000da4
 80047a4:	20000d90 	.word	0x20000d90
 80047a8:	20000d84 	.word	0x20000d84
 80047ac:	200008ac 	.word	0x200008ac
 80047b0:	200008a8 	.word	0x200008a8

080047b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10b      	bne.n	80047dc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	60fb      	str	r3, [r7, #12]
}
 80047d6:	bf00      	nop
 80047d8:	bf00      	nop
 80047da:	e7fd      	b.n	80047d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047dc:	4b07      	ldr	r3, [pc, #28]	@ (80047fc <vTaskPlaceOnEventList+0x48>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3318      	adds	r3, #24
 80047e2:	4619      	mov	r1, r3
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fe fe7b 	bl	80034e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047ea:	2101      	movs	r1, #1
 80047ec:	6838      	ldr	r0, [r7, #0]
 80047ee:	f000 fa85 	bl	8004cfc <prvAddCurrentTaskToDelayedList>
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	200008a8 	.word	0x200008a8

08004800 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10b      	bne.n	800482a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	617b      	str	r3, [r7, #20]
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop
 8004828:	e7fd      	b.n	8004826 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800482a:	4b0a      	ldr	r3, [pc, #40]	@ (8004854 <vTaskPlaceOnEventListRestricted+0x54>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3318      	adds	r3, #24
 8004830:	4619      	mov	r1, r3
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f7fe fe31 	bl	800349a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d002      	beq.n	8004844 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800483e:	f04f 33ff 	mov.w	r3, #4294967295
 8004842:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	68b8      	ldr	r0, [r7, #8]
 8004848:	f000 fa58 	bl	8004cfc <prvAddCurrentTaskToDelayedList>
	}
 800484c:	bf00      	nop
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	200008a8 	.word	0x200008a8

08004858 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10b      	bne.n	8004886 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	60fb      	str	r3, [r7, #12]
}
 8004880:	bf00      	nop
 8004882:	bf00      	nop
 8004884:	e7fd      	b.n	8004882 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	3318      	adds	r3, #24
 800488a:	4618      	mov	r0, r3
 800488c:	f7fe fe60 	bl	8003550 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004890:	4b1d      	ldr	r3, [pc, #116]	@ (8004908 <xTaskRemoveFromEventList+0xb0>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d11d      	bne.n	80048d4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	3304      	adds	r3, #4
 800489c:	4618      	mov	r0, r3
 800489e:	f7fe fe57 	bl	8003550 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048a6:	4b19      	ldr	r3, [pc, #100]	@ (800490c <xTaskRemoveFromEventList+0xb4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d903      	bls.n	80048b6 <xTaskRemoveFromEventList+0x5e>
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b2:	4a16      	ldr	r2, [pc, #88]	@ (800490c <xTaskRemoveFromEventList+0xb4>)
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4a13      	ldr	r2, [pc, #76]	@ (8004910 <xTaskRemoveFromEventList+0xb8>)
 80048c4:	441a      	add	r2, r3
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	3304      	adds	r3, #4
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f7fe fde4 	bl	800349a <vListInsertEnd>
 80048d2:	e005      	b.n	80048e0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	3318      	adds	r3, #24
 80048d8:	4619      	mov	r1, r3
 80048da:	480e      	ldr	r0, [pc, #56]	@ (8004914 <xTaskRemoveFromEventList+0xbc>)
 80048dc:	f7fe fddd 	bl	800349a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004918 <xTaskRemoveFromEventList+0xc0>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d905      	bls.n	80048fa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80048ee:	2301      	movs	r3, #1
 80048f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048f2:	4b0a      	ldr	r3, [pc, #40]	@ (800491c <xTaskRemoveFromEventList+0xc4>)
 80048f4:	2201      	movs	r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	e001      	b.n	80048fe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80048fe:	697b      	ldr	r3, [r7, #20]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20000da4 	.word	0x20000da4
 800490c:	20000d84 	.word	0x20000d84
 8004910:	200008ac 	.word	0x200008ac
 8004914:	20000d3c 	.word	0x20000d3c
 8004918:	200008a8 	.word	0x200008a8
 800491c:	20000d90 	.word	0x20000d90

08004920 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004928:	4b06      	ldr	r3, [pc, #24]	@ (8004944 <vTaskInternalSetTimeOutState+0x24>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004930:	4b05      	ldr	r3, [pc, #20]	@ (8004948 <vTaskInternalSetTimeOutState+0x28>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	605a      	str	r2, [r3, #4]
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20000d94 	.word	0x20000d94
 8004948:	20000d80 	.word	0x20000d80

0800494c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10b      	bne.n	8004974 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800495c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	613b      	str	r3, [r7, #16]
}
 800496e:	bf00      	nop
 8004970:	bf00      	nop
 8004972:	e7fd      	b.n	8004970 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10b      	bne.n	8004992 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	60fb      	str	r3, [r7, #12]
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	e7fd      	b.n	800498e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004992:	f000 fe1b 	bl	80055cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004996:	4b1d      	ldr	r3, [pc, #116]	@ (8004a0c <xTaskCheckForTimeOut+0xc0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ae:	d102      	bne.n	80049b6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61fb      	str	r3, [r7, #28]
 80049b4:	e023      	b.n	80049fe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	4b15      	ldr	r3, [pc, #84]	@ (8004a10 <xTaskCheckForTimeOut+0xc4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d007      	beq.n	80049d2 <xTaskCheckForTimeOut+0x86>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d302      	bcc.n	80049d2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049cc:	2301      	movs	r3, #1
 80049ce:	61fb      	str	r3, [r7, #28]
 80049d0:	e015      	b.n	80049fe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d20b      	bcs.n	80049f4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	1ad2      	subs	r2, r2, r3
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff ff99 	bl	8004920 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80049ee:	2300      	movs	r3, #0
 80049f0:	61fb      	str	r3, [r7, #28]
 80049f2:	e004      	b.n	80049fe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80049fa:	2301      	movs	r3, #1
 80049fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80049fe:	f000 fe15 	bl	800562c <vPortExitCritical>

	return xReturn;
 8004a02:	69fb      	ldr	r3, [r7, #28]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20000d80 	.word	0x20000d80
 8004a10:	20000d94 	.word	0x20000d94

08004a14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a18:	4b03      	ldr	r3, [pc, #12]	@ (8004a28 <vTaskMissedYield+0x14>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
}
 8004a1e:	bf00      	nop
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc80      	pop	{r7}
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	20000d90 	.word	0x20000d90

08004a2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a34:	f000 f852 	bl	8004adc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a38:	4b06      	ldr	r3, [pc, #24]	@ (8004a54 <prvIdleTask+0x28>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d9f9      	bls.n	8004a34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a40:	4b05      	ldr	r3, [pc, #20]	@ (8004a58 <prvIdleTask+0x2c>)
 8004a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a50:	e7f0      	b.n	8004a34 <prvIdleTask+0x8>
 8004a52:	bf00      	nop
 8004a54:	200008ac 	.word	0x200008ac
 8004a58:	e000ed04 	.word	0xe000ed04

08004a5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a62:	2300      	movs	r3, #0
 8004a64:	607b      	str	r3, [r7, #4]
 8004a66:	e00c      	b.n	8004a82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4a12      	ldr	r2, [pc, #72]	@ (8004abc <prvInitialiseTaskLists+0x60>)
 8004a74:	4413      	add	r3, r2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe fce4 	bl	8003444 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	607b      	str	r3, [r7, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b37      	cmp	r3, #55	@ 0x37
 8004a86:	d9ef      	bls.n	8004a68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a88:	480d      	ldr	r0, [pc, #52]	@ (8004ac0 <prvInitialiseTaskLists+0x64>)
 8004a8a:	f7fe fcdb 	bl	8003444 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a8e:	480d      	ldr	r0, [pc, #52]	@ (8004ac4 <prvInitialiseTaskLists+0x68>)
 8004a90:	f7fe fcd8 	bl	8003444 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a94:	480c      	ldr	r0, [pc, #48]	@ (8004ac8 <prvInitialiseTaskLists+0x6c>)
 8004a96:	f7fe fcd5 	bl	8003444 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a9a:	480c      	ldr	r0, [pc, #48]	@ (8004acc <prvInitialiseTaskLists+0x70>)
 8004a9c:	f7fe fcd2 	bl	8003444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004aa0:	480b      	ldr	r0, [pc, #44]	@ (8004ad0 <prvInitialiseTaskLists+0x74>)
 8004aa2:	f7fe fccf 	bl	8003444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad4 <prvInitialiseTaskLists+0x78>)
 8004aa8:	4a05      	ldr	r2, [pc, #20]	@ (8004ac0 <prvInitialiseTaskLists+0x64>)
 8004aaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004aac:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad8 <prvInitialiseTaskLists+0x7c>)
 8004aae:	4a05      	ldr	r2, [pc, #20]	@ (8004ac4 <prvInitialiseTaskLists+0x68>)
 8004ab0:	601a      	str	r2, [r3, #0]
}
 8004ab2:	bf00      	nop
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	200008ac 	.word	0x200008ac
 8004ac0:	20000d0c 	.word	0x20000d0c
 8004ac4:	20000d20 	.word	0x20000d20
 8004ac8:	20000d3c 	.word	0x20000d3c
 8004acc:	20000d50 	.word	0x20000d50
 8004ad0:	20000d68 	.word	0x20000d68
 8004ad4:	20000d34 	.word	0x20000d34
 8004ad8:	20000d38 	.word	0x20000d38

08004adc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ae2:	e019      	b.n	8004b18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ae4:	f000 fd72 	bl	80055cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004ae8:	4b10      	ldr	r3, [pc, #64]	@ (8004b2c <prvCheckTasksWaitingTermination+0x50>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3304      	adds	r3, #4
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fe fd2b 	bl	8003550 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004afa:	4b0d      	ldr	r3, [pc, #52]	@ (8004b30 <prvCheckTasksWaitingTermination+0x54>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	4a0b      	ldr	r2, [pc, #44]	@ (8004b30 <prvCheckTasksWaitingTermination+0x54>)
 8004b02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b04:	4b0b      	ldr	r3, [pc, #44]	@ (8004b34 <prvCheckTasksWaitingTermination+0x58>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8004b34 <prvCheckTasksWaitingTermination+0x58>)
 8004b0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b0e:	f000 fd8d 	bl	800562c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f810 	bl	8004b38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b18:	4b06      	ldr	r3, [pc, #24]	@ (8004b34 <prvCheckTasksWaitingTermination+0x58>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e1      	bne.n	8004ae4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b20:	bf00      	nop
 8004b22:	bf00      	nop
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20000d50 	.word	0x20000d50
 8004b30:	20000d7c 	.word	0x20000d7c
 8004b34:	20000d64 	.word	0x20000d64

08004b38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d108      	bne.n	8004b5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 ff06 	bl	8005960 <vPortFree>
				vPortFree( pxTCB );
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 ff03 	bl	8005960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b5a:	e019      	b.n	8004b90 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d103      	bne.n	8004b6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fefa 	bl	8005960 <vPortFree>
	}
 8004b6c:	e010      	b.n	8004b90 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d00b      	beq.n	8004b90 <prvDeleteTCB+0x58>
	__asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	60fb      	str	r3, [r7, #12]
}
 8004b8a:	bf00      	nop
 8004b8c:	bf00      	nop
 8004b8e:	e7fd      	b.n	8004b8c <prvDeleteTCB+0x54>
	}
 8004b90:	bf00      	nop
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004bd8 <prvResetNextTaskUnblockTime+0x40>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <prvResetNextTaskUnblockTime+0x14>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <prvResetNextTaskUnblockTime+0x16>
 8004bac:	2300      	movs	r3, #0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d004      	beq.n	8004bbc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bdc <prvResetNextTaskUnblockTime+0x44>)
 8004bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bba:	e008      	b.n	8004bce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004bbc:	4b06      	ldr	r3, [pc, #24]	@ (8004bd8 <prvResetNextTaskUnblockTime+0x40>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	4a04      	ldr	r2, [pc, #16]	@ (8004bdc <prvResetNextTaskUnblockTime+0x44>)
 8004bcc:	6013      	str	r3, [r2, #0]
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bc80      	pop	{r7}
 8004bd6:	4770      	bx	lr
 8004bd8:	20000d34 	.word	0x20000d34
 8004bdc:	20000d9c 	.word	0x20000d9c

08004be0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004be6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c14 <xTaskGetSchedulerState+0x34>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d102      	bne.n	8004bf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	607b      	str	r3, [r7, #4]
 8004bf2:	e008      	b.n	8004c06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bf4:	4b08      	ldr	r3, [pc, #32]	@ (8004c18 <xTaskGetSchedulerState+0x38>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d102      	bne.n	8004c02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	607b      	str	r3, [r7, #4]
 8004c00:	e001      	b.n	8004c06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c02:	2300      	movs	r3, #0
 8004c04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c06:	687b      	ldr	r3, [r7, #4]
	}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	20000d88 	.word	0x20000d88
 8004c18:	20000da4 	.word	0x20000da4

08004c1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d058      	beq.n	8004ce4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c32:	4b2f      	ldr	r3, [pc, #188]	@ (8004cf0 <xTaskPriorityDisinherit+0xd4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d00b      	beq.n	8004c54 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	60fb      	str	r3, [r7, #12]
}
 8004c4e:	bf00      	nop
 8004c50:	bf00      	nop
 8004c52:	e7fd      	b.n	8004c50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10b      	bne.n	8004c74 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	60bb      	str	r3, [r7, #8]
}
 8004c6e:	bf00      	nop
 8004c70:	bf00      	nop
 8004c72:	e7fd      	b.n	8004c70 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c78:	1e5a      	subs	r2, r3, #1
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d02c      	beq.n	8004ce4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d128      	bne.n	8004ce4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	3304      	adds	r3, #4
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fe fc5a 	bl	8003550 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf4 <xTaskPriorityDisinherit+0xd8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d903      	bls.n	8004cc4 <xTaskPriorityDisinherit+0xa8>
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8004cf4 <xTaskPriorityDisinherit+0xd8>)
 8004cc2:	6013      	str	r3, [r2, #0]
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4a09      	ldr	r2, [pc, #36]	@ (8004cf8 <xTaskPriorityDisinherit+0xdc>)
 8004cd2:	441a      	add	r2, r3
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4610      	mov	r0, r2
 8004cdc:	f7fe fbdd 	bl	800349a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ce4:	697b      	ldr	r3, [r7, #20]
	}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	200008a8 	.word	0x200008a8
 8004cf4:	20000d84 	.word	0x20000d84
 8004cf8:	200008ac 	.word	0x200008ac

08004cfc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d06:	4b21      	ldr	r3, [pc, #132]	@ (8004d8c <prvAddCurrentTaskToDelayedList+0x90>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d0c:	4b20      	ldr	r3, [pc, #128]	@ (8004d90 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3304      	adds	r3, #4
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fe fc1c 	bl	8003550 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1e:	d10a      	bne.n	8004d36 <prvAddCurrentTaskToDelayedList+0x3a>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d007      	beq.n	8004d36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d26:	4b1a      	ldr	r3, [pc, #104]	@ (8004d90 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4819      	ldr	r0, [pc, #100]	@ (8004d94 <prvAddCurrentTaskToDelayedList+0x98>)
 8004d30:	f7fe fbb3 	bl	800349a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d34:	e026      	b.n	8004d84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d3e:	4b14      	ldr	r3, [pc, #80]	@ (8004d90 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d209      	bcs.n	8004d62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d4e:	4b12      	ldr	r3, [pc, #72]	@ (8004d98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4b0f      	ldr	r3, [pc, #60]	@ (8004d90 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3304      	adds	r3, #4
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	f7fe fbc0 	bl	80034e0 <vListInsert>
}
 8004d60:	e010      	b.n	8004d84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d62:	4b0e      	ldr	r3, [pc, #56]	@ (8004d9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4b0a      	ldr	r3, [pc, #40]	@ (8004d90 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4610      	mov	r0, r2
 8004d70:	f7fe fbb6 	bl	80034e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d74:	4b0a      	ldr	r3, [pc, #40]	@ (8004da0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d202      	bcs.n	8004d84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d7e:	4a08      	ldr	r2, [pc, #32]	@ (8004da0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	6013      	str	r3, [r2, #0]
}
 8004d84:	bf00      	nop
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	20000d80 	.word	0x20000d80
 8004d90:	200008a8 	.word	0x200008a8
 8004d94:	20000d68 	.word	0x20000d68
 8004d98:	20000d38 	.word	0x20000d38
 8004d9c:	20000d34 	.word	0x20000d34
 8004da0:	20000d9c 	.word	0x20000d9c

08004da4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08a      	sub	sp, #40	@ 0x28
 8004da8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004dae:	f000 fad9 	bl	8005364 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004db2:	4b1d      	ldr	r3, [pc, #116]	@ (8004e28 <xTimerCreateTimerTask+0x84>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d021      	beq.n	8004dfe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004dc2:	1d3a      	adds	r2, r7, #4
 8004dc4:	f107 0108 	add.w	r1, r7, #8
 8004dc8:	f107 030c 	add.w	r3, r7, #12
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fe fb1f 	bl	8003410 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	9202      	str	r2, [sp, #8]
 8004dda:	9301      	str	r3, [sp, #4]
 8004ddc:	2302      	movs	r3, #2
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	2300      	movs	r3, #0
 8004de2:	460a      	mov	r2, r1
 8004de4:	4911      	ldr	r1, [pc, #68]	@ (8004e2c <xTimerCreateTimerTask+0x88>)
 8004de6:	4812      	ldr	r0, [pc, #72]	@ (8004e30 <xTimerCreateTimerTask+0x8c>)
 8004de8:	f7ff f8d2 	bl	8003f90 <xTaskCreateStatic>
 8004dec:	4603      	mov	r3, r0
 8004dee:	4a11      	ldr	r2, [pc, #68]	@ (8004e34 <xTimerCreateTimerTask+0x90>)
 8004df0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004df2:	4b10      	ldr	r3, [pc, #64]	@ (8004e34 <xTimerCreateTimerTask+0x90>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10b      	bne.n	8004e1c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	613b      	str	r3, [r7, #16]
}
 8004e16:	bf00      	nop
 8004e18:	bf00      	nop
 8004e1a:	e7fd      	b.n	8004e18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004e1c:	697b      	ldr	r3, [r7, #20]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000dd8 	.word	0x20000dd8
 8004e2c:	08005c58 	.word	0x08005c58
 8004e30:	08004f59 	.word	0x08004f59
 8004e34:	20000ddc 	.word	0x20000ddc

08004e38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08a      	sub	sp, #40	@ 0x28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10b      	bne.n	8004e68 <xTimerGenericCommand+0x30>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	623b      	str	r3, [r7, #32]
}
 8004e62:	bf00      	nop
 8004e64:	bf00      	nop
 8004e66:	e7fd      	b.n	8004e64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004e68:	4b19      	ldr	r3, [pc, #100]	@ (8004ed0 <xTimerGenericCommand+0x98>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d02a      	beq.n	8004ec6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2b05      	cmp	r3, #5
 8004e80:	dc18      	bgt.n	8004eb4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e82:	f7ff fead 	bl	8004be0 <xTaskGetSchedulerState>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d109      	bne.n	8004ea0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e8c:	4b10      	ldr	r3, [pc, #64]	@ (8004ed0 <xTimerGenericCommand+0x98>)
 8004e8e:	6818      	ldr	r0, [r3, #0]
 8004e90:	f107 0110 	add.w	r1, r7, #16
 8004e94:	2300      	movs	r3, #0
 8004e96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e98:	f7fe fc8e 	bl	80037b8 <xQueueGenericSend>
 8004e9c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004e9e:	e012      	b.n	8004ec6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed0 <xTimerGenericCommand+0x98>)
 8004ea2:	6818      	ldr	r0, [r3, #0]
 8004ea4:	f107 0110 	add.w	r1, r7, #16
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f7fe fc84 	bl	80037b8 <xQueueGenericSend>
 8004eb0:	6278      	str	r0, [r7, #36]	@ 0x24
 8004eb2:	e008      	b.n	8004ec6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004eb4:	4b06      	ldr	r3, [pc, #24]	@ (8004ed0 <xTimerGenericCommand+0x98>)
 8004eb6:	6818      	ldr	r0, [r3, #0]
 8004eb8:	f107 0110 	add.w	r1, r7, #16
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	f7fe fd7c 	bl	80039bc <xQueueGenericSendFromISR>
 8004ec4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3728      	adds	r7, #40	@ 0x28
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	20000dd8 	.word	0x20000dd8

08004ed4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ede:	4b1d      	ldr	r3, [pc, #116]	@ (8004f54 <prvProcessExpiredTimer+0x80>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	3304      	adds	r3, #4
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fe fb2f 	bl	8003550 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d123      	bne.n	8004f42 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	699a      	ldr	r2, [r3, #24]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	18d1      	adds	r1, r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	6978      	ldr	r0, [r7, #20]
 8004f08:	f000 f8cc 	bl	80050a4 <prvInsertTimerInActiveList>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d017      	beq.n	8004f42 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f12:	2300      	movs	r3, #0
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	2300      	movs	r3, #0
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	6978      	ldr	r0, [r7, #20]
 8004f1e:	f7ff ff8b 	bl	8004e38 <xTimerGenericCommand>
 8004f22:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10b      	bne.n	8004f42 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	60fb      	str	r3, [r7, #12]
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	e7fd      	b.n	8004f3e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f46:	6978      	ldr	r0, [r7, #20]
 8004f48:	4798      	blx	r3
}
 8004f4a:	bf00      	nop
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20000dd0 	.word	0x20000dd0

08004f58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f60:	f107 0308 	add.w	r3, r7, #8
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 f859 	bl	800501c <prvGetNextExpireTime>
 8004f6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 f805 	bl	8004f80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f76:	f000 f8d7 	bl	8005128 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f7a:	bf00      	nop
 8004f7c:	e7f0      	b.n	8004f60 <prvTimerTask+0x8>
	...

08004f80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f8a:	f7ff fa3b 	bl	8004404 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f8e:	f107 0308 	add.w	r3, r7, #8
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 f866 	bl	8005064 <prvSampleTimeNow>
 8004f98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d130      	bne.n	8005002 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10a      	bne.n	8004fbc <prvProcessTimerOrBlockTask+0x3c>
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d806      	bhi.n	8004fbc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004fae:	f7ff fa37 	bl	8004420 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004fb2:	68f9      	ldr	r1, [r7, #12]
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff ff8d 	bl	8004ed4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004fba:	e024      	b.n	8005006 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d008      	beq.n	8004fd4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004fc2:	4b13      	ldr	r3, [pc, #76]	@ (8005010 <prvProcessTimerOrBlockTask+0x90>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	bf0c      	ite	eq
 8004fcc:	2301      	moveq	r3, #1
 8004fce:	2300      	movne	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8005014 <prvProcessTimerOrBlockTask+0x94>)
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	f7fe ffa1 	bl	8003f28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004fe6:	f7ff fa1b 	bl	8004420 <xTaskResumeAll>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10a      	bne.n	8005006 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004ff0:	4b09      	ldr	r3, [pc, #36]	@ (8005018 <prvProcessTimerOrBlockTask+0x98>)
 8004ff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	f3bf 8f6f 	isb	sy
}
 8005000:	e001      	b.n	8005006 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005002:	f7ff fa0d 	bl	8004420 <xTaskResumeAll>
}
 8005006:	bf00      	nop
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000dd4 	.word	0x20000dd4
 8005014:	20000dd8 	.word	0x20000dd8
 8005018:	e000ed04 	.word	0xe000ed04

0800501c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005024:	4b0e      	ldr	r3, [pc, #56]	@ (8005060 <prvGetNextExpireTime+0x44>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	bf0c      	ite	eq
 800502e:	2301      	moveq	r3, #1
 8005030:	2300      	movne	r3, #0
 8005032:	b2db      	uxtb	r3, r3
 8005034:	461a      	mov	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d105      	bne.n	800504e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005042:	4b07      	ldr	r3, [pc, #28]	@ (8005060 <prvGetNextExpireTime+0x44>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	e001      	b.n	8005052 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005052:	68fb      	ldr	r3, [r7, #12]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	bc80      	pop	{r7}
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	20000dd0 	.word	0x20000dd0

08005064 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800506c:	f7ff fa76 	bl	800455c <xTaskGetTickCount>
 8005070:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005072:	4b0b      	ldr	r3, [pc, #44]	@ (80050a0 <prvSampleTimeNow+0x3c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	429a      	cmp	r2, r3
 800507a:	d205      	bcs.n	8005088 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800507c:	f000 f910 	bl	80052a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	e002      	b.n	800508e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800508e:	4a04      	ldr	r2, [pc, #16]	@ (80050a0 <prvSampleTimeNow+0x3c>)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005094:	68fb      	ldr	r3, [r7, #12]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20000de0 	.word	0x20000de0

080050a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80050b2:	2300      	movs	r3, #0
 80050b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d812      	bhi.n	80050f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	1ad2      	subs	r2, r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d302      	bcc.n	80050de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80050d8:	2301      	movs	r3, #1
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	e01b      	b.n	8005116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80050de:	4b10      	ldr	r3, [pc, #64]	@ (8005120 <prvInsertTimerInActiveList+0x7c>)
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	3304      	adds	r3, #4
 80050e6:	4619      	mov	r1, r3
 80050e8:	4610      	mov	r0, r2
 80050ea:	f7fe f9f9 	bl	80034e0 <vListInsert>
 80050ee:	e012      	b.n	8005116 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d206      	bcs.n	8005106 <prvInsertTimerInActiveList+0x62>
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d302      	bcc.n	8005106 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005100:	2301      	movs	r3, #1
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	e007      	b.n	8005116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005106:	4b07      	ldr	r3, [pc, #28]	@ (8005124 <prvInsertTimerInActiveList+0x80>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3304      	adds	r3, #4
 800510e:	4619      	mov	r1, r3
 8005110:	4610      	mov	r0, r2
 8005112:	f7fe f9e5 	bl	80034e0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005116:	697b      	ldr	r3, [r7, #20]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	20000dd4 	.word	0x20000dd4
 8005124:	20000dd0 	.word	0x20000dd0

08005128 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08e      	sub	sp, #56	@ 0x38
 800512c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800512e:	e0a5      	b.n	800527c <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	da19      	bge.n	800516a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005136:	1d3b      	adds	r3, r7, #4
 8005138:	3304      	adds	r3, #4
 800513a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800513c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10b      	bne.n	800515a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	61fb      	str	r3, [r7, #28]
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop
 8005158:	e7fd      	b.n	8005156 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800515a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005160:	6850      	ldr	r0, [r2, #4]
 8005162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005164:	6892      	ldr	r2, [r2, #8]
 8005166:	4611      	mov	r1, r2
 8005168:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	f2c0 8085 	blt.w	800527c <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d004      	beq.n	8005188 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800517e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005180:	3304      	adds	r3, #4
 8005182:	4618      	mov	r0, r3
 8005184:	f7fe f9e4 	bl	8003550 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005188:	463b      	mov	r3, r7
 800518a:	4618      	mov	r0, r3
 800518c:	f7ff ff6a 	bl	8005064 <prvSampleTimeNow>
 8005190:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b09      	cmp	r3, #9
 8005196:	d86c      	bhi.n	8005272 <prvProcessReceivedCommands+0x14a>
 8005198:	a201      	add	r2, pc, #4	@ (adr r2, 80051a0 <prvProcessReceivedCommands+0x78>)
 800519a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519e:	bf00      	nop
 80051a0:	080051c9 	.word	0x080051c9
 80051a4:	080051c9 	.word	0x080051c9
 80051a8:	080051c9 	.word	0x080051c9
 80051ac:	08005273 	.word	0x08005273
 80051b0:	08005227 	.word	0x08005227
 80051b4:	08005261 	.word	0x08005261
 80051b8:	080051c9 	.word	0x080051c9
 80051bc:	080051c9 	.word	0x080051c9
 80051c0:	08005273 	.word	0x08005273
 80051c4:	08005227 	.word	0x08005227
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	18d1      	adds	r1, r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051d6:	f7ff ff65 	bl	80050a4 <prvInsertTimerInActiveList>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d04a      	beq.n	8005276 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051e6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80051e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d142      	bne.n	8005276 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	441a      	add	r2, r3
 80051f8:	2300      	movs	r3, #0
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	2300      	movs	r3, #0
 80051fe:	2100      	movs	r1, #0
 8005200:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005202:	f7ff fe19 	bl	8004e38 <xTimerGenericCommand>
 8005206:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d133      	bne.n	8005276 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	61bb      	str	r3, [r7, #24]
}
 8005220:	bf00      	nop
 8005222:	bf00      	nop
 8005224:	e7fd      	b.n	8005222 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800522c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10b      	bne.n	800524c <prvProcessReceivedCommands+0x124>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	617b      	str	r3, [r7, #20]
}
 8005246:	bf00      	nop
 8005248:	bf00      	nop
 800524a:	e7fd      	b.n	8005248 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800524c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524e:	699a      	ldr	r2, [r3, #24]
 8005250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005252:	18d1      	adds	r1, r2, r3
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800525a:	f7ff ff23 	bl	80050a4 <prvInsertTimerInActiveList>
					break;
 800525e:	e00d      	b.n	800527c <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005262:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005266:	2b00      	cmp	r3, #0
 8005268:	d107      	bne.n	800527a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800526a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800526c:	f000 fb78 	bl	8005960 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005270:	e003      	b.n	800527a <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8005272:	bf00      	nop
 8005274:	e002      	b.n	800527c <prvProcessReceivedCommands+0x154>
					break;
 8005276:	bf00      	nop
 8005278:	e000      	b.n	800527c <prvProcessReceivedCommands+0x154>
					break;
 800527a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800527c:	4b07      	ldr	r3, [pc, #28]	@ (800529c <prvProcessReceivedCommands+0x174>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	1d39      	adds	r1, r7, #4
 8005282:	2200      	movs	r2, #0
 8005284:	4618      	mov	r0, r3
 8005286:	f7fe fc35 	bl	8003af4 <xQueueReceive>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	f47f af4f 	bne.w	8005130 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005292:	bf00      	nop
 8005294:	bf00      	nop
 8005296:	3730      	adds	r7, #48	@ 0x30
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	20000dd8 	.word	0x20000dd8

080052a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b088      	sub	sp, #32
 80052a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052a6:	e046      	b.n	8005336 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052a8:	4b2c      	ldr	r3, [pc, #176]	@ (800535c <prvSwitchTimerLists+0xbc>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052b2:	4b2a      	ldr	r3, [pc, #168]	@ (800535c <prvSwitchTimerLists+0xbc>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	3304      	adds	r3, #4
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fe f945 	bl	8003550 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d12f      	bne.n	8005336 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4413      	add	r3, r2
 80052de:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d90e      	bls.n	8005306 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052f4:	4b19      	ldr	r3, [pc, #100]	@ (800535c <prvSwitchTimerLists+0xbc>)
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4619      	mov	r1, r3
 80052fe:	4610      	mov	r0, r2
 8005300:	f7fe f8ee 	bl	80034e0 <vListInsert>
 8005304:	e017      	b.n	8005336 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005306:	2300      	movs	r3, #0
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	2300      	movs	r3, #0
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	2100      	movs	r1, #0
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f7ff fd91 	bl	8004e38 <xTimerGenericCommand>
 8005316:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10b      	bne.n	8005336 <prvSwitchTimerLists+0x96>
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	603b      	str	r3, [r7, #0]
}
 8005330:	bf00      	nop
 8005332:	bf00      	nop
 8005334:	e7fd      	b.n	8005332 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005336:	4b09      	ldr	r3, [pc, #36]	@ (800535c <prvSwitchTimerLists+0xbc>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1b3      	bne.n	80052a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005340:	4b06      	ldr	r3, [pc, #24]	@ (800535c <prvSwitchTimerLists+0xbc>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005346:	4b06      	ldr	r3, [pc, #24]	@ (8005360 <prvSwitchTimerLists+0xc0>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a04      	ldr	r2, [pc, #16]	@ (800535c <prvSwitchTimerLists+0xbc>)
 800534c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800534e:	4a04      	ldr	r2, [pc, #16]	@ (8005360 <prvSwitchTimerLists+0xc0>)
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	6013      	str	r3, [r2, #0]
}
 8005354:	bf00      	nop
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	20000dd0 	.word	0x20000dd0
 8005360:	20000dd4 	.word	0x20000dd4

08005364 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800536a:	f000 f92f 	bl	80055cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800536e:	4b15      	ldr	r3, [pc, #84]	@ (80053c4 <prvCheckForValidListAndQueue+0x60>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d120      	bne.n	80053b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005376:	4814      	ldr	r0, [pc, #80]	@ (80053c8 <prvCheckForValidListAndQueue+0x64>)
 8005378:	f7fe f864 	bl	8003444 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800537c:	4813      	ldr	r0, [pc, #76]	@ (80053cc <prvCheckForValidListAndQueue+0x68>)
 800537e:	f7fe f861 	bl	8003444 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005382:	4b13      	ldr	r3, [pc, #76]	@ (80053d0 <prvCheckForValidListAndQueue+0x6c>)
 8005384:	4a10      	ldr	r2, [pc, #64]	@ (80053c8 <prvCheckForValidListAndQueue+0x64>)
 8005386:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005388:	4b12      	ldr	r3, [pc, #72]	@ (80053d4 <prvCheckForValidListAndQueue+0x70>)
 800538a:	4a10      	ldr	r2, [pc, #64]	@ (80053cc <prvCheckForValidListAndQueue+0x68>)
 800538c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800538e:	2300      	movs	r3, #0
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	4b11      	ldr	r3, [pc, #68]	@ (80053d8 <prvCheckForValidListAndQueue+0x74>)
 8005394:	4a11      	ldr	r2, [pc, #68]	@ (80053dc <prvCheckForValidListAndQueue+0x78>)
 8005396:	2110      	movs	r1, #16
 8005398:	200a      	movs	r0, #10
 800539a:	f7fe f96d 	bl	8003678 <xQueueGenericCreateStatic>
 800539e:	4603      	mov	r3, r0
 80053a0:	4a08      	ldr	r2, [pc, #32]	@ (80053c4 <prvCheckForValidListAndQueue+0x60>)
 80053a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80053a4:	4b07      	ldr	r3, [pc, #28]	@ (80053c4 <prvCheckForValidListAndQueue+0x60>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d005      	beq.n	80053b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80053ac:	4b05      	ldr	r3, [pc, #20]	@ (80053c4 <prvCheckForValidListAndQueue+0x60>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	490b      	ldr	r1, [pc, #44]	@ (80053e0 <prvCheckForValidListAndQueue+0x7c>)
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fe fd90 	bl	8003ed8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053b8:	f000 f938 	bl	800562c <vPortExitCritical>
}
 80053bc:	bf00      	nop
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000dd8 	.word	0x20000dd8
 80053c8:	20000da8 	.word	0x20000da8
 80053cc:	20000dbc 	.word	0x20000dbc
 80053d0:	20000dd0 	.word	0x20000dd0
 80053d4:	20000dd4 	.word	0x20000dd4
 80053d8:	20000e84 	.word	0x20000e84
 80053dc:	20000de4 	.word	0x20000de4
 80053e0:	08005c60 	.word	0x08005c60

080053e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	3b04      	subs	r3, #4
 80053f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80053fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3b04      	subs	r3, #4
 8005402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f023 0201 	bic.w	r2, r3, #1
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3b04      	subs	r3, #4
 8005412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005414:	4a08      	ldr	r2, [pc, #32]	@ (8005438 <pxPortInitialiseStack+0x54>)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	3b14      	subs	r3, #20
 800541e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	3b20      	subs	r3, #32
 800542a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800542c:	68fb      	ldr	r3, [r7, #12]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	bc80      	pop	{r7}
 8005436:	4770      	bx	lr
 8005438:	0800543d 	.word	0x0800543d

0800543c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005442:	2300      	movs	r3, #0
 8005444:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005446:	4b12      	ldr	r3, [pc, #72]	@ (8005490 <prvTaskExitError+0x54>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544e:	d00b      	beq.n	8005468 <prvTaskExitError+0x2c>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	60fb      	str	r3, [r7, #12]
}
 8005462:	bf00      	nop
 8005464:	bf00      	nop
 8005466:	e7fd      	b.n	8005464 <prvTaskExitError+0x28>
	__asm volatile
 8005468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	60bb      	str	r3, [r7, #8]
}
 800547a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800547c:	bf00      	nop
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0fc      	beq.n	800547e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	bc80      	pop	{r7}
 800548e:	4770      	bx	lr
 8005490:	20000014 	.word	0x20000014
	...

080054a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80054a0:	4b07      	ldr	r3, [pc, #28]	@ (80054c0 <pxCurrentTCBConst2>)
 80054a2:	6819      	ldr	r1, [r3, #0]
 80054a4:	6808      	ldr	r0, [r1, #0]
 80054a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80054aa:	f380 8809 	msr	PSP, r0
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f04f 0000 	mov.w	r0, #0
 80054b6:	f380 8811 	msr	BASEPRI, r0
 80054ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80054be:	4770      	bx	lr

080054c0 <pxCurrentTCBConst2>:
 80054c0:	200008a8 	.word	0x200008a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop

080054c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80054c8:	4806      	ldr	r0, [pc, #24]	@ (80054e4 <prvPortStartFirstTask+0x1c>)
 80054ca:	6800      	ldr	r0, [r0, #0]
 80054cc:	6800      	ldr	r0, [r0, #0]
 80054ce:	f380 8808 	msr	MSP, r0
 80054d2:	b662      	cpsie	i
 80054d4:	b661      	cpsie	f
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	df00      	svc	0
 80054e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054e2:	bf00      	nop
 80054e4:	e000ed08 	.word	0xe000ed08

080054e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054ee:	4b32      	ldr	r3, [pc, #200]	@ (80055b8 <xPortStartScheduler+0xd0>)
 80054f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	22ff      	movs	r2, #255	@ 0xff
 80054fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005508:	78fb      	ldrb	r3, [r7, #3]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005510:	b2da      	uxtb	r2, r3
 8005512:	4b2a      	ldr	r3, [pc, #168]	@ (80055bc <xPortStartScheduler+0xd4>)
 8005514:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005516:	4b2a      	ldr	r3, [pc, #168]	@ (80055c0 <xPortStartScheduler+0xd8>)
 8005518:	2207      	movs	r2, #7
 800551a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800551c:	e009      	b.n	8005532 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800551e:	4b28      	ldr	r3, [pc, #160]	@ (80055c0 <xPortStartScheduler+0xd8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3b01      	subs	r3, #1
 8005524:	4a26      	ldr	r2, [pc, #152]	@ (80055c0 <xPortStartScheduler+0xd8>)
 8005526:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	b2db      	uxtb	r3, r3
 8005530:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005532:	78fb      	ldrb	r3, [r7, #3]
 8005534:	b2db      	uxtb	r3, r3
 8005536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553a:	2b80      	cmp	r3, #128	@ 0x80
 800553c:	d0ef      	beq.n	800551e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800553e:	4b20      	ldr	r3, [pc, #128]	@ (80055c0 <xPortStartScheduler+0xd8>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f1c3 0307 	rsb	r3, r3, #7
 8005546:	2b04      	cmp	r3, #4
 8005548:	d00b      	beq.n	8005562 <xPortStartScheduler+0x7a>
	__asm volatile
 800554a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	60bb      	str	r3, [r7, #8]
}
 800555c:	bf00      	nop
 800555e:	bf00      	nop
 8005560:	e7fd      	b.n	800555e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005562:	4b17      	ldr	r3, [pc, #92]	@ (80055c0 <xPortStartScheduler+0xd8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	021b      	lsls	r3, r3, #8
 8005568:	4a15      	ldr	r2, [pc, #84]	@ (80055c0 <xPortStartScheduler+0xd8>)
 800556a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800556c:	4b14      	ldr	r3, [pc, #80]	@ (80055c0 <xPortStartScheduler+0xd8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005574:	4a12      	ldr	r2, [pc, #72]	@ (80055c0 <xPortStartScheduler+0xd8>)
 8005576:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	b2da      	uxtb	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005580:	4b10      	ldr	r3, [pc, #64]	@ (80055c4 <xPortStartScheduler+0xdc>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a0f      	ldr	r2, [pc, #60]	@ (80055c4 <xPortStartScheduler+0xdc>)
 8005586:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800558a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800558c:	4b0d      	ldr	r3, [pc, #52]	@ (80055c4 <xPortStartScheduler+0xdc>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a0c      	ldr	r2, [pc, #48]	@ (80055c4 <xPortStartScheduler+0xdc>)
 8005592:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005596:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005598:	f000 f8b8 	bl	800570c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800559c:	4b0a      	ldr	r3, [pc, #40]	@ (80055c8 <xPortStartScheduler+0xe0>)
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055a2:	f7ff ff91 	bl	80054c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055a6:	f7ff f8a7 	bl	80046f8 <vTaskSwitchContext>
	prvTaskExitError();
 80055aa:	f7ff ff47 	bl	800543c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	e000e400 	.word	0xe000e400
 80055bc:	20000ed4 	.word	0x20000ed4
 80055c0:	20000ed8 	.word	0x20000ed8
 80055c4:	e000ed20 	.word	0xe000ed20
 80055c8:	20000014 	.word	0x20000014

080055cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
	__asm volatile
 80055d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	607b      	str	r3, [r7, #4]
}
 80055e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005624 <vPortEnterCritical+0x58>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3301      	adds	r3, #1
 80055ec:	4a0d      	ldr	r2, [pc, #52]	@ (8005624 <vPortEnterCritical+0x58>)
 80055ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005624 <vPortEnterCritical+0x58>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d110      	bne.n	800561a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005628 <vPortEnterCritical+0x5c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00b      	beq.n	800561a <vPortEnterCritical+0x4e>
	__asm volatile
 8005602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	603b      	str	r3, [r7, #0]
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop
 8005618:	e7fd      	b.n	8005616 <vPortEnterCritical+0x4a>
	}
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	bc80      	pop	{r7}
 8005622:	4770      	bx	lr
 8005624:	20000014 	.word	0x20000014
 8005628:	e000ed04 	.word	0xe000ed04

0800562c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005632:	4b12      	ldr	r3, [pc, #72]	@ (800567c <vPortExitCritical+0x50>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10b      	bne.n	8005652 <vPortExitCritical+0x26>
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	607b      	str	r3, [r7, #4]
}
 800564c:	bf00      	nop
 800564e:	bf00      	nop
 8005650:	e7fd      	b.n	800564e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005652:	4b0a      	ldr	r3, [pc, #40]	@ (800567c <vPortExitCritical+0x50>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3b01      	subs	r3, #1
 8005658:	4a08      	ldr	r2, [pc, #32]	@ (800567c <vPortExitCritical+0x50>)
 800565a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800565c:	4b07      	ldr	r3, [pc, #28]	@ (800567c <vPortExitCritical+0x50>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d105      	bne.n	8005670 <vPortExitCritical+0x44>
 8005664:	2300      	movs	r3, #0
 8005666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	f383 8811 	msr	BASEPRI, r3
}
 800566e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	bc80      	pop	{r7}
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	20000014 	.word	0x20000014

08005680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005680:	f3ef 8009 	mrs	r0, PSP
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	4b0d      	ldr	r3, [pc, #52]	@ (80056c0 <pxCurrentTCBConst>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005690:	6010      	str	r0, [r2, #0]
 8005692:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005696:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800569a:	f380 8811 	msr	BASEPRI, r0
 800569e:	f7ff f82b 	bl	80046f8 <vTaskSwitchContext>
 80056a2:	f04f 0000 	mov.w	r0, #0
 80056a6:	f380 8811 	msr	BASEPRI, r0
 80056aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80056ae:	6819      	ldr	r1, [r3, #0]
 80056b0:	6808      	ldr	r0, [r1, #0]
 80056b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80056b6:	f380 8809 	msr	PSP, r0
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	4770      	bx	lr

080056c0 <pxCurrentTCBConst>:
 80056c0:	200008a8 	.word	0x200008a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80056c4:	bf00      	nop
 80056c6:	bf00      	nop

080056c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	607b      	str	r3, [r7, #4]
}
 80056e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056e2:	f7fe ff49 	bl	8004578 <xTaskIncrementTick>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056ec:	4b06      	ldr	r3, [pc, #24]	@ (8005708 <SysTick_Handler+0x40>)
 80056ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	2300      	movs	r3, #0
 80056f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	f383 8811 	msr	BASEPRI, r3
}
 80056fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005700:	bf00      	nop
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	e000ed04 	.word	0xe000ed04

0800570c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005710:	4b0a      	ldr	r3, [pc, #40]	@ (800573c <vPortSetupTimerInterrupt+0x30>)
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005716:	4b0a      	ldr	r3, [pc, #40]	@ (8005740 <vPortSetupTimerInterrupt+0x34>)
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800571c:	4b09      	ldr	r3, [pc, #36]	@ (8005744 <vPortSetupTimerInterrupt+0x38>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a09      	ldr	r2, [pc, #36]	@ (8005748 <vPortSetupTimerInterrupt+0x3c>)
 8005722:	fba2 2303 	umull	r2, r3, r2, r3
 8005726:	099b      	lsrs	r3, r3, #6
 8005728:	4a08      	ldr	r2, [pc, #32]	@ (800574c <vPortSetupTimerInterrupt+0x40>)
 800572a:	3b01      	subs	r3, #1
 800572c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800572e:	4b03      	ldr	r3, [pc, #12]	@ (800573c <vPortSetupTimerInterrupt+0x30>)
 8005730:	2207      	movs	r2, #7
 8005732:	601a      	str	r2, [r3, #0]
}
 8005734:	bf00      	nop
 8005736:	46bd      	mov	sp, r7
 8005738:	bc80      	pop	{r7}
 800573a:	4770      	bx	lr
 800573c:	e000e010 	.word	0xe000e010
 8005740:	e000e018 	.word	0xe000e018
 8005744:	20000008 	.word	0x20000008
 8005748:	10624dd3 	.word	0x10624dd3
 800574c:	e000e014 	.word	0xe000e014

08005750 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005756:	f3ef 8305 	mrs	r3, IPSR
 800575a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2b0f      	cmp	r3, #15
 8005760:	d915      	bls.n	800578e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005762:	4a17      	ldr	r2, [pc, #92]	@ (80057c0 <vPortValidateInterruptPriority+0x70>)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4413      	add	r3, r2
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800576c:	4b15      	ldr	r3, [pc, #84]	@ (80057c4 <vPortValidateInterruptPriority+0x74>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	7afa      	ldrb	r2, [r7, #11]
 8005772:	429a      	cmp	r2, r3
 8005774:	d20b      	bcs.n	800578e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	607b      	str	r3, [r7, #4]
}
 8005788:	bf00      	nop
 800578a:	bf00      	nop
 800578c:	e7fd      	b.n	800578a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800578e:	4b0e      	ldr	r3, [pc, #56]	@ (80057c8 <vPortValidateInterruptPriority+0x78>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005796:	4b0d      	ldr	r3, [pc, #52]	@ (80057cc <vPortValidateInterruptPriority+0x7c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d90b      	bls.n	80057b6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	603b      	str	r3, [r7, #0]
}
 80057b0:	bf00      	nop
 80057b2:	bf00      	nop
 80057b4:	e7fd      	b.n	80057b2 <vPortValidateInterruptPriority+0x62>
	}
 80057b6:	bf00      	nop
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr
 80057c0:	e000e3f0 	.word	0xe000e3f0
 80057c4:	20000ed4 	.word	0x20000ed4
 80057c8:	e000ed0c 	.word	0xe000ed0c
 80057cc:	20000ed8 	.word	0x20000ed8

080057d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08a      	sub	sp, #40	@ 0x28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057d8:	2300      	movs	r3, #0
 80057da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057dc:	f7fe fe12 	bl	8004404 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057e0:	4b5a      	ldr	r3, [pc, #360]	@ (800594c <pvPortMalloc+0x17c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057e8:	f000 f916 	bl	8005a18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057ec:	4b58      	ldr	r3, [pc, #352]	@ (8005950 <pvPortMalloc+0x180>)
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4013      	ands	r3, r2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f040 8090 	bne.w	800591a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d01e      	beq.n	800583e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005800:	2208      	movs	r2, #8
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4413      	add	r3, r2
 8005806:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	2b00      	cmp	r3, #0
 8005810:	d015      	beq.n	800583e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f023 0307 	bic.w	r3, r3, #7
 8005818:	3308      	adds	r3, #8
 800581a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00b      	beq.n	800583e <pvPortMalloc+0x6e>
	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	617b      	str	r3, [r7, #20]
}
 8005838:	bf00      	nop
 800583a:	bf00      	nop
 800583c:	e7fd      	b.n	800583a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d06a      	beq.n	800591a <pvPortMalloc+0x14a>
 8005844:	4b43      	ldr	r3, [pc, #268]	@ (8005954 <pvPortMalloc+0x184>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	429a      	cmp	r2, r3
 800584c:	d865      	bhi.n	800591a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800584e:	4b42      	ldr	r3, [pc, #264]	@ (8005958 <pvPortMalloc+0x188>)
 8005850:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005852:	4b41      	ldr	r3, [pc, #260]	@ (8005958 <pvPortMalloc+0x188>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005858:	e004      	b.n	8005864 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800585a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	429a      	cmp	r2, r3
 800586c:	d903      	bls.n	8005876 <pvPortMalloc+0xa6>
 800586e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f1      	bne.n	800585a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005876:	4b35      	ldr	r3, [pc, #212]	@ (800594c <pvPortMalloc+0x17c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800587c:	429a      	cmp	r2, r3
 800587e:	d04c      	beq.n	800591a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2208      	movs	r2, #8
 8005886:	4413      	add	r3, r2
 8005888:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800588a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	6a3b      	ldr	r3, [r7, #32]
 8005890:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	1ad2      	subs	r2, r2, r3
 800589a:	2308      	movs	r3, #8
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	429a      	cmp	r2, r3
 80058a0:	d920      	bls.n	80058e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4413      	add	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00b      	beq.n	80058cc <pvPortMalloc+0xfc>
	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	613b      	str	r3, [r7, #16]
}
 80058c6:	bf00      	nop
 80058c8:	bf00      	nop
 80058ca:	e7fd      	b.n	80058c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	1ad2      	subs	r2, r2, r3
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058de:	69b8      	ldr	r0, [r7, #24]
 80058e0:	f000 f8fc 	bl	8005adc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005954 <pvPortMalloc+0x184>)
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	4a19      	ldr	r2, [pc, #100]	@ (8005954 <pvPortMalloc+0x184>)
 80058f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058f2:	4b18      	ldr	r3, [pc, #96]	@ (8005954 <pvPortMalloc+0x184>)
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	4b19      	ldr	r3, [pc, #100]	@ (800595c <pvPortMalloc+0x18c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d203      	bcs.n	8005906 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058fe:	4b15      	ldr	r3, [pc, #84]	@ (8005954 <pvPortMalloc+0x184>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a16      	ldr	r2, [pc, #88]	@ (800595c <pvPortMalloc+0x18c>)
 8005904:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	4b11      	ldr	r3, [pc, #68]	@ (8005950 <pvPortMalloc+0x180>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	431a      	orrs	r2, r3
 8005910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005912:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800591a:	f7fe fd81 	bl	8004420 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00b      	beq.n	8005940 <pvPortMalloc+0x170>
	__asm volatile
 8005928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	60fb      	str	r3, [r7, #12]
}
 800593a:	bf00      	nop
 800593c:	bf00      	nop
 800593e:	e7fd      	b.n	800593c <pvPortMalloc+0x16c>
	return pvReturn;
 8005940:	69fb      	ldr	r3, [r7, #28]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3728      	adds	r7, #40	@ 0x28
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	20001ae4 	.word	0x20001ae4
 8005950:	20001af0 	.word	0x20001af0
 8005954:	20001ae8 	.word	0x20001ae8
 8005958:	20001adc 	.word	0x20001adc
 800595c:	20001aec 	.word	0x20001aec

08005960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d04a      	beq.n	8005a08 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005972:	2308      	movs	r3, #8
 8005974:	425b      	negs	r3, r3
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4413      	add	r3, r2
 800597a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	4b22      	ldr	r3, [pc, #136]	@ (8005a10 <vPortFree+0xb0>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4013      	ands	r3, r2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10b      	bne.n	80059a6 <vPortFree+0x46>
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	60fb      	str	r3, [r7, #12]
}
 80059a0:	bf00      	nop
 80059a2:	bf00      	nop
 80059a4:	e7fd      	b.n	80059a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00b      	beq.n	80059c6 <vPortFree+0x66>
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	60bb      	str	r3, [r7, #8]
}
 80059c0:	bf00      	nop
 80059c2:	bf00      	nop
 80059c4:	e7fd      	b.n	80059c2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	4b11      	ldr	r3, [pc, #68]	@ (8005a10 <vPortFree+0xb0>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4013      	ands	r3, r2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d019      	beq.n	8005a08 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d115      	bne.n	8005a08 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005a10 <vPortFree+0xb0>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	43db      	mvns	r3, r3
 80059e6:	401a      	ands	r2, r3
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059ec:	f7fe fd0a 	bl	8004404 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	4b07      	ldr	r3, [pc, #28]	@ (8005a14 <vPortFree+0xb4>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4413      	add	r3, r2
 80059fa:	4a06      	ldr	r2, [pc, #24]	@ (8005a14 <vPortFree+0xb4>)
 80059fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059fe:	6938      	ldr	r0, [r7, #16]
 8005a00:	f000 f86c 	bl	8005adc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005a04:	f7fe fd0c 	bl	8004420 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a08:	bf00      	nop
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	20001af0 	.word	0x20001af0
 8005a14:	20001ae8 	.word	0x20001ae8

08005a18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a1e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005a22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a24:	4b27      	ldr	r3, [pc, #156]	@ (8005ac4 <prvHeapInit+0xac>)
 8005a26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00c      	beq.n	8005a4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3307      	adds	r3, #7
 8005a36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0307 	bic.w	r3, r3, #7
 8005a3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	4a1f      	ldr	r2, [pc, #124]	@ (8005ac4 <prvHeapInit+0xac>)
 8005a48:	4413      	add	r3, r2
 8005a4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a50:	4a1d      	ldr	r2, [pc, #116]	@ (8005ac8 <prvHeapInit+0xb0>)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a56:	4b1c      	ldr	r3, [pc, #112]	@ (8005ac8 <prvHeapInit+0xb0>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	4413      	add	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a64:	2208      	movs	r2, #8
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	1a9b      	subs	r3, r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0307 	bic.w	r3, r3, #7
 8005a72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4a15      	ldr	r2, [pc, #84]	@ (8005acc <prvHeapInit+0xb4>)
 8005a78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a7a:	4b14      	ldr	r3, [pc, #80]	@ (8005acc <prvHeapInit+0xb4>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a82:	4b12      	ldr	r3, [pc, #72]	@ (8005acc <prvHeapInit+0xb4>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	1ad2      	subs	r2, r2, r3
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a98:	4b0c      	ldr	r3, [pc, #48]	@ (8005acc <prvHeapInit+0xb4>)
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8005ad0 <prvHeapInit+0xb8>)
 8005aa6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	4a09      	ldr	r2, [pc, #36]	@ (8005ad4 <prvHeapInit+0xbc>)
 8005aae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ab0:	4b09      	ldr	r3, [pc, #36]	@ (8005ad8 <prvHeapInit+0xc0>)
 8005ab2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005ab6:	601a      	str	r2, [r3, #0]
}
 8005ab8:	bf00      	nop
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bc80      	pop	{r7}
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	20000edc 	.word	0x20000edc
 8005ac8:	20001adc 	.word	0x20001adc
 8005acc:	20001ae4 	.word	0x20001ae4
 8005ad0:	20001aec 	.word	0x20001aec
 8005ad4:	20001ae8 	.word	0x20001ae8
 8005ad8:	20001af0 	.word	0x20001af0

08005adc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ae4:	4b27      	ldr	r3, [pc, #156]	@ (8005b84 <prvInsertBlockIntoFreeList+0xa8>)
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	e002      	b.n	8005af0 <prvInsertBlockIntoFreeList+0x14>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d8f7      	bhi.n	8005aea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	4413      	add	r3, r2
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d108      	bne.n	8005b1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	441a      	add	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	441a      	add	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d118      	bne.n	8005b64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	4b14      	ldr	r3, [pc, #80]	@ (8005b88 <prvInsertBlockIntoFreeList+0xac>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d00d      	beq.n	8005b5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	441a      	add	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e008      	b.n	8005b6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b88 <prvInsertBlockIntoFreeList+0xac>)
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	e003      	b.n	8005b6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d002      	beq.n	8005b7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b7a:	bf00      	nop
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bc80      	pop	{r7}
 8005b82:	4770      	bx	lr
 8005b84:	20001adc 	.word	0x20001adc
 8005b88:	20001ae4 	.word	0x20001ae4

08005b8c <memset>:
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	4402      	add	r2, r0
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d100      	bne.n	8005b96 <memset+0xa>
 8005b94:	4770      	bx	lr
 8005b96:	f803 1b01 	strb.w	r1, [r3], #1
 8005b9a:	e7f9      	b.n	8005b90 <memset+0x4>

08005b9c <__libc_init_array>:
 8005b9c:	b570      	push	{r4, r5, r6, lr}
 8005b9e:	2600      	movs	r6, #0
 8005ba0:	4d0c      	ldr	r5, [pc, #48]	@ (8005bd4 <__libc_init_array+0x38>)
 8005ba2:	4c0d      	ldr	r4, [pc, #52]	@ (8005bd8 <__libc_init_array+0x3c>)
 8005ba4:	1b64      	subs	r4, r4, r5
 8005ba6:	10a4      	asrs	r4, r4, #2
 8005ba8:	42a6      	cmp	r6, r4
 8005baa:	d109      	bne.n	8005bc0 <__libc_init_array+0x24>
 8005bac:	f000 f828 	bl	8005c00 <_init>
 8005bb0:	2600      	movs	r6, #0
 8005bb2:	4d0a      	ldr	r5, [pc, #40]	@ (8005bdc <__libc_init_array+0x40>)
 8005bb4:	4c0a      	ldr	r4, [pc, #40]	@ (8005be0 <__libc_init_array+0x44>)
 8005bb6:	1b64      	subs	r4, r4, r5
 8005bb8:	10a4      	asrs	r4, r4, #2
 8005bba:	42a6      	cmp	r6, r4
 8005bbc:	d105      	bne.n	8005bca <__libc_init_array+0x2e>
 8005bbe:	bd70      	pop	{r4, r5, r6, pc}
 8005bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc4:	4798      	blx	r3
 8005bc6:	3601      	adds	r6, #1
 8005bc8:	e7ee      	b.n	8005ba8 <__libc_init_array+0xc>
 8005bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bce:	4798      	blx	r3
 8005bd0:	3601      	adds	r6, #1
 8005bd2:	e7f2      	b.n	8005bba <__libc_init_array+0x1e>
 8005bd4:	08005d10 	.word	0x08005d10
 8005bd8:	08005d10 	.word	0x08005d10
 8005bdc:	08005d10 	.word	0x08005d10
 8005be0:	08005d14 	.word	0x08005d14

08005be4 <memcpy>:
 8005be4:	440a      	add	r2, r1
 8005be6:	4291      	cmp	r1, r2
 8005be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bec:	d100      	bne.n	8005bf0 <memcpy+0xc>
 8005bee:	4770      	bx	lr
 8005bf0:	b510      	push	{r4, lr}
 8005bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bf6:	4291      	cmp	r1, r2
 8005bf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bfc:	d1f9      	bne.n	8005bf2 <memcpy+0xe>
 8005bfe:	bd10      	pop	{r4, pc}

08005c00 <_init>:
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	bf00      	nop
 8005c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c06:	bc08      	pop	{r3}
 8005c08:	469e      	mov	lr, r3
 8005c0a:	4770      	bx	lr

08005c0c <_fini>:
 8005c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0e:	bf00      	nop
 8005c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c12:	bc08      	pop	{r3}
 8005c14:	469e      	mov	lr, r3
 8005c16:	4770      	bx	lr
