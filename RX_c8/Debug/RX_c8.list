
RX_c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071c8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080072d8  080072d8  000082d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073d0  080073d0  00009018  2**0
                  CONTENTS
  4 .ARM          00000000  080073d0  080073d0  00009018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073d0  080073d0  00009018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073d0  080073d0  000083d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073d4  080073d4  000083d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080073d8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b34  20000018  080073f0  00009018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b4c  080073f0  00009b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001afb0  00000000  00000000  00009041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c00  00000000  00000000  00023ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  00027bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001394  00000000  00000000  000294e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ab5  00000000  00000000  0002a874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb2d  00000000  00000000  00044329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098694  00000000  00000000  00060e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f94ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a5c  00000000  00000000  000f9530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000fff8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	080072c0 	.word	0x080072c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	080072c0 	.word	0x080072c0

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	@ 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_f2iz>:
 800036c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000370:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000374:	d30f      	bcc.n	8000396 <__aeabi_f2iz+0x2a>
 8000376:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800037a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800037e:	d90d      	bls.n	800039c <__aeabi_f2iz+0x30>
 8000380:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000384:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000388:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800038c:	fa23 f002 	lsr.w	r0, r3, r2
 8000390:	bf18      	it	ne
 8000392:	4240      	negne	r0, r0
 8000394:	4770      	bx	lr
 8000396:	f04f 0000 	mov.w	r0, #0
 800039a:	4770      	bx	lr
 800039c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80003a0:	d101      	bne.n	80003a6 <__aeabi_f2iz+0x3a>
 80003a2:	0242      	lsls	r2, r0, #9
 80003a4:	d105      	bne.n	80003b2 <__aeabi_f2iz+0x46>
 80003a6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80003aa:	bf08      	it	eq
 80003ac:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80003b0:	4770      	bx	lr
 80003b2:	f04f 0000 	mov.w	r0, #0
 80003b6:	4770      	bx	lr

080003b8 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	460a      	mov	r2, r1
 80003c2:	80fb      	strh	r3, [r7, #6]
 80003c4:	4613      	mov	r3, r2
 80003c6:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 80003c8:	88fa      	ldrh	r2, [r7, #6]
 80003ca:	88bb      	ldrh	r3, [r7, #4]
 80003cc:	4413      	add	r3, r2
 80003ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80003d0:	dc01      	bgt.n	80003d6 <bytestowrite+0x1e>
 80003d2:	88fb      	ldrh	r3, [r7, #6]
 80003d4:	e003      	b.n	80003de <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 80003d6:	88bb      	ldrh	r3, [r7, #4]
 80003d8:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80003dc:	b29b      	uxth	r3, r3
}
 80003de:	4618      	mov	r0, r3
 80003e0:	370c      	adds	r7, #12
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr

080003e8 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08e      	sub	sp, #56	@ 0x38
 80003ec:	af04      	add	r7, sp, #16
 80003ee:	60ba      	str	r2, [r7, #8]
 80003f0:	461a      	mov	r2, r3
 80003f2:	4603      	mov	r3, r0
 80003f4:	81fb      	strh	r3, [r7, #14]
 80003f6:	460b      	mov	r3, r1
 80003f8:	81bb      	strh	r3, [r7, #12]
 80003fa:	4613      	mov	r3, r2
 80003fc:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 80003fe:	2306      	movs	r3, #6
 8000400:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000402:	89fb      	ldrh	r3, [r7, #14]
 8000404:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000406:	88fa      	ldrh	r2, [r7, #6]
 8000408:	89bb      	ldrh	r3, [r7, #12]
 800040a:	4413      	add	r3, r2
 800040c:	2b00      	cmp	r3, #0
 800040e:	da00      	bge.n	8000412 <EEPROM_Write+0x2a>
 8000410:	333f      	adds	r3, #63	@ 0x3f
 8000412:	119b      	asrs	r3, r3, #6
 8000414:	b29a      	uxth	r2, r3
 8000416:	89fb      	ldrh	r3, [r7, #14]
 8000418:	4413      	add	r3, r2
 800041a:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 800041c:	8b7a      	ldrh	r2, [r7, #26]
 800041e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000420:	1ad3      	subs	r3, r2, r3
 8000422:	b29b      	uxth	r3, r3
 8000424:	3301      	adds	r3, #1
 8000426:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000428:	2300      	movs	r3, #0
 800042a:	84bb      	strh	r3, [r7, #36]	@ 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 800042c:	2300      	movs	r3, #0
 800042e:	623b      	str	r3, [r7, #32]
 8000430:	e034      	b.n	800049c <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000432:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000434:	69fb      	ldr	r3, [r7, #28]
 8000436:	fa02 f303 	lsl.w	r3, r2, r3
 800043a:	b21a      	sxth	r2, r3
 800043c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000440:	4313      	orrs	r3, r2
 8000442:	b21b      	sxth	r3, r3
 8000444:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 8000446:	89ba      	ldrh	r2, [r7, #12]
 8000448:	88fb      	ldrh	r3, [r7, #6]
 800044a:	4611      	mov	r1, r2
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ffb3 	bl	80003b8 <bytestowrite>
 8000452:	4603      	mov	r3, r0
 8000454:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8000456:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000458:	68ba      	ldr	r2, [r7, #8]
 800045a:	4413      	add	r3, r2
 800045c:	8af9      	ldrh	r1, [r7, #22]
 800045e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000462:	9202      	str	r2, [sp, #8]
 8000464:	8aba      	ldrh	r2, [r7, #20]
 8000466:	9201      	str	r2, [sp, #4]
 8000468:	9300      	str	r3, [sp, #0]
 800046a:	2302      	movs	r3, #2
 800046c:	460a      	mov	r2, r1
 800046e:	21a0      	movs	r1, #160	@ 0xa0
 8000470:	480f      	ldr	r0, [pc, #60]	@ (80004b0 <EEPROM_Write+0xc8>)
 8000472:	f001 fdd3 	bl	800201c <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8000476:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000478:	3301      	adds	r3, #1
 800047a:	84fb      	strh	r3, [r7, #38]	@ 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 800047c:	2300      	movs	r3, #0
 800047e:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8000480:	88fa      	ldrh	r2, [r7, #6]
 8000482:	8abb      	ldrh	r3, [r7, #20]
 8000484:	1ad3      	subs	r3, r2, r3
 8000486:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8000488:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800048a:	8abb      	ldrh	r3, [r7, #20]
 800048c:	4413      	add	r3, r2
 800048e:	84bb      	strh	r3, [r7, #36]	@ 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8000490:	2005      	movs	r0, #5
 8000492:	f001 f9df 	bl	8001854 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8000496:	6a3b      	ldr	r3, [r7, #32]
 8000498:	3301      	adds	r3, #1
 800049a:	623b      	str	r3, [r7, #32]
 800049c:	8b3b      	ldrh	r3, [r7, #24]
 800049e:	6a3a      	ldr	r2, [r7, #32]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	dbc6      	blt.n	8000432 <EEPROM_Write+0x4a>
	}
}
 80004a4:	bf00      	nop
 80004a6:	bf00      	nop
 80004a8:	3728      	adds	r7, #40	@ 0x28
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	2000003c 	.word	0x2000003c

080004b4 <float2Bytes>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 80004c2:	2300      	movs	r3, #0
 80004c4:	73fb      	strb	r3, [r7, #15]
 80004c6:	e00b      	b.n	80004e0 <float2Bytes+0x2c>
      ftoa_bytes_temp[i] = thing.bytes[i];
 80004c8:	7bfa      	ldrb	r2, [r7, #15]
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	6879      	ldr	r1, [r7, #4]
 80004ce:	440b      	add	r3, r1
 80004d0:	3210      	adds	r2, #16
 80004d2:	443a      	add	r2, r7
 80004d4:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80004d8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 80004da:	7bfb      	ldrb	r3, [r7, #15]
 80004dc:	3301      	adds	r3, #1
 80004de:	73fb      	strb	r3, [r7, #15]
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	2b03      	cmp	r3, #3
 80004e4:	d9f0      	bls.n	80004c8 <float2Bytes+0x14>
    }

}
 80004e6:	bf00      	nop
 80004e8:	bf00      	nop
 80004ea:	3714      	adds	r7, #20
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr

080004f2 <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 80004f2:	b480      	push	{r7}
 80004f4:	b087      	sub	sp, #28
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 80004fa:	2300      	movs	r3, #0
 80004fc:	75fb      	strb	r3, [r7, #23]
 80004fe:	e00b      	b.n	8000518 <Bytes2float+0x26>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 8000500:	7dfb      	ldrb	r3, [r7, #23]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	441a      	add	r2, r3
 8000506:	7dfb      	ldrb	r3, [r7, #23]
 8000508:	7812      	ldrb	r2, [r2, #0]
 800050a:	3318      	adds	r3, #24
 800050c:	443b      	add	r3, r7
 800050e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 8000512:	7dfb      	ldrb	r3, [r7, #23]
 8000514:	3301      	adds	r3, #1
 8000516:	75fb      	strb	r3, [r7, #23]
 8000518:	7dfb      	ldrb	r3, [r7, #23]
 800051a:	2b03      	cmp	r3, #3
 800051c:	d9f0      	bls.n	8000500 <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	613b      	str	r3, [r7, #16]
   return float_variable;
 8000522:	693b      	ldr	r3, [r7, #16]
}
 8000524:	4618      	mov	r0, r3
 8000526:	371c      	adds	r7, #28
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
	...

08000530 <EEPROM_Write_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM (uint16_t page, uint16_t offset, float data)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	603a      	str	r2, [r7, #0]
 800053a:	80fb      	strh	r3, [r7, #6]
 800053c:	460b      	mov	r3, r1
 800053e:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 8000540:	6839      	ldr	r1, [r7, #0]
 8000542:	4806      	ldr	r0, [pc, #24]	@ (800055c <EEPROM_Write_NUM+0x2c>)
 8000544:	f7ff ffb6 	bl	80004b4 <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 8000548:	88b9      	ldrh	r1, [r7, #4]
 800054a:	88f8      	ldrh	r0, [r7, #6]
 800054c:	2304      	movs	r3, #4
 800054e:	4a03      	ldr	r2, [pc, #12]	@ (800055c <EEPROM_Write_NUM+0x2c>)
 8000550:	f7ff ff4a 	bl	80003e8 <EEPROM_Write>
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000034 	.word	0x20000034

08000560 <EEPROM_Read_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @returns the float/integer value
 */

float EEPROM_Read_NUM (uint16_t page, uint16_t offset)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	460a      	mov	r2, r1
 800056a:	80fb      	strh	r3, [r7, #6]
 800056c:	4613      	mov	r3, r2
 800056e:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	EEPROM_Read(page, offset, buffer, 4);
 8000570:	f107 020c 	add.w	r2, r7, #12
 8000574:	88b9      	ldrh	r1, [r7, #4]
 8000576:	88f8      	ldrh	r0, [r7, #6]
 8000578:	2304      	movs	r3, #4
 800057a:	f000 f80b 	bl	8000594 <EEPROM_Read>

	return (Bytes2float(buffer));
 800057e:	f107 030c 	add.w	r3, r7, #12
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ffb5 	bl	80004f2 <Bytes2float>
 8000588:	4603      	mov	r3, r0
}
 800058a:	4618      	mov	r0, r3
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08e      	sub	sp, #56	@ 0x38
 8000598:	af04      	add	r7, sp, #16
 800059a:	60ba      	str	r2, [r7, #8]
 800059c:	461a      	mov	r2, r3
 800059e:	4603      	mov	r3, r0
 80005a0:	81fb      	strh	r3, [r7, #14]
 80005a2:	460b      	mov	r3, r1
 80005a4:	81bb      	strh	r3, [r7, #12]
 80005a6:	4613      	mov	r3, r2
 80005a8:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 80005aa:	2306      	movs	r3, #6
 80005ac:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 80005ae:	89fb      	ldrh	r3, [r7, #14]
 80005b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80005b2:	88fa      	ldrh	r2, [r7, #6]
 80005b4:	89bb      	ldrh	r3, [r7, #12]
 80005b6:	4413      	add	r3, r2
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	da00      	bge.n	80005be <EEPROM_Read+0x2a>
 80005bc:	333f      	adds	r3, #63	@ 0x3f
 80005be:	119b      	asrs	r3, r3, #6
 80005c0:	b29a      	uxth	r2, r3
 80005c2:	89fb      	ldrh	r3, [r7, #14]
 80005c4:	4413      	add	r3, r2
 80005c6:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 80005c8:	8b7a      	ldrh	r2, [r7, #26]
 80005ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	3301      	adds	r3, #1
 80005d2:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	84bb      	strh	r3, [r7, #36]	@ 0x24

	for (int i=0; i<numofpages; i++)
 80005d8:	2300      	movs	r3, #0
 80005da:	623b      	str	r3, [r7, #32]
 80005dc:	e031      	b.n	8000642 <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80005de:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	b21a      	sxth	r2, r3
 80005e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	b21b      	sxth	r3, r3
 80005f0:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 80005f2:	89ba      	ldrh	r2, [r7, #12]
 80005f4:	88fb      	ldrh	r3, [r7, #6]
 80005f6:	4611      	mov	r1, r2
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fedd 	bl	80003b8 <bytestowrite>
 80005fe:	4603      	mov	r3, r0
 8000600:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000602:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000604:	68ba      	ldr	r2, [r7, #8]
 8000606:	4413      	add	r3, r2
 8000608:	8af9      	ldrh	r1, [r7, #22]
 800060a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800060e:	9202      	str	r2, [sp, #8]
 8000610:	8aba      	ldrh	r2, [r7, #20]
 8000612:	9201      	str	r2, [sp, #4]
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2302      	movs	r3, #2
 8000618:	460a      	mov	r2, r1
 800061a:	21a0      	movs	r1, #160	@ 0xa0
 800061c:	480d      	ldr	r0, [pc, #52]	@ (8000654 <EEPROM_Read+0xc0>)
 800061e:	f001 fdf7 	bl	8002210 <HAL_I2C_Mem_Read>
		startPage += 1;
 8000622:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000624:	3301      	adds	r3, #1
 8000626:	84fb      	strh	r3, [r7, #38]	@ 0x26
		offset=0;
 8000628:	2300      	movs	r3, #0
 800062a:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 800062c:	88fa      	ldrh	r2, [r7, #6]
 800062e:	8abb      	ldrh	r3, [r7, #20]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000634:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000636:	8abb      	ldrh	r3, [r7, #20]
 8000638:	4413      	add	r3, r2
 800063a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i=0; i<numofpages; i++)
 800063c:	6a3b      	ldr	r3, [r7, #32]
 800063e:	3301      	adds	r3, #1
 8000640:	623b      	str	r3, [r7, #32]
 8000642:	8b3b      	ldrh	r3, [r7, #24]
 8000644:	6a3a      	ldr	r2, [r7, #32]
 8000646:	429a      	cmp	r2, r3
 8000648:	dbc9      	blt.n	80005de <EEPROM_Read+0x4a>
	}
}
 800064a:	bf00      	nop
 800064c:	bf00      	nop
 800064e:	3728      	adds	r7, #40	@ 0x28
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	2000003c 	.word	0x2000003c

08000658 <setUp>:
	0b10011100   // ° (degree)
};


void setUp(LED74HC595 *ledObj, uint16_t sclkPin, GPIO_TypeDef * sclkPort, uint16_t rclkPin,
		GPIO_TypeDef * rclkPort, uint16_t dioPin, GPIO_TypeDef * dioPort) {
 8000658:	b480      	push	{r7}
 800065a:	b087      	sub	sp, #28
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	607a      	str	r2, [r7, #4]
 8000662:	461a      	mov	r2, r3
 8000664:	460b      	mov	r3, r1
 8000666:	817b      	strh	r3, [r7, #10]
 8000668:	4613      	mov	r3, r2
 800066a:	813b      	strh	r3, [r7, #8]
	_ledObj = ledObj;
 800066c:	4a1d      	ldr	r2, [pc, #116]	@ (80006e4 <setUp+0x8c>)
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	6013      	str	r3, [r2, #0]
	_ledObj->sclkPin = sclkPin;
 8000672:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <setUp+0x8c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	897a      	ldrh	r2, [r7, #10]
 8000678:	801a      	strh	r2, [r3, #0]
	_ledObj->sclkPort = sclkPort;
 800067a:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <setUp+0x8c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	605a      	str	r2, [r3, #4]
	_ledObj->rclkPin = rclkPin;
 8000682:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <setUp+0x8c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	893a      	ldrh	r2, [r7, #8]
 8000688:	811a      	strh	r2, [r3, #8]
	_ledObj->rclkPort = rclkPort;
 800068a:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <setUp+0x8c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	6a3a      	ldr	r2, [r7, #32]
 8000690:	60da      	str	r2, [r3, #12]
	_ledObj->dioPin = dioPin;
 8000692:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <setUp+0x8c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000698:	821a      	strh	r2, [r3, #16]
	_ledObj->dioPort = dioPort;
 800069a:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <setUp+0x8c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006a0:	615a      	str	r2, [r3, #20]

	for (int i = 0; i < 4; i++) {
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
 80006a6:	e010      	b.n	80006ca <setUp+0x72>
	  _ledObj->_digitSets[i]   = (uint8_t) SEG7_OFF;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <setUp+0x8c>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	4413      	add	r3, r2
 80006b0:	3318      	adds	r3, #24
 80006b2:	22ff      	movs	r2, #255	@ 0xff
 80006b4:	701a      	strb	r2, [r3, #0]
	  _ledObj->_digitValues[i] = (uint8_t) SEG7_OFF;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <setUp+0x8c>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	4413      	add	r3, r2
 80006be:	331c      	adds	r3, #28
 80006c0:	22ff      	movs	r2, #255	@ 0xff
 80006c2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	3301      	adds	r3, #1
 80006c8:	617b      	str	r3, [r7, #20]
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	2b03      	cmp	r3, #3
 80006ce:	ddeb      	ble.n	80006a8 <setUp+0x50>
	}

	_ledObj->_digitDots      = 0x00;
 80006d0:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <setUp+0x8c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 2020 	strb.w	r2, [r3, #32]
}
 80006da:	bf00      	nop
 80006dc:	371c      	adds	r7, #28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	20000038 	.word	0x20000038

080006e8 <clear>:


void clear() {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
	_ledObj->_digitDots = 0x00;
 80006ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <clear+0x3c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2020 	strb.w	r2, [r3, #32]

	for (int i = 0; i < 4; i++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	e009      	b.n	8000712 <clear+0x2a>
		_ledObj->_digitSets[i] = 0xFF;
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <clear+0x3c>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	3318      	adds	r3, #24
 8000708:	22ff      	movs	r2, #255	@ 0xff
 800070a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3301      	adds	r3, #1
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b03      	cmp	r3, #3
 8000716:	ddf2      	ble.n	80006fe <clear+0x16>
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	20000038 	.word	0x20000038

08000728 <setNumber>:

  _ledObj->_digitDots |= 1 << (pos - 1);
}


void setNumber(int pos, int value) {
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  if (pos < 1 || pos > 4)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b00      	cmp	r3, #0
 8000736:	dd14      	ble.n	8000762 <setNumber+0x3a>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b04      	cmp	r3, #4
 800073c:	dc11      	bgt.n	8000762 <setNumber+0x3a>
    return;

  if (value < 0 || pos > 9)
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	db10      	blt.n	8000766 <setNumber+0x3e>
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2b09      	cmp	r3, #9
 8000748:	dc0d      	bgt.n	8000766 <setNumber+0x3e>
    return;

  _ledObj->_digitSets[pos - 1] = digitPatterns[value];
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <setNumber+0x48>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3b01      	subs	r3, #1
 8000752:	4808      	ldr	r0, [pc, #32]	@ (8000774 <setNumber+0x4c>)
 8000754:	6839      	ldr	r1, [r7, #0]
 8000756:	4401      	add	r1, r0
 8000758:	7809      	ldrb	r1, [r1, #0]
 800075a:	4413      	add	r3, r2
 800075c:	460a      	mov	r2, r1
 800075e:	761a      	strb	r2, [r3, #24]
 8000760:	e002      	b.n	8000768 <setNumber+0x40>
    return;
 8000762:	bf00      	nop
 8000764:	e000      	b.n	8000768 <setNumber+0x40>
    return;
 8000766:	bf00      	nop
}
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	20000038 	.word	0x20000038
 8000774:	08007328 	.word	0x08007328

08000778 <setChar>:


void setChar(int pos, SegChars value) {
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	70fb      	strb	r3, [r7, #3]
	if (pos < 1 || pos > 4)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	dd4a      	ble.n	8000820 <setChar+0xa8>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b04      	cmp	r3, #4
 800078e:	dc47      	bgt.n	8000820 <setChar+0xa8>
		return;

	switch (value) {
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	2b05      	cmp	r3, #5
 8000794:	d845      	bhi.n	8000822 <setChar+0xaa>
 8000796:	a201      	add	r2, pc, #4	@ (adr r2, 800079c <setChar+0x24>)
 8000798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079c:	080007b5 	.word	0x080007b5
 80007a0:	080007c7 	.word	0x080007c7
 80007a4:	080007d9 	.word	0x080007d9
 80007a8:	080007eb 	.word	0x080007eb
 80007ac:	080007fd 	.word	0x080007fd
 80007b0:	0800080f 	.word	0x0800080f
		case __DASH:
			_ledObj->_digitSets[pos - 1] = digitPatterns[10];
 80007b4:	4b1d      	ldr	r3, [pc, #116]	@ (800082c <setChar+0xb4>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	21bf      	movs	r1, #191	@ 0xbf
 80007be:	4413      	add	r3, r2
 80007c0:	460a      	mov	r2, r1
 80007c2:	761a      	strb	r2, [r3, #24]
			  break;
 80007c4:	e02d      	b.n	8000822 <setChar+0xaa>

		case __UNDERSCORE:
			_ledObj->_digitSets[pos - 1] = digitPatterns[11];
 80007c6:	4b19      	ldr	r3, [pc, #100]	@ (800082c <setChar+0xb4>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	21f7      	movs	r1, #247	@ 0xf7
 80007d0:	4413      	add	r3, r2
 80007d2:	460a      	mov	r2, r1
 80007d4:	761a      	strb	r2, [r3, #24]
			break;
 80007d6:	e024      	b.n	8000822 <setChar+0xaa>

		case __C:
			_ledObj->_digitSets[pos - 1] = digitPatterns[12];
 80007d8:	4b14      	ldr	r3, [pc, #80]	@ (800082c <setChar+0xb4>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	21c6      	movs	r1, #198	@ 0xc6
 80007e2:	4413      	add	r3, r2
 80007e4:	460a      	mov	r2, r1
 80007e6:	761a      	strb	r2, [r3, #24]
			break;
 80007e8:	e01b      	b.n	8000822 <setChar+0xaa>

		case __E:
			_ledObj->_digitSets[pos - 1] = digitPatterns[13];
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <setChar+0xb4>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3b01      	subs	r3, #1
 80007f2:	2186      	movs	r1, #134	@ 0x86
 80007f4:	4413      	add	r3, r2
 80007f6:	460a      	mov	r2, r1
 80007f8:	761a      	strb	r2, [r3, #24]
			break;
 80007fa:	e012      	b.n	8000822 <setChar+0xaa>

		case __F:
			_ledObj->_digitSets[pos - 1] = digitPatterns[14];
 80007fc:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <setChar+0xb4>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3b01      	subs	r3, #1
 8000804:	218e      	movs	r1, #142	@ 0x8e
 8000806:	4413      	add	r3, r2
 8000808:	460a      	mov	r2, r1
 800080a:	761a      	strb	r2, [r3, #24]
			break;
 800080c:	e009      	b.n	8000822 <setChar+0xaa>

		case __DEGREE:
			_ledObj->_digitSets[pos - 1] = digitPatterns[15];
 800080e:	4b07      	ldr	r3, [pc, #28]	@ (800082c <setChar+0xb4>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	3b01      	subs	r3, #1
 8000816:	219c      	movs	r1, #156	@ 0x9c
 8000818:	4413      	add	r3, r2
 800081a:	460a      	mov	r2, r1
 800081c:	761a      	strb	r2, [r3, #24]
			break;
 800081e:	e000      	b.n	8000822 <setChar+0xaa>
		return;
 8000820:	bf00      	nop
  }
}
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	20000038 	.word	0x20000038

08000830 <show>:

void show() {
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++)
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	e00f      	b.n	800085c <show+0x2c>
		_ledObj->_digitValues[i] = _ledObj->_digitSets[i];
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <show+0x40>)
 800083e:	6819      	ldr	r1, [r3, #0]
 8000840:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <show+0x40>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	440b      	add	r3, r1
 8000848:	3318      	adds	r3, #24
 800084a:	7819      	ldrb	r1, [r3, #0]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4413      	add	r3, r2
 8000850:	331c      	adds	r3, #28
 8000852:	460a      	mov	r2, r1
 8000854:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3301      	adds	r3, #1
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b03      	cmp	r3, #3
 8000860:	ddec      	ble.n	800083c <show+0xc>
}
 8000862:	bf00      	nop
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000038 	.word	0x20000038

08000874 <loop>:

void loop() {
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0

	for (int i = 0; i < 4; i++) {
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	e03c      	b.n	80008fa <loop+0x86>
		int digit = 0x08 >> i;
 8000880:	2208      	movs	r2, #8
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	fa42 f303 	asr.w	r3, r2, r3
 8000888:	607b      	str	r3, [r7, #4]
		int value = _ledObj->_digitValues[i];
 800088a:	4b20      	ldr	r3, [pc, #128]	@ (800090c <loop+0x98>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	4413      	add	r3, r2
 8000892:	331c      	adds	r3, #28
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	60bb      	str	r3, [r7, #8]

		if (_ledObj->_digitDots & (1 << i))
 8000898:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <loop+0x98>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008a0:	461a      	mov	r2, r3
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	fa42 f303 	asr.w	r3, r2, r3
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d003      	beq.n	80008b8 <loop+0x44>
			value &= 0x7F;
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80008b6:	60bb      	str	r3, [r7, #8]

		shift(value);
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 f827 	bl	8000910 <shift>
		shift(digit);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f822 	bl	8000910 <shift>

		// RCLK LOW and HIGH level settings
		HAL_GPIO_WritePin(_ledObj->rclkPort, _ledObj->rclkPin, RESET);
 80008cc:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <loop+0x98>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	68d8      	ldr	r0, [r3, #12]
 80008d2:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <loop+0x98>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	891b      	ldrh	r3, [r3, #8]
 80008d8:	2200      	movs	r2, #0
 80008da:	4619      	mov	r1, r3
 80008dc:	f001 fa42 	bl	8001d64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(_ledObj->rclkPort, _ledObj->rclkPin, SET);
 80008e0:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <loop+0x98>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	68d8      	ldr	r0, [r3, #12]
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <loop+0x98>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	891b      	ldrh	r3, [r3, #8]
 80008ec:	2201      	movs	r2, #1
 80008ee:	4619      	mov	r1, r3
 80008f0:	f001 fa38 	bl	8001d64 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	3301      	adds	r3, #1
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	ddbf      	ble.n	8000880 <loop+0xc>
		//HAL_Delay(1000);
	}

}
 8000900:	bf00      	nop
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000038 	.word	0x20000038

08000910 <shift>:



void shift(uint8_t value) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 8; i >= 1; i--) {
 800091a:	2308      	movs	r3, #8
 800091c:	73fb      	strb	r3, [r7, #15]
 800091e:	e032      	b.n	8000986 <shift+0x76>
		if (value & 0x80)
 8000920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000924:	2b00      	cmp	r3, #0
 8000926:	da0a      	bge.n	800093e <shift+0x2e>
			HAL_GPIO_WritePin(_ledObj->dioPort, _ledObj->dioPin, SET);
 8000928:	4b1b      	ldr	r3, [pc, #108]	@ (8000998 <shift+0x88>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	6958      	ldr	r0, [r3, #20]
 800092e:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <shift+0x88>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	8a1b      	ldrh	r3, [r3, #16]
 8000934:	2201      	movs	r2, #1
 8000936:	4619      	mov	r1, r3
 8000938:	f001 fa14 	bl	8001d64 <HAL_GPIO_WritePin>
 800093c:	e009      	b.n	8000952 <shift+0x42>
		else
			HAL_GPIO_WritePin(_ledObj->dioPort, _ledObj->dioPin, RESET);
 800093e:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <shift+0x88>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6958      	ldr	r0, [r3, #20]
 8000944:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <shift+0x88>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	8a1b      	ldrh	r3, [r3, #16]
 800094a:	2200      	movs	r2, #0
 800094c:	4619      	mov	r1, r3
 800094e:	f001 fa09 	bl	8001d64 <HAL_GPIO_WritePin>

    value <<= 1;
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(_ledObj->sclkPort, _ledObj->sclkPin, RESET);
 8000958:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <shift+0x88>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	6858      	ldr	r0, [r3, #4]
 800095e:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <shift+0x88>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	2200      	movs	r2, #0
 8000966:	4619      	mov	r1, r3
 8000968:	f001 f9fc 	bl	8001d64 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(_ledObj->sclkPort, _ledObj->sclkPin, SET);
 800096c:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <shift+0x88>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	6858      	ldr	r0, [r3, #4]
 8000972:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <shift+0x88>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	2201      	movs	r2, #1
 800097a:	4619      	mov	r1, r3
 800097c:	f001 f9f2 	bl	8001d64 <HAL_GPIO_WritePin>
	for (uint8_t i = 8; i >= 1; i--) {
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	3b01      	subs	r3, #1
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1c9      	bne.n	8000920 <shift+0x10>
  }
}
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000038 	.word	0x20000038

0800099c <setInt>:



void setInt(int number, bool zeroPadding) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
	if (number > 9999) // trim
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f242 720f 	movw	r2, #9999	@ 0x270f
 80009ae:	4293      	cmp	r3, r2
 80009b0:	dd0d      	ble.n	80009ce <setInt+0x32>
		number %=  10000;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a4a      	ldr	r2, [pc, #296]	@ (8000ae0 <setInt+0x144>)
 80009b6:	fb82 1203 	smull	r1, r2, r2, r3
 80009ba:	1311      	asrs	r1, r2, #12
 80009bc:	17da      	asrs	r2, r3, #31
 80009be:	1a8a      	subs	r2, r1, r2
 80009c0:	f242 7110 	movw	r1, #10000	@ 0x2710
 80009c4:	fb01 f202 	mul.w	r2, r1, r2
 80009c8:	1a9b      	subs	r3, r3, r2
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	e010      	b.n	80009f0 <setInt+0x54>
	else if (number < -999) // trim
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80009d4:	dc0c      	bgt.n	80009f0 <setInt+0x54>
		number %= 1000;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a42      	ldr	r2, [pc, #264]	@ (8000ae4 <setInt+0x148>)
 80009da:	fb82 1203 	smull	r1, r2, r2, r3
 80009de:	1191      	asrs	r1, r2, #6
 80009e0:	17da      	asrs	r2, r3, #31
 80009e2:	1a8a      	subs	r2, r1, r2
 80009e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009e8:	fb01 f202 	mul.w	r2, r1, r2
 80009ec:	1a9b      	subs	r3, r3, r2
 80009ee:	607b      	str	r3, [r7, #4]

	int digitNum = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
	int numberAbs = abs(number);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	bfb8      	it	lt
 80009fa:	425b      	neglt	r3, r3
 80009fc:	613b      	str	r3, [r7, #16]

	if (numberAbs <= 9999 && numberAbs >= 1009)
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000a04:	4293      	cmp	r3, r2
 8000a06:	dc06      	bgt.n	8000a16 <setInt+0x7a>
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	f5b3 7f7c 	cmp.w	r3, #1008	@ 0x3f0
 8000a0e:	dd02      	ble.n	8000a16 <setInt+0x7a>
		digitNum = 4;
 8000a10:	2304      	movs	r3, #4
 8000a12:	61fb      	str	r3, [r7, #28]
 8000a14:	e01a      	b.n	8000a4c <setInt+0xb0>
	else  if (numberAbs <= 999 && numberAbs >= 100)
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a1c:	da05      	bge.n	8000a2a <setInt+0x8e>
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	2b63      	cmp	r3, #99	@ 0x63
 8000a22:	dd02      	ble.n	8000a2a <setInt+0x8e>
		digitNum = 3;
 8000a24:	2303      	movs	r3, #3
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	e010      	b.n	8000a4c <setInt+0xb0>
	else if (numberAbs <= 99 && numberAbs >= 10)
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	2b63      	cmp	r3, #99	@ 0x63
 8000a2e:	dc05      	bgt.n	8000a3c <setInt+0xa0>
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	2b09      	cmp	r3, #9
 8000a34:	dd02      	ble.n	8000a3c <setInt+0xa0>
		digitNum = 2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61fb      	str	r3, [r7, #28]
 8000a3a:	e007      	b.n	8000a4c <setInt+0xb0>
	else if (numberAbs <= 9 && numberAbs >= 0)
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	2b09      	cmp	r3, #9
 8000a40:	dc04      	bgt.n	8000a4c <setInt+0xb0>
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	db01      	blt.n	8000a4c <setInt+0xb0>
		digitNum = 1;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61fb      	str	r3, [r7, #28]

	if (number < 0)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	da02      	bge.n	8000a58 <setInt+0xbc>
		digitNum++;
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3301      	adds	r3, #1
 8000a56:	61fb      	str	r3, [r7, #28]

	int denominator = 10000;
 8000a58:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000a5c:	61bb      	str	r3, [r7, #24]
	for (int pos = 1; pos <= 4; pos++) {
 8000a5e:	2301      	movs	r3, #1
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	e035      	b.n	8000ad0 <setInt+0x134>
		denominator /= 10;
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	4a20      	ldr	r2, [pc, #128]	@ (8000ae8 <setInt+0x14c>)
 8000a68:	fb82 1203 	smull	r1, r2, r2, r3
 8000a6c:	1092      	asrs	r2, r2, #2
 8000a6e:	17db      	asrs	r3, r3, #31
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	61bb      	str	r3, [r7, #24]
		if (!zeroPadding && pos <= (4 - digitNum))
 8000a74:	78fb      	ldrb	r3, [r7, #3]
 8000a76:	f083 0301 	eor.w	r3, r3, #1
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d005      	beq.n	8000a8c <setInt+0xf0>
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	f1c3 0304 	rsb	r3, r3, #4
 8000a86:	697a      	ldr	r2, [r7, #20]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dd1d      	ble.n	8000ac8 <setInt+0x12c>
			continue;

		if (number < 0) {
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	da07      	bge.n	8000aa2 <setInt+0x106>
			setChar(pos, __DASH); // set - at the 1st digit
 8000a92:	2100      	movs	r1, #0
 8000a94:	6978      	ldr	r0, [r7, #20]
 8000a96:	f7ff fe6f 	bl	8000778 <setChar>
			number *= -1;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	425b      	negs	r3, r3
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	e013      	b.n	8000aca <setInt+0x12e>
		} else {
			int digit = number / denominator;
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000aaa:	60fb      	str	r3, [r7, #12]
			number = number % denominator;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	fb93 f2f2 	sdiv	r2, r3, r2
 8000ab4:	69b9      	ldr	r1, [r7, #24]
 8000ab6:	fb01 f202 	mul.w	r2, r1, r2
 8000aba:	1a9b      	subs	r3, r3, r2
 8000abc:	607b      	str	r3, [r7, #4]
			setNumber(pos, digit);
 8000abe:	68f9      	ldr	r1, [r7, #12]
 8000ac0:	6978      	ldr	r0, [r7, #20]
 8000ac2:	f7ff fe31 	bl	8000728 <setNumber>
 8000ac6:	e000      	b.n	8000aca <setInt+0x12e>
			continue;
 8000ac8:	bf00      	nop
	for (int pos = 1; pos <= 4; pos++) {
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	ddc6      	ble.n	8000a64 <setInt+0xc8>
		}
	}
}
 8000ad6:	bf00      	nop
 8000ad8:	bf00      	nop
 8000ada:	3720      	adds	r7, #32
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	68db8bad 	.word	0x68db8bad
 8000ae4:	10624dd3 	.word	0x10624dd3
 8000ae8:	66666667 	.word	0x66666667

08000aec <printInt>:

void printInt(int number, bool zeroPadding) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	70fb      	strb	r3, [r7, #3]
	clear();
 8000af8:	f7ff fdf6 	bl	80006e8 <clear>
	setInt(number, zeroPadding);
 8000afc:	78fb      	ldrb	r3, [r7, #3]
 8000afe:	4619      	mov	r1, r3
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ff4b 	bl	800099c <setInt>
	show(); // show on the display
 8000b06:	f7ff fe93 	bl	8000830 <show>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <CS_Select>:
#define NRF24_CSN_PIN    GPIO_PIN_0



void CS_Select (void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	4802      	ldr	r0, [pc, #8]	@ (8000b28 <CS_Select+0x14>)
 8000b1e:	f001 f921 	bl	8001d64 <HAL_GPIO_WritePin>
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40010c00 	.word	0x40010c00

08000b2c <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	2101      	movs	r1, #1
 8000b34:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <CS_UnSelect+0x14>)
 8000b36:	f001 f915 	bl	8001d64 <HAL_GPIO_WritePin>
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40010c00 	.word	0x40010c00

08000b44 <CE_Enable>:


void CE_Enable (void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2110      	movs	r1, #16
 8000b4c:	4802      	ldr	r0, [pc, #8]	@ (8000b58 <CE_Enable+0x14>)
 8000b4e:	f001 f909 	bl	8001d64 <HAL_GPIO_WritePin>
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40010800 	.word	0x40010800

08000b5c <CE_Disable>:

void CE_Disable (void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2110      	movs	r1, #16
 8000b64:	4802      	ldr	r0, [pc, #8]	@ (8000b70 <CE_Disable+0x14>)
 8000b66:	f001 f8fd 	bl	8001d64 <HAL_GPIO_WritePin>
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40010800 	.word	0x40010800

08000b74 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	71fb      	strb	r3, [r7, #7]
 8000b80:	4613      	mov	r3, r2
 8000b82:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	f043 0320 	orr.w	r3, r3, #32
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8000b8e:	79bb      	ldrb	r3, [r7, #6]
 8000b90:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000b92:	f7ff ffbf 	bl	8000b14 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8000b96:	f107 010c 	add.w	r1, r7, #12
 8000b9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	4804      	ldr	r0, [pc, #16]	@ (8000bb4 <nrf24_WriteReg+0x40>)
 8000ba2:	f002 fe15 	bl	80037d0 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000ba6:	f7ff ffc1 	bl	8000b2c <CS_UnSelect>
}
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000090 	.word	0x20000090

08000bb8 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
 8000bc4:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	f043 0320 	orr.w	r3, r3, #32
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000bd0:	f7ff ffa0 	bl	8000b14 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8000bd4:	f107 0114 	add.w	r1, r7, #20
 8000bd8:	2364      	movs	r3, #100	@ 0x64
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4808      	ldr	r0, [pc, #32]	@ (8000c00 <nrf24_WriteRegMulti+0x48>)
 8000bde:	f002 fdf7 	bl	80037d0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bea:	68b9      	ldr	r1, [r7, #8]
 8000bec:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <nrf24_WriteRegMulti+0x48>)
 8000bee:	f002 fdef 	bl	80037d0 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000bf2:	f7ff ff9b 	bl	8000b2c <CS_UnSelect>
}
 8000bf6:	bf00      	nop
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000090 	.word	0x20000090

08000c04 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000c12:	f7ff ff7f 	bl	8000b14 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000c16:	1df9      	adds	r1, r7, #7
 8000c18:	2364      	movs	r3, #100	@ 0x64
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4808      	ldr	r0, [pc, #32]	@ (8000c40 <nrf24_ReadReg+0x3c>)
 8000c1e:	f002 fdd7 	bl	80037d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000c22:	f107 010f 	add.w	r1, r7, #15
 8000c26:	2364      	movs	r3, #100	@ 0x64
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <nrf24_ReadReg+0x3c>)
 8000c2c:	f002 ff13 	bl	8003a56 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000c30:	f7ff ff7c 	bl	8000b2c <CS_UnSelect>

	return data;
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000090 	.word	0x20000090

08000c44 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000c52:	f7ff ff5f 	bl	8000b14 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000c56:	f107 010f 	add.w	r1, r7, #15
 8000c5a:	2364      	movs	r3, #100	@ 0x64
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4808      	ldr	r0, [pc, #32]	@ (8000c80 <nrf24_ReadReg_Multi+0x3c>)
 8000c60:	f002 fdb6 	bl	80037d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <nrf24_ReadReg_Multi+0x3c>)
 8000c70:	f002 fef1 	bl	8003a56 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000c74:	f7ff ff5a 	bl	8000b2c <CS_UnSelect>
}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000090 	.word	0x20000090

08000c84 <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000c8e:	f7ff ff41 	bl	8000b14 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000c92:	1df9      	adds	r1, r7, #7
 8000c94:	2364      	movs	r3, #100	@ 0x64
 8000c96:	2201      	movs	r2, #1
 8000c98:	4804      	ldr	r0, [pc, #16]	@ (8000cac <nrfsendCmd+0x28>)
 8000c9a:	f002 fd99 	bl	80037d0 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000c9e:	f7ff ff45 	bl	8000b2c <CS_UnSelect>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000090 	.word	0x20000090

08000cb0 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2b07      	cmp	r3, #7
 8000cbe:	d104      	bne.n	8000cca <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2007      	movs	r0, #7
 8000cc4:	f7ff ff56 	bl	8000b74 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000cc8:	e090      	b.n	8000dec <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b17      	cmp	r3, #23
 8000cce:	d104      	bne.n	8000cda <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000cd0:	2111      	movs	r1, #17
 8000cd2:	2017      	movs	r0, #23
 8000cd4:	f7ff ff4e 	bl	8000b74 <nrf24_WriteReg>
}
 8000cd8:	e088      	b.n	8000dec <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8000cda:	2108      	movs	r1, #8
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff ff49 	bl	8000b74 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000ce2:	213f      	movs	r1, #63	@ 0x3f
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f7ff ff45 	bl	8000b74 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8000cea:	2103      	movs	r1, #3
 8000cec:	2002      	movs	r0, #2
 8000cee:	f7ff ff41 	bl	8000b74 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000cf2:	2103      	movs	r1, #3
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f7ff ff3d 	bl	8000b74 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8000cfa:	2103      	movs	r1, #3
 8000cfc:	2004      	movs	r0, #4
 8000cfe:	f7ff ff39 	bl	8000b74 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8000d02:	2102      	movs	r1, #2
 8000d04:	2005      	movs	r0, #5
 8000d06:	f7ff ff35 	bl	8000b74 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000d0a:	210e      	movs	r1, #14
 8000d0c:	2006      	movs	r0, #6
 8000d0e:	f7ff ff31 	bl	8000b74 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8000d12:	2100      	movs	r1, #0
 8000d14:	2007      	movs	r0, #7
 8000d16:	f7ff ff2d 	bl	8000b74 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2008      	movs	r0, #8
 8000d1e:	f7ff ff29 	bl	8000b74 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000d22:	2100      	movs	r1, #0
 8000d24:	2009      	movs	r0, #9
 8000d26:	f7ff ff25 	bl	8000b74 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000d2a:	4a32      	ldr	r2, [pc, #200]	@ (8000df4 <nrf24_reset+0x144>)
 8000d2c:	f107 0318 	add.w	r3, r7, #24
 8000d30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d34:	6018      	str	r0, [r3, #0]
 8000d36:	3304      	adds	r3, #4
 8000d38:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000d3a:	f107 0318 	add.w	r3, r7, #24
 8000d3e:	2205      	movs	r2, #5
 8000d40:	4619      	mov	r1, r3
 8000d42:	200a      	movs	r0, #10
 8000d44:	f7ff ff38 	bl	8000bb8 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000d48:	4a2b      	ldr	r2, [pc, #172]	@ (8000df8 <nrf24_reset+0x148>)
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d52:	6018      	str	r0, [r3, #0]
 8000d54:	3304      	adds	r3, #4
 8000d56:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	2205      	movs	r2, #5
 8000d5e:	4619      	mov	r1, r3
 8000d60:	200b      	movs	r0, #11
 8000d62:	f7ff ff29 	bl	8000bb8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000d66:	21c3      	movs	r1, #195	@ 0xc3
 8000d68:	200c      	movs	r0, #12
 8000d6a:	f7ff ff03 	bl	8000b74 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8000d6e:	21c4      	movs	r1, #196	@ 0xc4
 8000d70:	200d      	movs	r0, #13
 8000d72:	f7ff feff 	bl	8000b74 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000d76:	21c5      	movs	r1, #197	@ 0xc5
 8000d78:	200e      	movs	r0, #14
 8000d7a:	f7ff fefb 	bl	8000b74 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8000d7e:	21c6      	movs	r1, #198	@ 0xc6
 8000d80:	200f      	movs	r0, #15
 8000d82:	f7ff fef7 	bl	8000b74 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000d86:	4a1b      	ldr	r2, [pc, #108]	@ (8000df4 <nrf24_reset+0x144>)
 8000d88:	f107 0308 	add.w	r3, r7, #8
 8000d8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d90:	6018      	str	r0, [r3, #0]
 8000d92:	3304      	adds	r3, #4
 8000d94:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	2205      	movs	r2, #5
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2010      	movs	r0, #16
 8000da0:	f7ff ff0a 	bl	8000bb8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000da4:	2100      	movs	r1, #0
 8000da6:	2011      	movs	r0, #17
 8000da8:	f7ff fee4 	bl	8000b74 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000dac:	2100      	movs	r1, #0
 8000dae:	2012      	movs	r0, #18
 8000db0:	f7ff fee0 	bl	8000b74 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000db4:	2100      	movs	r1, #0
 8000db6:	2013      	movs	r0, #19
 8000db8:	f7ff fedc 	bl	8000b74 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2014      	movs	r0, #20
 8000dc0:	f7ff fed8 	bl	8000b74 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2015      	movs	r0, #21
 8000dc8:	f7ff fed4 	bl	8000b74 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2016      	movs	r0, #22
 8000dd0:	f7ff fed0 	bl	8000b74 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000dd4:	2111      	movs	r1, #17
 8000dd6:	2017      	movs	r0, #23
 8000dd8:	f7ff fecc 	bl	8000b74 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8000ddc:	2100      	movs	r1, #0
 8000dde:	201c      	movs	r0, #28
 8000de0:	f7ff fec8 	bl	8000b74 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8000de4:	2100      	movs	r1, #0
 8000de6:	201d      	movs	r0, #29
 8000de8:	f7ff fec4 	bl	8000b74 <nrf24_WriteReg>
}
 8000dec:	bf00      	nop
 8000dee:	3720      	adds	r7, #32
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	080072d8 	.word	0x080072d8
 8000df8:	080072e0 	.word	0x080072e0

08000dfc <NRF24_Init>:




void NRF24_Init (void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8000e00:	f7ff feac 	bl	8000b5c <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff ff53 	bl	8000cb0 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff feb1 	bl	8000b74 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8000e12:	2100      	movs	r1, #0
 8000e14:	2001      	movs	r0, #1
 8000e16:	f7ff fead 	bl	8000b74 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f7ff fea9 	bl	8000b74 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8000e22:	2103      	movs	r1, #3
 8000e24:	2003      	movs	r0, #3
 8000e26:	f7ff fea5 	bl	8000b74 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2004      	movs	r0, #4
 8000e2e:	f7ff fea1 	bl	8000b74 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8000e32:	2100      	movs	r1, #0
 8000e34:	2005      	movs	r0, #5
 8000e36:	f7ff fe9d 	bl	8000b74 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8000e3a:	210e      	movs	r1, #14
 8000e3c:	2006      	movs	r0, #6
 8000e3e:	f7ff fe99 	bl	8000b74 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000e42:	f7ff fe7f 	bl	8000b44 <CE_Enable>

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	460b      	mov	r3, r1
 8000e54:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8000e56:	f7ff fe81 	bl	8000b5c <CE_Disable>

	nrf24_reset (STATUS);
 8000e5a:	2007      	movs	r0, #7
 8000e5c:	f7ff ff28 	bl	8000cb0 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000e60:	78fb      	ldrb	r3, [r7, #3]
 8000e62:	4619      	mov	r1, r3
 8000e64:	2005      	movs	r0, #5
 8000e66:	f7ff fe85 	bl	8000b74 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 8000e6a:	2002      	movs	r0, #2
 8000e6c:	f7ff feca 	bl	8000c04 <nrf24_ReadReg>
 8000e70:	4603      	mov	r3, r0
 8000e72:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	2002      	movs	r0, #2
 8000e82:	f7ff fe77 	bl	8000b74 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8000e86:	2205      	movs	r2, #5
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	200b      	movs	r0, #11
 8000e8c:	f7ff fe94 	bl	8000bb8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8000e90:	21ee      	movs	r1, #238	@ 0xee
 8000e92:	200c      	movs	r0, #12
 8000e94:	f7ff fe6e 	bl	8000b74 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8000e98:	2120      	movs	r1, #32
 8000e9a:	2013      	movs	r0, #19
 8000e9c:	f7ff fe6a 	bl	8000b74 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f7ff feaf 	bl	8000c04 <nrf24_ReadReg>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 8000eaa:	7bbb      	ldrb	r3, [r7, #14]
 8000eac:	f043 0303 	orr.w	r3, r3, #3
 8000eb0:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 8000eb2:	7bbb      	ldrb	r3, [r7, #14]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff fe5c 	bl	8000b74 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000ebc:	f7ff fe42 	bl	8000b44 <CE_Enable>
}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

	uint8_t status = nrf24_ReadReg(STATUS);
 8000ed0:	2007      	movs	r0, #7
 8000ed2:	f7ff fe97 	bl	8000c04 <nrf24_ReadReg>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d00b      	beq.n	8000efc <isDataAvailable+0x34>
 8000ee4:	7bfa      	ldrb	r2, [r7, #15]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d005      	beq.n	8000efc <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8000ef0:	2140      	movs	r1, #64	@ 0x40
 8000ef2:	2007      	movs	r0, #7
 8000ef4:	f7ff fe3e 	bl	8000b74 <nrf24_WriteReg>

		return 1;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e000      	b.n	8000efe <isDataAvailable+0x36>
	}

	return 0;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8000f14:	f7ff fdfe 	bl	8000b14 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8000f18:	2361      	movs	r3, #97	@ 0x61
 8000f1a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8000f1c:	f107 010f 	add.w	r1, r7, #15
 8000f20:	2364      	movs	r3, #100	@ 0x64
 8000f22:	2201      	movs	r2, #1
 8000f24:	480c      	ldr	r0, [pc, #48]	@ (8000f58 <NRF24_Receive+0x50>)
 8000f26:	f002 fc53 	bl	80037d0 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8000f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2e:	2220      	movs	r2, #32
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	4809      	ldr	r0, [pc, #36]	@ (8000f58 <NRF24_Receive+0x50>)
 8000f34:	f002 fd8f 	bl	8003a56 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8000f38:	f7ff fdf8 	bl	8000b2c <CS_UnSelect>

	HAL_Delay(1);
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f000 fc89 	bl	8001854 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8000f42:	23e2      	movs	r3, #226	@ 0xe2
 8000f44:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fe9b 	bl	8000c84 <nrfsendCmd>
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000090 	.word	0x20000090

08000f5c <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	e00c      	b.n	8000f84 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	b2d9      	uxtb	r1, r3
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	18d4      	adds	r4, r2, r3
 8000f74:	4608      	mov	r0, r1
 8000f76:	f7ff fe45 	bl	8000c04 <nrf24_ReadReg>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3301      	adds	r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b09      	cmp	r3, #9
 8000f88:	ddef      	ble.n	8000f6a <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	330a      	adds	r3, #10
 8000f8e:	2205      	movs	r2, #5
 8000f90:	4619      	mov	r1, r3
 8000f92:	200a      	movs	r0, #10
 8000f94:	f7ff fe56 	bl	8000c44 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	330f      	adds	r3, #15
 8000f9c:	2205      	movs	r2, #5
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	200b      	movs	r0, #11
 8000fa2:	f7ff fe4f 	bl	8000c44 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f103 0414 	add.w	r4, r3, #20
 8000fac:	200c      	movs	r0, #12
 8000fae:	f7ff fe29 	bl	8000c04 <nrf24_ReadReg>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f103 0415 	add.w	r4, r3, #21
 8000fbc:	200d      	movs	r0, #13
 8000fbe:	f7ff fe21 	bl	8000c04 <nrf24_ReadReg>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f103 0416 	add.w	r4, r3, #22
 8000fcc:	200e      	movs	r0, #14
 8000fce:	f7ff fe19 	bl	8000c04 <nrf24_ReadReg>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f103 0417 	add.w	r4, r3, #23
 8000fdc:	200f      	movs	r0, #15
 8000fde:	f7ff fe11 	bl	8000c04 <nrf24_ReadReg>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3318      	adds	r3, #24
 8000fea:	2205      	movs	r2, #5
 8000fec:	4619      	mov	r1, r3
 8000fee:	200a      	movs	r0, #10
 8000ff0:	f7ff fe28 	bl	8000c44 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 8000ff4:	231d      	movs	r3, #29
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	e00e      	b.n	8001018 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	3b0c      	subs	r3, #12
 8001000:	b2d9      	uxtb	r1, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	18d4      	adds	r4, r2, r3
 8001008:	4608      	mov	r0, r1
 800100a:	f7ff fdfb 	bl	8000c04 <nrf24_ReadReg>
 800100e:	4603      	mov	r3, r0
 8001010:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	3301      	adds	r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2b25      	cmp	r3, #37	@ 0x25
 800101c:	dded      	ble.n	8000ffa <NRF24_ReadAll+0x9e>
	}

}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	bd90      	pop	{r4, r7, pc}

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102e:	f000 fbdf 	bl	80017f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001032:	f000 f865 	bl	8001100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001036:	f000 f937 	bl	80012a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800103a:	f000 f8d5 	bl	80011e8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800103e:	f000 f909 	bl	8001254 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001042:	f000 f8a3 	bl	800118c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init();
 8001046:	f7ff fed9 	bl	8000dfc <NRF24_Init>

  NRF24_RxMode(RxAddress, 10);
 800104a:	210a      	movs	r1, #10
 800104c:	481e      	ldr	r0, [pc, #120]	@ (80010c8 <main+0xa0>)
 800104e:	f7ff fefc 	bl	8000e4a <NRF24_RxMode>

  NRF24_ReadAll(data);
 8001052:	481e      	ldr	r0, [pc, #120]	@ (80010cc <main+0xa4>)
 8001054:	f7ff ff82 	bl	8000f5c <NRF24_ReadAll>

  setUp(&ledStruct, GPIO_PIN_11, GPIOA, GPIO_PIN_10, GPIOA, GPIO_PIN_9, GPIOA);
 8001058:	4b1d      	ldr	r3, [pc, #116]	@ (80010d0 <main+0xa8>)
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	4b1b      	ldr	r3, [pc, #108]	@ (80010d0 <main+0xa8>)
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800106a:	4a19      	ldr	r2, [pc, #100]	@ (80010d0 <main+0xa8>)
 800106c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001070:	4818      	ldr	r0, [pc, #96]	@ (80010d4 <main+0xac>)
 8001072:	f7ff faf1 	bl	8000658 <setUp>

  counter = (int)EEPROM_Read_NUM (6, 0);
 8001076:	2100      	movs	r1, #0
 8001078:	2006      	movs	r0, #6
 800107a:	f7ff fa71 	bl	8000560 <EEPROM_Read_NUM>
 800107e:	4603      	mov	r3, r0
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff f973 	bl	800036c <__aeabi_f2iz>
 8001086:	4603      	mov	r3, r0
 8001088:	4a13      	ldr	r2, [pc, #76]	@ (80010d8 <main+0xb0>)
 800108a:	6013      	str	r3, [r2, #0]


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800108c:	f003 fbcc 	bl	8004828 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001090:	4a12      	ldr	r2, [pc, #72]	@ (80010dc <main+0xb4>)
 8001092:	2100      	movs	r1, #0
 8001094:	4812      	ldr	r0, [pc, #72]	@ (80010e0 <main+0xb8>)
 8001096:	f003 fc2d 	bl	80048f4 <osThreadNew>
 800109a:	4603      	mov	r3, r0
 800109c:	4a11      	ldr	r2, [pc, #68]	@ (80010e4 <main+0xbc>)
 800109e:	6013      	str	r3, [r2, #0]

  /* creation of myReciveTask */
  myReciveTaskHandle = osThreadNew(StartReciveTask, NULL, &myReciveTask_attributes);
 80010a0:	4a11      	ldr	r2, [pc, #68]	@ (80010e8 <main+0xc0>)
 80010a2:	2100      	movs	r1, #0
 80010a4:	4811      	ldr	r0, [pc, #68]	@ (80010ec <main+0xc4>)
 80010a6:	f003 fc25 	bl	80048f4 <osThreadNew>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a10      	ldr	r2, [pc, #64]	@ (80010f0 <main+0xc8>)
 80010ae:	6013      	str	r3, [r2, #0]

  /* creation of myLoopTask */
  myLoopTaskHandle = osThreadNew(StartLoopTask, NULL, &myLoopTask_attributes);
 80010b0:	4a10      	ldr	r2, [pc, #64]	@ (80010f4 <main+0xcc>)
 80010b2:	2100      	movs	r1, #0
 80010b4:	4810      	ldr	r0, [pc, #64]	@ (80010f8 <main+0xd0>)
 80010b6:	f003 fc1d 	bl	80048f4 <osThreadNew>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a0f      	ldr	r2, [pc, #60]	@ (80010fc <main+0xd4>)
 80010be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010c0:	f003 fbe4 	bl	800488c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <main+0x9c>
 80010c8:	20000000 	.word	0x20000000
 80010cc:	20000184 	.word	0x20000184
 80010d0:	40010800 	.word	0x40010800
 80010d4:	2000013c 	.word	0x2000013c
 80010d8:	20000160 	.word	0x20000160
 80010dc:	08007338 	.word	0x08007338
 80010e0:	08001385 	.word	0x08001385
 80010e4:	20000130 	.word	0x20000130
 80010e8:	0800735c 	.word	0x0800735c
 80010ec:	08001395 	.word	0x08001395
 80010f0:	20000134 	.word	0x20000134
 80010f4:	08007380 	.word	0x08007380
 80010f8:	080013e9 	.word	0x080013e9
 80010fc:	20000138 	.word	0x20000138

08001100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b090      	sub	sp, #64	@ 0x40
 8001104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001106:	f107 0318 	add.w	r3, r7, #24
 800110a:	2228      	movs	r2, #40	@ 0x28
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f006 f89c 	bl	800724c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001122:	2301      	movs	r3, #1
 8001124:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001126:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800112a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001130:	2301      	movs	r3, #1
 8001132:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001134:	2302      	movs	r3, #2
 8001136:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001138:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800113c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800113e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001142:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	4618      	mov	r0, r3
 800114a:	f001 fe7d 	bl	8002e48 <HAL_RCC_OscConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001154:	f000 f96e 	bl	8001434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001158:	230f      	movs	r3, #15
 800115a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115c:	2302      	movs	r3, #2
 800115e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001164:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001168:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2102      	movs	r1, #2
 8001172:	4618      	mov	r0, r3
 8001174:	f002 f8ea 	bl	800334c <HAL_RCC_ClockConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800117e:	f000 f959 	bl	8001434 <Error_Handler>
  }
}
 8001182:	bf00      	nop
 8001184:	3740      	adds	r7, #64	@ 0x40
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <MX_I2C1_Init+0x50>)
 8001192:	4a13      	ldr	r2, [pc, #76]	@ (80011e0 <MX_I2C1_Init+0x54>)
 8001194:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001196:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_I2C1_Init+0x50>)
 8001198:	4a12      	ldr	r2, [pc, #72]	@ (80011e4 <MX_I2C1_Init+0x58>)
 800119a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <MX_I2C1_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_I2C1_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_I2C1_Init+0x50>)
 80011aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	@ (80011dc <MX_I2C1_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_I2C1_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <MX_I2C1_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c2:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_I2C1_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011c8:	4804      	ldr	r0, [pc, #16]	@ (80011dc <MX_I2C1_Init+0x50>)
 80011ca:	f000 fde3 	bl	8001d94 <HAL_I2C_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011d4:	f000 f92e 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2000003c 	.word	0x2000003c
 80011e0:	40005400 	.word	0x40005400
 80011e4:	000186a0 	.word	0x000186a0

080011e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011ec:	4b17      	ldr	r3, [pc, #92]	@ (800124c <MX_SPI1_Init+0x64>)
 80011ee:	4a18      	ldr	r2, [pc, #96]	@ (8001250 <MX_SPI1_Init+0x68>)
 80011f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011f2:	4b16      	ldr	r3, [pc, #88]	@ (800124c <MX_SPI1_Init+0x64>)
 80011f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011fa:	4b14      	ldr	r3, [pc, #80]	@ (800124c <MX_SPI1_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <MX_SPI1_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001206:	4b11      	ldr	r3, [pc, #68]	@ (800124c <MX_SPI1_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800120c:	4b0f      	ldr	r3, [pc, #60]	@ (800124c <MX_SPI1_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001212:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <MX_SPI1_Init+0x64>)
 8001214:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001218:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800121a:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <MX_SPI1_Init+0x64>)
 800121c:	2218      	movs	r2, #24
 800121e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001220:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <MX_SPI1_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <MX_SPI1_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800122c:	4b07      	ldr	r3, [pc, #28]	@ (800124c <MX_SPI1_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001232:	4b06      	ldr	r3, [pc, #24]	@ (800124c <MX_SPI1_Init+0x64>)
 8001234:	220a      	movs	r2, #10
 8001236:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001238:	4804      	ldr	r0, [pc, #16]	@ (800124c <MX_SPI1_Init+0x64>)
 800123a:	f002 fa45 	bl	80036c8 <HAL_SPI_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001244:	f000 f8f6 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000090 	.word	0x20000090
 8001250:	40013000 	.word	0x40013000

08001254 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 800125a:	4a12      	ldr	r2, [pc, #72]	@ (80012a4 <MX_USART2_UART_Init+0x50>)
 800125c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800125e:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001260:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001264:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001266:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800126c:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001272:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001278:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 800127a:	220c      	movs	r2, #12
 800127c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127e:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 800128c:	f003 f9ee 	bl	800466c <HAL_UART_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001296:	f000 f8cd 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200000e8 	.word	0x200000e8
 80012a4:	40004400 	.word	0x40004400

080012a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001378 <MX_GPIO_Init+0xd0>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a2d      	ldr	r2, [pc, #180]	@ (8001378 <MX_GPIO_Init+0xd0>)
 80012c2:	f043 0320 	orr.w	r3, r3, #32
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001378 <MX_GPIO_Init+0xd0>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0320 	and.w	r3, r3, #32
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	4b28      	ldr	r3, [pc, #160]	@ (8001378 <MX_GPIO_Init+0xd0>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a27      	ldr	r2, [pc, #156]	@ (8001378 <MX_GPIO_Init+0xd0>)
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b25      	ldr	r3, [pc, #148]	@ (8001378 <MX_GPIO_Init+0xd0>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ec:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <MX_GPIO_Init+0xd0>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a21      	ldr	r2, [pc, #132]	@ (8001378 <MX_GPIO_Init+0xd0>)
 80012f2:	f043 0308 	orr.w	r3, r3, #8
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <MX_GPIO_Init+0xd0>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800130a:	481c      	ldr	r0, [pc, #112]	@ (800137c <MX_GPIO_Init+0xd4>)
 800130c:	f000 fd2a 	bl	8001d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	2101      	movs	r1, #1
 8001314:	481a      	ldr	r0, [pc, #104]	@ (8001380 <MX_GPIO_Init+0xd8>)
 8001316:	f000 fd25 	bl	8001d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800131a:	2310      	movs	r3, #16
 800131c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2302      	movs	r3, #2
 8001328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	4619      	mov	r1, r3
 8001330:	4812      	ldr	r0, [pc, #72]	@ (800137c <MX_GPIO_Init+0xd4>)
 8001332:	f000 fb93 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001336:	2301      	movs	r3, #1
 8001338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2302      	movs	r3, #2
 8001344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	4619      	mov	r1, r3
 800134c:	480c      	ldr	r0, [pc, #48]	@ (8001380 <MX_GPIO_Init+0xd8>)
 800134e:	f000 fb85 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001352:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8001356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800135c:	2302      	movs	r3, #2
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2302      	movs	r3, #2
 8001362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	4619      	mov	r1, r3
 800136a:	4804      	ldr	r0, [pc, #16]	@ (800137c <MX_GPIO_Init+0xd4>)
 800136c:	f000 fb76 	bl	8001a5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001370:	bf00      	nop
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40021000 	.word	0x40021000
 800137c:	40010800 	.word	0x40010800
 8001380:	40010c00 	.word	0x40010c00

08001384 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800138c:	2001      	movs	r0, #1
 800138e:	f003 fb5b 	bl	8004a48 <osDelay>
 8001392:	e7fb      	b.n	800138c <StartDefaultTask+0x8>

08001394 <StartReciveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReciveTask */
void StartReciveTask(void *argument)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReciveTask */
  /* Infinite loop */
  for(;;)
  {
	  if (isDataAvailable(2) == 1)
 800139c:	2002      	movs	r0, #2
 800139e:	f7ff fd93 	bl	8000ec8 <isDataAvailable>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d116      	bne.n	80013d6 <StartReciveTask+0x42>
	  	 	  	  {
	  	 		  	 // Work with Recive data
	  	 	  		 NRF24_Receive(RxData);
 80013a8:	480d      	ldr	r0, [pc, #52]	@ (80013e0 <StartReciveTask+0x4c>)
 80013aa:	f7ff fdad 	bl	8000f08 <NRF24_Receive>
	  //	         HAL_UART_Transmit(&huart2, RxData, strlen((char *)RxData), 1000); if you want see on UART data
	  	 	  		 EEPROM_Write_NUM (6, 0, (float)counter++);
 80013ae:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <StartReciveTask+0x50>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	490b      	ldr	r1, [pc, #44]	@ (80013e4 <StartReciveTask+0x50>)
 80013b6:	600a      	str	r2, [r1, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7fe ff83 	bl	80002c4 <__aeabi_i2f>
 80013be:	4603      	mov	r3, r0
 80013c0:	461a      	mov	r2, r3
 80013c2:	2100      	movs	r1, #0
 80013c4:	2006      	movs	r0, #6
 80013c6:	f7ff f8b3 	bl	8000530 <EEPROM_Write_NUM>
	  	 	  	     printInt(counter, false);
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <StartReciveTask+0x50>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fb8b 	bl	8000aec <printInt>
	  	 	  	  }

    osDelay(10);
 80013d6:	200a      	movs	r0, #10
 80013d8:	f003 fb36 	bl	8004a48 <osDelay>
	  if (isDataAvailable(2) == 1)
 80013dc:	e7de      	b.n	800139c <StartReciveTask+0x8>
 80013de:	bf00      	nop
 80013e0:	20000164 	.word	0x20000164
 80013e4:	20000160 	.word	0x20000160

080013e8 <StartLoopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoopTask */
void StartLoopTask(void *argument)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLoopTask */
  /* Infinite loop */
  for(;;)
  {

	  for(int i = 0;i < 1000; i++) loop();
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	e004      	b.n	8001400 <StartLoopTask+0x18>
 80013f6:	f7ff fa3d 	bl	8000874 <loop>
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	3301      	adds	r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001406:	dbf6      	blt.n	80013f6 <StartLoopTask+0xe>

    osDelay(1);
 8001408:	2001      	movs	r0, #1
 800140a:	f003 fb1d 	bl	8004a48 <osDelay>
	  for(int i = 0;i < 1000; i++) loop();
 800140e:	e7ef      	b.n	80013f0 <StartLoopTask+0x8>

08001410 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a04      	ldr	r2, [pc, #16]	@ (8001430 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d101      	bne.n	8001426 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001422:	f000 f9fb 	bl	800181c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40000800 	.word	0x40000800

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <Error_Handler+0x8>

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001446:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <HAL_MspInit+0x68>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	4a17      	ldr	r2, [pc, #92]	@ (80014a8 <HAL_MspInit+0x68>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6193      	str	r3, [r2, #24]
 8001452:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <HAL_MspInit+0x68>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <HAL_MspInit+0x68>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	4a11      	ldr	r2, [pc, #68]	@ (80014a8 <HAL_MspInit+0x68>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001468:	61d3      	str	r3, [r2, #28]
 800146a:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <HAL_MspInit+0x68>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	210f      	movs	r1, #15
 800147a:	f06f 0001 	mvn.w	r0, #1
 800147e:	f000 fac2 	bl	8001a06 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001482:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <HAL_MspInit+0x6c>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	4a04      	ldr	r2, [pc, #16]	@ (80014ac <HAL_MspInit+0x6c>)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40010000 	.word	0x40010000

080014b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a15      	ldr	r2, [pc, #84]	@ (8001520 <HAL_I2C_MspInit+0x70>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d123      	bne.n	8001518 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d0:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <HAL_I2C_MspInit+0x74>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a13      	ldr	r2, [pc, #76]	@ (8001524 <HAL_I2C_MspInit+0x74>)
 80014d6:	f043 0308 	orr.w	r3, r3, #8
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <HAL_I2C_MspInit+0x74>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014e8:	23c0      	movs	r3, #192	@ 0xc0
 80014ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ec:	2312      	movs	r3, #18
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	4619      	mov	r1, r3
 80014fa:	480b      	ldr	r0, [pc, #44]	@ (8001528 <HAL_I2C_MspInit+0x78>)
 80014fc:	f000 faae 	bl	8001a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001500:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <HAL_I2C_MspInit+0x74>)
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	4a07      	ldr	r2, [pc, #28]	@ (8001524 <HAL_I2C_MspInit+0x74>)
 8001506:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800150a:	61d3      	str	r3, [r2, #28]
 800150c:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <HAL_I2C_MspInit+0x74>)
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001518:	bf00      	nop
 800151a:	3720      	adds	r7, #32
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40005400 	.word	0x40005400
 8001524:	40021000 	.word	0x40021000
 8001528:	40010c00 	.word	0x40010c00

0800152c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a1b      	ldr	r2, [pc, #108]	@ (80015b4 <HAL_SPI_MspInit+0x88>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d12f      	bne.n	80015ac <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800154c:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <HAL_SPI_MspInit+0x8c>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a19      	ldr	r2, [pc, #100]	@ (80015b8 <HAL_SPI_MspInit+0x8c>)
 8001552:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <HAL_SPI_MspInit+0x8c>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <HAL_SPI_MspInit+0x8c>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	4a13      	ldr	r2, [pc, #76]	@ (80015b8 <HAL_SPI_MspInit+0x8c>)
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	6193      	str	r3, [r2, #24]
 8001570:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <HAL_SPI_MspInit+0x8c>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800157c:	23a0      	movs	r3, #160	@ 0xa0
 800157e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	4619      	mov	r1, r3
 800158e:	480b      	ldr	r0, [pc, #44]	@ (80015bc <HAL_SPI_MspInit+0x90>)
 8001590:	f000 fa64 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001594:	2340      	movs	r3, #64	@ 0x40
 8001596:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	4619      	mov	r1, r3
 80015a6:	4805      	ldr	r0, [pc, #20]	@ (80015bc <HAL_SPI_MspInit+0x90>)
 80015a8:	f000 fa58 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015ac:	bf00      	nop
 80015ae:	3720      	adds	r7, #32
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40013000 	.word	0x40013000
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40010800 	.word	0x40010800

080015c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a1b      	ldr	r2, [pc, #108]	@ (8001648 <HAL_UART_MspInit+0x88>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d12f      	bne.n	8001640 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e0:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <HAL_UART_MspInit+0x8c>)
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	4a19      	ldr	r2, [pc, #100]	@ (800164c <HAL_UART_MspInit+0x8c>)
 80015e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ea:	61d3      	str	r3, [r2, #28]
 80015ec:	4b17      	ldr	r3, [pc, #92]	@ (800164c <HAL_UART_MspInit+0x8c>)
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f8:	4b14      	ldr	r3, [pc, #80]	@ (800164c <HAL_UART_MspInit+0x8c>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a13      	ldr	r2, [pc, #76]	@ (800164c <HAL_UART_MspInit+0x8c>)
 80015fe:	f043 0304 	orr.w	r3, r3, #4
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b11      	ldr	r3, [pc, #68]	@ (800164c <HAL_UART_MspInit+0x8c>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001610:	2304      	movs	r3, #4
 8001612:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0310 	add.w	r3, r7, #16
 8001620:	4619      	mov	r1, r3
 8001622:	480b      	ldr	r0, [pc, #44]	@ (8001650 <HAL_UART_MspInit+0x90>)
 8001624:	f000 fa1a 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001628:	2308      	movs	r3, #8
 800162a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	4619      	mov	r1, r3
 800163a:	4805      	ldr	r0, [pc, #20]	@ (8001650 <HAL_UART_MspInit+0x90>)
 800163c:	f000 fa0e 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001640:	bf00      	nop
 8001642:	3720      	adds	r7, #32
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40004400 	.word	0x40004400
 800164c:	40021000 	.word	0x40021000
 8001650:	40010800 	.word	0x40010800

08001654 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08e      	sub	sp, #56	@ 0x38
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800166a:	4b34      	ldr	r3, [pc, #208]	@ (800173c <HAL_InitTick+0xe8>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a33      	ldr	r2, [pc, #204]	@ (800173c <HAL_InitTick+0xe8>)
 8001670:	f043 0304 	orr.w	r3, r3, #4
 8001674:	61d3      	str	r3, [r2, #28]
 8001676:	4b31      	ldr	r3, [pc, #196]	@ (800173c <HAL_InitTick+0xe8>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001682:	f107 0210 	add.w	r2, r7, #16
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f001 ffcd 	bl	800362c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001698:	2b00      	cmp	r3, #0
 800169a:	d103      	bne.n	80016a4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800169c:	f001 ff9e 	bl	80035dc <HAL_RCC_GetPCLK1Freq>
 80016a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80016a2:	e004      	b.n	80016ae <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016a4:	f001 ff9a 	bl	80035dc <HAL_RCC_GetPCLK1Freq>
 80016a8:	4603      	mov	r3, r0
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016b0:	4a23      	ldr	r2, [pc, #140]	@ (8001740 <HAL_InitTick+0xec>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	0c9b      	lsrs	r3, r3, #18
 80016b8:	3b01      	subs	r3, #1
 80016ba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80016bc:	4b21      	ldr	r3, [pc, #132]	@ (8001744 <HAL_InitTick+0xf0>)
 80016be:	4a22      	ldr	r2, [pc, #136]	@ (8001748 <HAL_InitTick+0xf4>)
 80016c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80016c2:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <HAL_InitTick+0xf0>)
 80016c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016c8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80016ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001744 <HAL_InitTick+0xf0>)
 80016cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ce:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80016d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001744 <HAL_InitTick+0xf0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <HAL_InitTick+0xf0>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <HAL_InitTick+0xf0>)
 80016de:	2200      	movs	r2, #0
 80016e0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80016e2:	4818      	ldr	r0, [pc, #96]	@ (8001744 <HAL_InitTick+0xf0>)
 80016e4:	f002 fd78 	bl	80041d8 <HAL_TIM_Base_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d11b      	bne.n	800172e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80016f6:	4813      	ldr	r0, [pc, #76]	@ (8001744 <HAL_InitTick+0xf0>)
 80016f8:	f002 fdc6 	bl	8004288 <HAL_TIM_Base_Start_IT>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001702:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001706:	2b00      	cmp	r3, #0
 8001708:	d111      	bne.n	800172e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800170a:	201e      	movs	r0, #30
 800170c:	f000 f997 	bl	8001a3e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b0f      	cmp	r3, #15
 8001714:	d808      	bhi.n	8001728 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001716:	2200      	movs	r2, #0
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	201e      	movs	r0, #30
 800171c:	f000 f973 	bl	8001a06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001720:	4a0a      	ldr	r2, [pc, #40]	@ (800174c <HAL_InitTick+0xf8>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e002      	b.n	800172e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800172e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001732:	4618      	mov	r0, r3
 8001734:	3738      	adds	r7, #56	@ 0x38
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	431bde83 	.word	0x431bde83
 8001744:	200001b8 	.word	0x200001b8
 8001748:	40000800 	.word	0x40000800
 800174c:	2000000c 	.word	0x2000000c

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <NMI_Handler+0x4>

08001758 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <HardFault_Handler+0x4>

08001760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <MemManage_Handler+0x4>

08001768 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <UsageFault_Handler+0x4>

08001778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <TIM4_IRQHandler+0x10>)
 800178a:	f002 fdcf 	bl	800432c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200001b8 	.word	0x200001b8

08001798 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017a4:	f7ff fff8 	bl	8001798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a8:	480b      	ldr	r0, [pc, #44]	@ (80017d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017aa:	490c      	ldr	r1, [pc, #48]	@ (80017dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017ac:	4a0c      	ldr	r2, [pc, #48]	@ (80017e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b0:	e002      	b.n	80017b8 <LoopCopyDataInit>

080017b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b6:	3304      	adds	r3, #4

080017b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017bc:	d3f9      	bcc.n	80017b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017be:	4a09      	ldr	r2, [pc, #36]	@ (80017e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017c0:	4c09      	ldr	r4, [pc, #36]	@ (80017e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c4:	e001      	b.n	80017ca <LoopFillZerobss>

080017c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c8:	3204      	adds	r2, #4

080017ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017cc:	d3fb      	bcc.n	80017c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ce:	f005 fd45 	bl	800725c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017d2:	f7ff fc29 	bl	8001028 <main>
  bx lr
 80017d6:	4770      	bx	lr
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80017e0:	080073d8 	.word	0x080073d8
  ldr r2, =_sbss
 80017e4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80017e8:	20001b4c 	.word	0x20001b4c

080017ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC1_2_IRQHandler>
	...

080017f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f4:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <HAL_Init+0x28>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a07      	ldr	r2, [pc, #28]	@ (8001818 <HAL_Init+0x28>)
 80017fa:	f043 0310 	orr.w	r3, r3, #16
 80017fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001800:	2003      	movs	r0, #3
 8001802:	f000 f8f5 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001806:	200f      	movs	r0, #15
 8001808:	f7ff ff24 	bl	8001654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800180c:	f7ff fe18 	bl	8001440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40022000 	.word	0x40022000

0800181c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001820:	4b05      	ldr	r3, [pc, #20]	@ (8001838 <HAL_IncTick+0x1c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b05      	ldr	r3, [pc, #20]	@ (800183c <HAL_IncTick+0x20>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4413      	add	r3, r2
 800182c:	4a03      	ldr	r2, [pc, #12]	@ (800183c <HAL_IncTick+0x20>)
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	20000010 	.word	0x20000010
 800183c:	20000200 	.word	0x20000200

08001840 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return uwTick;
 8001844:	4b02      	ldr	r3, [pc, #8]	@ (8001850 <HAL_GetTick+0x10>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	20000200 	.word	0x20000200

08001854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800185c:	f7ff fff0 	bl	8001840 <HAL_GetTick>
 8001860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d005      	beq.n	800187a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800186e:	4b0a      	ldr	r3, [pc, #40]	@ (8001898 <HAL_Delay+0x44>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800187a:	bf00      	nop
 800187c:	f7ff ffe0 	bl	8001840 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	429a      	cmp	r2, r3
 800188a:	d8f7      	bhi.n	800187c <HAL_Delay+0x28>
  {
  }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000010 	.word	0x20000010

0800189c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ce:	4a04      	ldr	r2, [pc, #16]	@ (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	60d3      	str	r3, [r2, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e8:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <__NVIC_GetPriorityGrouping+0x18>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	f003 0307 	and.w	r3, r3, #7
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	2b00      	cmp	r3, #0
 8001910:	db0b      	blt.n	800192a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	f003 021f 	and.w	r2, r3, #31
 8001918:	4906      	ldr	r1, [pc, #24]	@ (8001934 <__NVIC_EnableIRQ+0x34>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	2001      	movs	r0, #1
 8001922:	fa00 f202 	lsl.w	r2, r0, r2
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100

08001938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	6039      	str	r1, [r7, #0]
 8001942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	db0a      	blt.n	8001962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	490c      	ldr	r1, [pc, #48]	@ (8001984 <__NVIC_SetPriority+0x4c>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	0112      	lsls	r2, r2, #4
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	440b      	add	r3, r1
 800195c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001960:	e00a      	b.n	8001978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4908      	ldr	r1, [pc, #32]	@ (8001988 <__NVIC_SetPriority+0x50>)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	3b04      	subs	r3, #4
 8001970:	0112      	lsls	r2, r2, #4
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	440b      	add	r3, r1
 8001976:	761a      	strb	r2, [r3, #24]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000e100 	.word	0xe000e100
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	@ 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f1c3 0307 	rsb	r3, r3, #7
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	bf28      	it	cs
 80019aa:	2304      	movcs	r3, #4
 80019ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3304      	adds	r3, #4
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d902      	bls.n	80019bc <NVIC_EncodePriority+0x30>
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3b03      	subs	r3, #3
 80019ba:	e000      	b.n	80019be <NVIC_EncodePriority+0x32>
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	401a      	ands	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	43d9      	mvns	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	4313      	orrs	r3, r2
         );
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3724      	adds	r7, #36	@ 0x24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff4f 	bl	800189c <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a18:	f7ff ff64 	bl	80018e4 <__NVIC_GetPriorityGrouping>
 8001a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	6978      	ldr	r0, [r7, #20]
 8001a24:	f7ff ffb2 	bl	800198c <NVIC_EncodePriority>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff81 	bl	8001938 <__NVIC_SetPriority>
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff57 	bl	8001900 <__NVIC_EnableIRQ>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b08b      	sub	sp, #44	@ 0x2c
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6e:	e169      	b.n	8001d44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a70:	2201      	movs	r2, #1
 8001a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	f040 8158 	bne.w	8001d3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4a9a      	ldr	r2, [pc, #616]	@ (8001cfc <HAL_GPIO_Init+0x2a0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d05e      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
 8001a98:	4a98      	ldr	r2, [pc, #608]	@ (8001cfc <HAL_GPIO_Init+0x2a0>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d875      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001a9e:	4a98      	ldr	r2, [pc, #608]	@ (8001d00 <HAL_GPIO_Init+0x2a4>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d058      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
 8001aa4:	4a96      	ldr	r2, [pc, #600]	@ (8001d00 <HAL_GPIO_Init+0x2a4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d86f      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001aaa:	4a96      	ldr	r2, [pc, #600]	@ (8001d04 <HAL_GPIO_Init+0x2a8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d052      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
 8001ab0:	4a94      	ldr	r2, [pc, #592]	@ (8001d04 <HAL_GPIO_Init+0x2a8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d869      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001ab6:	4a94      	ldr	r2, [pc, #592]	@ (8001d08 <HAL_GPIO_Init+0x2ac>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d04c      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
 8001abc:	4a92      	ldr	r2, [pc, #584]	@ (8001d08 <HAL_GPIO_Init+0x2ac>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d863      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001ac2:	4a92      	ldr	r2, [pc, #584]	@ (8001d0c <HAL_GPIO_Init+0x2b0>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d046      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
 8001ac8:	4a90      	ldr	r2, [pc, #576]	@ (8001d0c <HAL_GPIO_Init+0x2b0>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d85d      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001ace:	2b12      	cmp	r3, #18
 8001ad0:	d82a      	bhi.n	8001b28 <HAL_GPIO_Init+0xcc>
 8001ad2:	2b12      	cmp	r3, #18
 8001ad4:	d859      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8001adc <HAL_GPIO_Init+0x80>)
 8001ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001adc:	08001b57 	.word	0x08001b57
 8001ae0:	08001b31 	.word	0x08001b31
 8001ae4:	08001b43 	.word	0x08001b43
 8001ae8:	08001b85 	.word	0x08001b85
 8001aec:	08001b8b 	.word	0x08001b8b
 8001af0:	08001b8b 	.word	0x08001b8b
 8001af4:	08001b8b 	.word	0x08001b8b
 8001af8:	08001b8b 	.word	0x08001b8b
 8001afc:	08001b8b 	.word	0x08001b8b
 8001b00:	08001b8b 	.word	0x08001b8b
 8001b04:	08001b8b 	.word	0x08001b8b
 8001b08:	08001b8b 	.word	0x08001b8b
 8001b0c:	08001b8b 	.word	0x08001b8b
 8001b10:	08001b8b 	.word	0x08001b8b
 8001b14:	08001b8b 	.word	0x08001b8b
 8001b18:	08001b8b 	.word	0x08001b8b
 8001b1c:	08001b8b 	.word	0x08001b8b
 8001b20:	08001b39 	.word	0x08001b39
 8001b24:	08001b4d 	.word	0x08001b4d
 8001b28:	4a79      	ldr	r2, [pc, #484]	@ (8001d10 <HAL_GPIO_Init+0x2b4>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d013      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b2e:	e02c      	b.n	8001b8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	623b      	str	r3, [r7, #32]
          break;
 8001b36:	e029      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	623b      	str	r3, [r7, #32]
          break;
 8001b40:	e024      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	3308      	adds	r3, #8
 8001b48:	623b      	str	r3, [r7, #32]
          break;
 8001b4a:	e01f      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	330c      	adds	r3, #12
 8001b52:	623b      	str	r3, [r7, #32]
          break;
 8001b54:	e01a      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d102      	bne.n	8001b64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b5e:	2304      	movs	r3, #4
 8001b60:	623b      	str	r3, [r7, #32]
          break;
 8001b62:	e013      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d105      	bne.n	8001b78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	611a      	str	r2, [r3, #16]
          break;
 8001b76:	e009      	b.n	8001b8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b78:	2308      	movs	r3, #8
 8001b7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69fa      	ldr	r2, [r7, #28]
 8001b80:	615a      	str	r2, [r3, #20]
          break;
 8001b82:	e003      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
          break;
 8001b88:	e000      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          break;
 8001b8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2bff      	cmp	r3, #255	@ 0xff
 8001b90:	d801      	bhi.n	8001b96 <HAL_GPIO_Init+0x13a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	e001      	b.n	8001b9a <HAL_GPIO_Init+0x13e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2bff      	cmp	r3, #255	@ 0xff
 8001ba0:	d802      	bhi.n	8001ba8 <HAL_GPIO_Init+0x14c>
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	e002      	b.n	8001bae <HAL_GPIO_Init+0x152>
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001baa:	3b08      	subs	r3, #8
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	210f      	movs	r1, #15
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	6a39      	ldr	r1, [r7, #32]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 80b1 	beq.w	8001d3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bdc:	4b4d      	ldr	r3, [pc, #308]	@ (8001d14 <HAL_GPIO_Init+0x2b8>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a4c      	ldr	r2, [pc, #304]	@ (8001d14 <HAL_GPIO_Init+0x2b8>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b4a      	ldr	r3, [pc, #296]	@ (8001d14 <HAL_GPIO_Init+0x2b8>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bf4:	4a48      	ldr	r2, [pc, #288]	@ (8001d18 <HAL_GPIO_Init+0x2bc>)
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	220f      	movs	r2, #15
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	4013      	ands	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a40      	ldr	r2, [pc, #256]	@ (8001d1c <HAL_GPIO_Init+0x2c0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d013      	beq.n	8001c48 <HAL_GPIO_Init+0x1ec>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a3f      	ldr	r2, [pc, #252]	@ (8001d20 <HAL_GPIO_Init+0x2c4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d00d      	beq.n	8001c44 <HAL_GPIO_Init+0x1e8>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a3e      	ldr	r2, [pc, #248]	@ (8001d24 <HAL_GPIO_Init+0x2c8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d007      	beq.n	8001c40 <HAL_GPIO_Init+0x1e4>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a3d      	ldr	r2, [pc, #244]	@ (8001d28 <HAL_GPIO_Init+0x2cc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d101      	bne.n	8001c3c <HAL_GPIO_Init+0x1e0>
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e006      	b.n	8001c4a <HAL_GPIO_Init+0x1ee>
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	e004      	b.n	8001c4a <HAL_GPIO_Init+0x1ee>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e002      	b.n	8001c4a <HAL_GPIO_Init+0x1ee>
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <HAL_GPIO_Init+0x1ee>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c4c:	f002 0203 	and.w	r2, r2, #3
 8001c50:	0092      	lsls	r2, r2, #2
 8001c52:	4093      	lsls	r3, r2
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c5a:	492f      	ldr	r1, [pc, #188]	@ (8001d18 <HAL_GPIO_Init+0x2bc>)
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5e:	089b      	lsrs	r3, r3, #2
 8001c60:	3302      	adds	r3, #2
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d006      	beq.n	8001c82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c74:	4b2d      	ldr	r3, [pc, #180]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	492c      	ldr	r1, [pc, #176]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	608b      	str	r3, [r1, #8]
 8001c80:	e006      	b.n	8001c90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c82:	4b2a      	ldr	r3, [pc, #168]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	4928      	ldr	r1, [pc, #160]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d006      	beq.n	8001caa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c9c:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	4922      	ldr	r1, [pc, #136]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	60cb      	str	r3, [r1, #12]
 8001ca8:	e006      	b.n	8001cb8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001caa:	4b20      	ldr	r3, [pc, #128]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	491e      	ldr	r1, [pc, #120]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d006      	beq.n	8001cd2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cc4:	4b19      	ldr	r3, [pc, #100]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	4918      	ldr	r1, [pc, #96]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
 8001cd0:	e006      	b.n	8001ce0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cd2:	4b16      	ldr	r3, [pc, #88]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	4914      	ldr	r1, [pc, #80]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d021      	beq.n	8001d30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cec:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	490e      	ldr	r1, [pc, #56]	@ (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	600b      	str	r3, [r1, #0]
 8001cf8:	e021      	b.n	8001d3e <HAL_GPIO_Init+0x2e2>
 8001cfa:	bf00      	nop
 8001cfc:	10320000 	.word	0x10320000
 8001d00:	10310000 	.word	0x10310000
 8001d04:	10220000 	.word	0x10220000
 8001d08:	10210000 	.word	0x10210000
 8001d0c:	10120000 	.word	0x10120000
 8001d10:	10110000 	.word	0x10110000
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40010000 	.word	0x40010000
 8001d1c:	40010800 	.word	0x40010800
 8001d20:	40010c00 	.word	0x40010c00
 8001d24:	40011000 	.word	0x40011000
 8001d28:	40011400 	.word	0x40011400
 8001d2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d30:	4b0b      	ldr	r3, [pc, #44]	@ (8001d60 <HAL_GPIO_Init+0x304>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	4909      	ldr	r1, [pc, #36]	@ (8001d60 <HAL_GPIO_Init+0x304>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	3301      	adds	r3, #1
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f47f ae8e 	bne.w	8001a70 <HAL_GPIO_Init+0x14>
  }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	372c      	adds	r7, #44	@ 0x2c
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	40010400 	.word	0x40010400

08001d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
 8001d70:	4613      	mov	r3, r2
 8001d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d74:	787b      	ldrb	r3, [r7, #1]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d80:	e003      	b.n	8001d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	041a      	lsls	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	611a      	str	r2, [r3, #16]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e12b      	b.n	8001ffe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d106      	bne.n	8001dc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fb78 	bl	80014b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2224      	movs	r2, #36	@ 0x24
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0201 	bic.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001de6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001df6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001df8:	f001 fbf0 	bl	80035dc <HAL_RCC_GetPCLK1Freq>
 8001dfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4a81      	ldr	r2, [pc, #516]	@ (8002008 <HAL_I2C_Init+0x274>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d807      	bhi.n	8001e18 <HAL_I2C_Init+0x84>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4a80      	ldr	r2, [pc, #512]	@ (800200c <HAL_I2C_Init+0x278>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	bf94      	ite	ls
 8001e10:	2301      	movls	r3, #1
 8001e12:	2300      	movhi	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	e006      	b.n	8001e26 <HAL_I2C_Init+0x92>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4a7d      	ldr	r2, [pc, #500]	@ (8002010 <HAL_I2C_Init+0x27c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	bf94      	ite	ls
 8001e20:	2301      	movls	r3, #1
 8001e22:	2300      	movhi	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e0e7      	b.n	8001ffe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4a78      	ldr	r2, [pc, #480]	@ (8002014 <HAL_I2C_Init+0x280>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	0c9b      	lsrs	r3, r3, #18
 8001e38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4a6a      	ldr	r2, [pc, #424]	@ (8002008 <HAL_I2C_Init+0x274>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d802      	bhi.n	8001e68 <HAL_I2C_Init+0xd4>
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	3301      	adds	r3, #1
 8001e66:	e009      	b.n	8001e7c <HAL_I2C_Init+0xe8>
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	4a69      	ldr	r2, [pc, #420]	@ (8002018 <HAL_I2C_Init+0x284>)
 8001e74:	fba2 2303 	umull	r2, r3, r2, r3
 8001e78:	099b      	lsrs	r3, r3, #6
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	430b      	orrs	r3, r1
 8001e82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	495c      	ldr	r1, [pc, #368]	@ (8002008 <HAL_I2C_Init+0x274>)
 8001e98:	428b      	cmp	r3, r1
 8001e9a:	d819      	bhi.n	8001ed0 <HAL_I2C_Init+0x13c>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1e59      	subs	r1, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eaa:	1c59      	adds	r1, r3, #1
 8001eac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001eb0:	400b      	ands	r3, r1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00a      	beq.n	8001ecc <HAL_I2C_Init+0x138>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1e59      	subs	r1, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eca:	e051      	b.n	8001f70 <HAL_I2C_Init+0x1dc>
 8001ecc:	2304      	movs	r3, #4
 8001ece:	e04f      	b.n	8001f70 <HAL_I2C_Init+0x1dc>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d111      	bne.n	8001efc <HAL_I2C_Init+0x168>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1e58      	subs	r0, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6859      	ldr	r1, [r3, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	440b      	add	r3, r1
 8001ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eea:	3301      	adds	r3, #1
 8001eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf0c      	ite	eq
 8001ef4:	2301      	moveq	r3, #1
 8001ef6:	2300      	movne	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	e012      	b.n	8001f22 <HAL_I2C_Init+0x18e>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1e58      	subs	r0, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	0099      	lsls	r1, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f12:	3301      	adds	r3, #1
 8001f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bf0c      	ite	eq
 8001f1c:	2301      	moveq	r3, #1
 8001f1e:	2300      	movne	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_I2C_Init+0x196>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e022      	b.n	8001f70 <HAL_I2C_Init+0x1dc>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10e      	bne.n	8001f50 <HAL_I2C_Init+0x1bc>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1e58      	subs	r0, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6859      	ldr	r1, [r3, #4]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	440b      	add	r3, r1
 8001f40:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f44:	3301      	adds	r3, #1
 8001f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f4e:	e00f      	b.n	8001f70 <HAL_I2C_Init+0x1dc>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1e58      	subs	r0, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6859      	ldr	r1, [r3, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	0099      	lsls	r1, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f66:	3301      	adds	r3, #1
 8001f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	6809      	ldr	r1, [r1, #0]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69da      	ldr	r2, [r3, #28]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6911      	ldr	r1, [r2, #16]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68d2      	ldr	r2, [r2, #12]
 8001faa:	4311      	orrs	r1, r2
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0201 	orr.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	000186a0 	.word	0x000186a0
 800200c:	001e847f 	.word	0x001e847f
 8002010:	003d08ff 	.word	0x003d08ff
 8002014:	431bde83 	.word	0x431bde83
 8002018:	10624dd3 	.word	0x10624dd3

0800201c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af02      	add	r7, sp, #8
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	4608      	mov	r0, r1
 8002026:	4611      	mov	r1, r2
 8002028:	461a      	mov	r2, r3
 800202a:	4603      	mov	r3, r0
 800202c:	817b      	strh	r3, [r7, #10]
 800202e:	460b      	mov	r3, r1
 8002030:	813b      	strh	r3, [r7, #8]
 8002032:	4613      	mov	r3, r2
 8002034:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002036:	f7ff fc03 	bl	8001840 <HAL_GetTick>
 800203a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b20      	cmp	r3, #32
 8002046:	f040 80d9 	bne.w	80021fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2319      	movs	r3, #25
 8002050:	2201      	movs	r2, #1
 8002052:	496d      	ldr	r1, [pc, #436]	@ (8002208 <HAL_I2C_Mem_Write+0x1ec>)
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 fcc1 	bl	80029dc <I2C_WaitOnFlagUntilTimeout>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002060:	2302      	movs	r3, #2
 8002062:	e0cc      	b.n	80021fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_I2C_Mem_Write+0x56>
 800206e:	2302      	movs	r3, #2
 8002070:	e0c5      	b.n	80021fe <HAL_I2C_Mem_Write+0x1e2>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b01      	cmp	r3, #1
 8002086:	d007      	beq.n	8002098 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2221      	movs	r2, #33	@ 0x21
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2240      	movs	r2, #64	@ 0x40
 80020b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a3a      	ldr	r2, [r7, #32]
 80020c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80020c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4a4d      	ldr	r2, [pc, #308]	@ (800220c <HAL_I2C_Mem_Write+0x1f0>)
 80020d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020da:	88f8      	ldrh	r0, [r7, #6]
 80020dc:	893a      	ldrh	r2, [r7, #8]
 80020de:	8979      	ldrh	r1, [r7, #10]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	4603      	mov	r3, r0
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 faf8 	bl	80026e0 <I2C_RequestMemoryWrite>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d052      	beq.n	800219c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e081      	b.n	80021fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 fd86 	bl	8002c10 <I2C_WaitOnTXEFlagUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00d      	beq.n	8002126 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	2b04      	cmp	r3, #4
 8002110:	d107      	bne.n	8002122 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002120:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e06b      	b.n	80021fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800214c:	b29b      	uxth	r3, r3
 800214e:	3b01      	subs	r3, #1
 8002150:	b29a      	uxth	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b04      	cmp	r3, #4
 8002162:	d11b      	bne.n	800219c <HAL_I2C_Mem_Write+0x180>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002168:	2b00      	cmp	r3, #0
 800216a:	d017      	beq.n	800219c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002170:	781a      	ldrb	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002192:	b29b      	uxth	r3, r3
 8002194:	3b01      	subs	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1aa      	bne.n	80020fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 fd79 	bl	8002ca0 <I2C_WaitOnBTFFlagUntilTimeout>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00d      	beq.n	80021d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d107      	bne.n	80021cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e016      	b.n	80021fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	e000      	b.n	80021fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80021fc:	2302      	movs	r3, #2
  }
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	00100002 	.word	0x00100002
 800220c:	ffff0000 	.word	0xffff0000

08002210 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08c      	sub	sp, #48	@ 0x30
 8002214:	af02      	add	r7, sp, #8
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	4608      	mov	r0, r1
 800221a:	4611      	mov	r1, r2
 800221c:	461a      	mov	r2, r3
 800221e:	4603      	mov	r3, r0
 8002220:	817b      	strh	r3, [r7, #10]
 8002222:	460b      	mov	r3, r1
 8002224:	813b      	strh	r3, [r7, #8]
 8002226:	4613      	mov	r3, r2
 8002228:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800222e:	f7ff fb07 	bl	8001840 <HAL_GetTick>
 8002232:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b20      	cmp	r3, #32
 800223e:	f040 8244 	bne.w	80026ca <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	2319      	movs	r3, #25
 8002248:	2201      	movs	r2, #1
 800224a:	4982      	ldr	r1, [pc, #520]	@ (8002454 <HAL_I2C_Mem_Read+0x244>)
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 fbc5 	bl	80029dc <I2C_WaitOnFlagUntilTimeout>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002258:	2302      	movs	r3, #2
 800225a:	e237      	b.n	80026cc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_I2C_Mem_Read+0x5a>
 8002266:	2302      	movs	r3, #2
 8002268:	e230      	b.n	80026cc <HAL_I2C_Mem_Read+0x4bc>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b01      	cmp	r3, #1
 800227e:	d007      	beq.n	8002290 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800229e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2222      	movs	r2, #34	@ 0x22
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2240      	movs	r2, #64	@ 0x40
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80022c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4a62      	ldr	r2, [pc, #392]	@ (8002458 <HAL_I2C_Mem_Read+0x248>)
 80022d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022d2:	88f8      	ldrh	r0, [r7, #6]
 80022d4:	893a      	ldrh	r2, [r7, #8]
 80022d6:	8979      	ldrh	r1, [r7, #10]
 80022d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	4603      	mov	r3, r0
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 fa92 	bl	800280c <I2C_RequestMemoryRead>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e1ec      	b.n	80026cc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d113      	bne.n	8002322 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e1c0      	b.n	80026a4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002326:	2b01      	cmp	r3, #1
 8002328:	d11e      	bne.n	8002368 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002338:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800233a:	b672      	cpsid	i
}
 800233c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	61bb      	str	r3, [r7, #24]
 8002352:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002362:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002364:	b662      	cpsie	i
}
 8002366:	e035      	b.n	80023d4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800236c:	2b02      	cmp	r3, #2
 800236e:	d11e      	bne.n	80023ae <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800237e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002380:	b672      	cpsid	i
}
 8002382:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80023aa:	b662      	cpsie	i
}
 80023ac:	e012      	b.n	80023d4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80023bc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80023d4:	e166      	b.n	80026a4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023da:	2b03      	cmp	r3, #3
 80023dc:	f200 811f 	bhi.w	800261e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d123      	bne.n	8002430 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 fc9f 	bl	8002d30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e167      	b.n	80026cc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002424:	b29b      	uxth	r3, r3
 8002426:	3b01      	subs	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800242e:	e139      	b.n	80026a4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002434:	2b02      	cmp	r3, #2
 8002436:	d152      	bne.n	80024de <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800243e:	2200      	movs	r2, #0
 8002440:	4906      	ldr	r1, [pc, #24]	@ (800245c <HAL_I2C_Mem_Read+0x24c>)
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 faca 	bl	80029dc <I2C_WaitOnFlagUntilTimeout>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d008      	beq.n	8002460 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e13c      	b.n	80026cc <HAL_I2C_Mem_Read+0x4bc>
 8002452:	bf00      	nop
 8002454:	00100002 	.word	0x00100002
 8002458:	ffff0000 	.word	0xffff0000
 800245c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002460:	b672      	cpsid	i
}
 8002462:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002472:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800249c:	b29b      	uxth	r3, r3
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80024a6:	b662      	cpsie	i
}
 80024a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024dc:	e0e2      	b.n	80026a4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024e4:	2200      	movs	r2, #0
 80024e6:	497b      	ldr	r1, [pc, #492]	@ (80026d4 <HAL_I2C_Mem_Read+0x4c4>)
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 fa77 	bl	80029dc <I2C_WaitOnFlagUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0e9      	b.n	80026cc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002506:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002508:	b672      	cpsid	i
}
 800250a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800253e:	4b66      	ldr	r3, [pc, #408]	@ (80026d8 <HAL_I2C_Mem_Read+0x4c8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	08db      	lsrs	r3, r3, #3
 8002544:	4a65      	ldr	r2, [pc, #404]	@ (80026dc <HAL_I2C_Mem_Read+0x4cc>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	0a1a      	lsrs	r2, r3, #8
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	00da      	lsls	r2, r3, #3
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	3b01      	subs	r3, #1
 800255c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d118      	bne.n	8002596 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2220      	movs	r2, #32
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	f043 0220 	orr.w	r2, r3, #32
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002586:	b662      	cpsie	i
}
 8002588:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e09a      	b.n	80026cc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d1d9      	bne.n	8002558 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80025e6:	b662      	cpsie	i
}
 80025e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002612:	b29b      	uxth	r3, r3
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800261c:	e042      	b.n	80026a4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800261e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002620:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fb84 	bl	8002d30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e04c      	b.n	80026cc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b04      	cmp	r3, #4
 8002670:	d118      	bne.n	80026a4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f47f ae94 	bne.w	80023d6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	e000      	b.n	80026cc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80026ca:	2302      	movs	r3, #2
  }
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3728      	adds	r7, #40	@ 0x28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	00010004 	.word	0x00010004
 80026d8:	20000008 	.word	0x20000008
 80026dc:	14f8b589 	.word	0x14f8b589

080026e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	4608      	mov	r0, r1
 80026ea:	4611      	mov	r1, r2
 80026ec:	461a      	mov	r2, r3
 80026ee:	4603      	mov	r3, r0
 80026f0:	817b      	strh	r3, [r7, #10]
 80026f2:	460b      	mov	r3, r1
 80026f4:	813b      	strh	r3, [r7, #8]
 80026f6:	4613      	mov	r3, r2
 80026f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002708:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	2200      	movs	r2, #0
 8002712:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f960 	bl	80029dc <I2C_WaitOnFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00d      	beq.n	800273e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002730:	d103      	bne.n	800273a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002738:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e05f      	b.n	80027fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800273e:	897b      	ldrh	r3, [r7, #10]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800274c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	6a3a      	ldr	r2, [r7, #32]
 8002752:	492d      	ldr	r1, [pc, #180]	@ (8002808 <I2C_RequestMemoryWrite+0x128>)
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f9bb 	bl	8002ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e04c      	b.n	80027fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800277a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800277c:	6a39      	ldr	r1, [r7, #32]
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 fa46 	bl	8002c10 <I2C_WaitOnTXEFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00d      	beq.n	80027a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	2b04      	cmp	r3, #4
 8002790:	d107      	bne.n	80027a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e02b      	b.n	80027fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d105      	bne.n	80027b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027ac:	893b      	ldrh	r3, [r7, #8]
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	611a      	str	r2, [r3, #16]
 80027b6:	e021      	b.n	80027fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027b8:	893b      	ldrh	r3, [r7, #8]
 80027ba:	0a1b      	lsrs	r3, r3, #8
 80027bc:	b29b      	uxth	r3, r3
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c8:	6a39      	ldr	r1, [r7, #32]
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 fa20 	bl	8002c10 <I2C_WaitOnTXEFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00d      	beq.n	80027f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d107      	bne.n	80027ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e005      	b.n	80027fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027f2:	893b      	ldrh	r3, [r7, #8]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	00010002 	.word	0x00010002

0800280c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af02      	add	r7, sp, #8
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	4608      	mov	r0, r1
 8002816:	4611      	mov	r1, r2
 8002818:	461a      	mov	r2, r3
 800281a:	4603      	mov	r3, r0
 800281c:	817b      	strh	r3, [r7, #10]
 800281e:	460b      	mov	r3, r1
 8002820:	813b      	strh	r3, [r7, #8]
 8002822:	4613      	mov	r3, r2
 8002824:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002834:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002844:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	2200      	movs	r2, #0
 800284e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f8c2 	bl	80029dc <I2C_WaitOnFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00d      	beq.n	800287a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002868:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800286c:	d103      	bne.n	8002876 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002874:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e0aa      	b.n	80029d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800287a:	897b      	ldrh	r3, [r7, #10]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002888:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	6a3a      	ldr	r2, [r7, #32]
 800288e:	4952      	ldr	r1, [pc, #328]	@ (80029d8 <I2C_RequestMemoryRead+0x1cc>)
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f91d 	bl	8002ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e097      	b.n	80029d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b8:	6a39      	ldr	r1, [r7, #32]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 f9a8 	bl	8002c10 <I2C_WaitOnTXEFlagUntilTimeout>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00d      	beq.n	80028e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d107      	bne.n	80028de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e076      	b.n	80029d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d105      	bne.n	80028f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028e8:	893b      	ldrh	r3, [r7, #8]
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	611a      	str	r2, [r3, #16]
 80028f2:	e021      	b.n	8002938 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028f4:	893b      	ldrh	r3, [r7, #8]
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002904:	6a39      	ldr	r1, [r7, #32]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f982 	bl	8002c10 <I2C_WaitOnTXEFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00d      	beq.n	800292e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	2b04      	cmp	r3, #4
 8002918:	d107      	bne.n	800292a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002928:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e050      	b.n	80029d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800292e:	893b      	ldrh	r3, [r7, #8]
 8002930:	b2da      	uxtb	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800293a:	6a39      	ldr	r1, [r7, #32]
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f967 	bl	8002c10 <I2C_WaitOnTXEFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00d      	beq.n	8002964 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294c:	2b04      	cmp	r3, #4
 800294e:	d107      	bne.n	8002960 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e035      	b.n	80029d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002972:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	2200      	movs	r2, #0
 800297c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f82b 	bl	80029dc <I2C_WaitOnFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00d      	beq.n	80029a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002996:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800299a:	d103      	bne.n	80029a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e013      	b.n	80029d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80029a8:	897b      	ldrh	r3, [r7, #10]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ba:	6a3a      	ldr	r2, [r7, #32]
 80029bc:	4906      	ldr	r1, [pc, #24]	@ (80029d8 <I2C_RequestMemoryRead+0x1cc>)
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f886 	bl	8002ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	00010002 	.word	0x00010002

080029dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	4613      	mov	r3, r2
 80029ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ec:	e048      	b.n	8002a80 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f4:	d044      	beq.n	8002a80 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f6:	f7fe ff23 	bl	8001840 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d302      	bcc.n	8002a0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d139      	bne.n	8002a80 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	0c1b      	lsrs	r3, r3, #16
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d10d      	bne.n	8002a32 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	43da      	mvns	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	4013      	ands	r3, r2
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bf0c      	ite	eq
 8002a28:	2301      	moveq	r3, #1
 8002a2a:	2300      	movne	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	e00c      	b.n	8002a4c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	43da      	mvns	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf0c      	ite	eq
 8002a44:	2301      	moveq	r3, #1
 8002a46:	2300      	movne	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d116      	bne.n	8002a80 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6c:	f043 0220 	orr.w	r2, r3, #32
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e023      	b.n	8002ac8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	0c1b      	lsrs	r3, r3, #16
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d10d      	bne.n	8002aa6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	43da      	mvns	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	4013      	ands	r3, r2
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	e00c      	b.n	8002ac0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	43da      	mvns	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d093      	beq.n	80029ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ade:	e071      	b.n	8002bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aee:	d123      	bne.n	8002b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002afe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b24:	f043 0204 	orr.w	r2, r3, #4
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e067      	b.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3e:	d041      	beq.n	8002bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b40:	f7fe fe7e 	bl	8001840 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d302      	bcc.n	8002b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d136      	bne.n	8002bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	0c1b      	lsrs	r3, r3, #16
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d10c      	bne.n	8002b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	43da      	mvns	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	bf14      	ite	ne
 8002b72:	2301      	movne	r3, #1
 8002b74:	2300      	moveq	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	e00b      	b.n	8002b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	43da      	mvns	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	4013      	ands	r3, r2
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bf14      	ite	ne
 8002b8c:	2301      	movne	r3, #1
 8002b8e:	2300      	moveq	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d016      	beq.n	8002bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb0:	f043 0220 	orr.w	r2, r3, #32
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e021      	b.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	0c1b      	lsrs	r3, r3, #16
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d10c      	bne.n	8002be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	43da      	mvns	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bf14      	ite	ne
 8002be0:	2301      	movne	r3, #1
 8002be2:	2300      	moveq	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	e00b      	b.n	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	bf14      	ite	ne
 8002bfa:	2301      	movne	r3, #1
 8002bfc:	2300      	moveq	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f47f af6d 	bne.w	8002ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c1c:	e034      	b.n	8002c88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f8e3 	bl	8002dea <I2C_IsAcknowledgeFailed>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e034      	b.n	8002c98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c34:	d028      	beq.n	8002c88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c36:	f7fe fe03 	bl	8001840 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d302      	bcc.n	8002c4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d11d      	bne.n	8002c88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c56:	2b80      	cmp	r3, #128	@ 0x80
 8002c58:	d016      	beq.n	8002c88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	f043 0220 	orr.w	r2, r3, #32
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e007      	b.n	8002c98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c92:	2b80      	cmp	r3, #128	@ 0x80
 8002c94:	d1c3      	bne.n	8002c1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cac:	e034      	b.n	8002d18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f89b 	bl	8002dea <I2C_IsAcknowledgeFailed>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e034      	b.n	8002d28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d028      	beq.n	8002d18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc6:	f7fe fdbb 	bl	8001840 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d302      	bcc.n	8002cdc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d11d      	bne.n	8002d18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d016      	beq.n	8002d18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e007      	b.n	8002d28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d1c3      	bne.n	8002cae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d3c:	e049      	b.n	8002dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	2b10      	cmp	r3, #16
 8002d4a:	d119      	bne.n	8002d80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0210 	mvn.w	r2, #16
 8002d54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e030      	b.n	8002de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d80:	f7fe fd5e 	bl	8001840 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d302      	bcc.n	8002d96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d11d      	bne.n	8002dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da0:	2b40      	cmp	r3, #64	@ 0x40
 8002da2:	d016      	beq.n	8002dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	f043 0220 	orr.w	r2, r3, #32
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e007      	b.n	8002de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ddc:	2b40      	cmp	r3, #64	@ 0x40
 8002dde:	d1ae      	bne.n	8002d3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e00:	d11b      	bne.n	8002e3a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e0a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	f043 0204 	orr.w	r2, r3, #4
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr
	...

08002e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e272      	b.n	8003340 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 8087 	beq.w	8002f76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e68:	4b92      	ldr	r3, [pc, #584]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 030c 	and.w	r3, r3, #12
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d00c      	beq.n	8002e8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e74:	4b8f      	ldr	r3, [pc, #572]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 030c 	and.w	r3, r3, #12
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d112      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x5e>
 8002e80:	4b8c      	ldr	r3, [pc, #560]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e8c:	d10b      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8e:	4b89      	ldr	r3, [pc, #548]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d06c      	beq.n	8002f74 <HAL_RCC_OscConfig+0x12c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d168      	bne.n	8002f74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e24c      	b.n	8003340 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x76>
 8002eb0:	4b80      	ldr	r3, [pc, #512]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a7f      	ldr	r2, [pc, #508]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	e02e      	b.n	8002f1c <HAL_RCC_OscConfig+0xd4>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x98>
 8002ec6:	4b7b      	ldr	r3, [pc, #492]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a7a      	ldr	r2, [pc, #488]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	4b78      	ldr	r3, [pc, #480]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a77      	ldr	r2, [pc, #476]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	e01d      	b.n	8002f1c <HAL_RCC_OscConfig+0xd4>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0xbc>
 8002eea:	4b72      	ldr	r3, [pc, #456]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a71      	ldr	r2, [pc, #452]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b6f      	ldr	r3, [pc, #444]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a6e      	ldr	r2, [pc, #440]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	e00b      	b.n	8002f1c <HAL_RCC_OscConfig+0xd4>
 8002f04:	4b6b      	ldr	r3, [pc, #428]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a6a      	ldr	r2, [pc, #424]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002f0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	4b68      	ldr	r3, [pc, #416]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a67      	ldr	r2, [pc, #412]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002f16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d013      	beq.n	8002f4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f24:	f7fe fc8c 	bl	8001840 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f2c:	f7fe fc88 	bl	8001840 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	@ 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e200      	b.n	8003340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	4b5d      	ldr	r3, [pc, #372]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0xe4>
 8002f4a:	e014      	b.n	8002f76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fc78 	bl	8001840 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f54:	f7fe fc74 	bl	8001840 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	@ 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e1ec      	b.n	8003340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f66:	4b53      	ldr	r3, [pc, #332]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x10c>
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d063      	beq.n	800304a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f82:	4b4c      	ldr	r3, [pc, #304]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00b      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f8e:	4b49      	ldr	r3, [pc, #292]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 030c 	and.w	r3, r3, #12
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d11c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x18c>
 8002f9a:	4b46      	ldr	r3, [pc, #280]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d116      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa6:	4b43      	ldr	r3, [pc, #268]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <HAL_RCC_OscConfig+0x176>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d001      	beq.n	8002fbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e1c0      	b.n	8003340 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbe:	4b3d      	ldr	r3, [pc, #244]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4939      	ldr	r1, [pc, #228]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd2:	e03a      	b.n	800304a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d020      	beq.n	800301e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fdc:	4b36      	ldr	r3, [pc, #216]	@ (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe2:	f7fe fc2d 	bl	8001840 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fea:	f7fe fc29 	bl	8001840 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e1a1      	b.n	8003340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffc:	4b2d      	ldr	r3, [pc, #180]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003008:	4b2a      	ldr	r3, [pc, #168]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4927      	ldr	r1, [pc, #156]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8003018:	4313      	orrs	r3, r2
 800301a:	600b      	str	r3, [r1, #0]
 800301c:	e015      	b.n	800304a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800301e:	4b26      	ldr	r3, [pc, #152]	@ (80030b8 <HAL_RCC_OscConfig+0x270>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7fe fc0c 	bl	8001840 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800302c:	f7fe fc08 	bl	8001840 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e180      	b.n	8003340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303e:	4b1d      	ldr	r3, [pc, #116]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d03a      	beq.n	80030cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d019      	beq.n	8003092 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800305e:	4b17      	ldr	r3, [pc, #92]	@ (80030bc <HAL_RCC_OscConfig+0x274>)
 8003060:	2201      	movs	r2, #1
 8003062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003064:	f7fe fbec 	bl	8001840 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800306c:	f7fe fbe8 	bl	8001840 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e160      	b.n	8003340 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307e:	4b0d      	ldr	r3, [pc, #52]	@ (80030b4 <HAL_RCC_OscConfig+0x26c>)
 8003080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800308a:	2001      	movs	r0, #1
 800308c:	f000 fafe 	bl	800368c <RCC_Delay>
 8003090:	e01c      	b.n	80030cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003092:	4b0a      	ldr	r3, [pc, #40]	@ (80030bc <HAL_RCC_OscConfig+0x274>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003098:	f7fe fbd2 	bl	8001840 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800309e:	e00f      	b.n	80030c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a0:	f7fe fbce 	bl	8001840 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d908      	bls.n	80030c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e146      	b.n	8003340 <HAL_RCC_OscConfig+0x4f8>
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000
 80030b8:	42420000 	.word	0x42420000
 80030bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c0:	4b92      	ldr	r3, [pc, #584]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1e9      	bne.n	80030a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80a6 	beq.w	8003226 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030da:	2300      	movs	r3, #0
 80030dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030de:	4b8b      	ldr	r3, [pc, #556]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10d      	bne.n	8003106 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ea:	4b88      	ldr	r3, [pc, #544]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	4a87      	ldr	r2, [pc, #540]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030f4:	61d3      	str	r3, [r2, #28]
 80030f6:	4b85      	ldr	r3, [pc, #532]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003102:	2301      	movs	r3, #1
 8003104:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003106:	4b82      	ldr	r3, [pc, #520]	@ (8003310 <HAL_RCC_OscConfig+0x4c8>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800310e:	2b00      	cmp	r3, #0
 8003110:	d118      	bne.n	8003144 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003112:	4b7f      	ldr	r3, [pc, #508]	@ (8003310 <HAL_RCC_OscConfig+0x4c8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a7e      	ldr	r2, [pc, #504]	@ (8003310 <HAL_RCC_OscConfig+0x4c8>)
 8003118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800311c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800311e:	f7fe fb8f 	bl	8001840 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003126:	f7fe fb8b 	bl	8001840 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b64      	cmp	r3, #100	@ 0x64
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e103      	b.n	8003340 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003138:	4b75      	ldr	r3, [pc, #468]	@ (8003310 <HAL_RCC_OscConfig+0x4c8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d106      	bne.n	800315a <HAL_RCC_OscConfig+0x312>
 800314c:	4b6f      	ldr	r3, [pc, #444]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	4a6e      	ldr	r2, [pc, #440]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	6213      	str	r3, [r2, #32]
 8003158:	e02d      	b.n	80031b6 <HAL_RCC_OscConfig+0x36e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10c      	bne.n	800317c <HAL_RCC_OscConfig+0x334>
 8003162:	4b6a      	ldr	r3, [pc, #424]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	4a69      	ldr	r2, [pc, #420]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	6213      	str	r3, [r2, #32]
 800316e:	4b67      	ldr	r3, [pc, #412]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	4a66      	ldr	r2, [pc, #408]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 8003174:	f023 0304 	bic.w	r3, r3, #4
 8003178:	6213      	str	r3, [r2, #32]
 800317a:	e01c      	b.n	80031b6 <HAL_RCC_OscConfig+0x36e>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	2b05      	cmp	r3, #5
 8003182:	d10c      	bne.n	800319e <HAL_RCC_OscConfig+0x356>
 8003184:	4b61      	ldr	r3, [pc, #388]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	4a60      	ldr	r2, [pc, #384]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 800318a:	f043 0304 	orr.w	r3, r3, #4
 800318e:	6213      	str	r3, [r2, #32]
 8003190:	4b5e      	ldr	r3, [pc, #376]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	4a5d      	ldr	r2, [pc, #372]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	6213      	str	r3, [r2, #32]
 800319c:	e00b      	b.n	80031b6 <HAL_RCC_OscConfig+0x36e>
 800319e:	4b5b      	ldr	r3, [pc, #364]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	4a5a      	ldr	r2, [pc, #360]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	6213      	str	r3, [r2, #32]
 80031aa:	4b58      	ldr	r3, [pc, #352]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	4a57      	ldr	r2, [pc, #348]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 80031b0:	f023 0304 	bic.w	r3, r3, #4
 80031b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d015      	beq.n	80031ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031be:	f7fe fb3f 	bl	8001840 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c4:	e00a      	b.n	80031dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c6:	f7fe fb3b 	bl	8001840 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e0b1      	b.n	8003340 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031dc:	4b4b      	ldr	r3, [pc, #300]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0ee      	beq.n	80031c6 <HAL_RCC_OscConfig+0x37e>
 80031e8:	e014      	b.n	8003214 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ea:	f7fe fb29 	bl	8001840 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f0:	e00a      	b.n	8003208 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f2:	f7fe fb25 	bl	8001840 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003200:	4293      	cmp	r3, r2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e09b      	b.n	8003340 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003208:	4b40      	ldr	r3, [pc, #256]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1ee      	bne.n	80031f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003214:	7dfb      	ldrb	r3, [r7, #23]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d105      	bne.n	8003226 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800321a:	4b3c      	ldr	r3, [pc, #240]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	4a3b      	ldr	r2, [pc, #236]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 8003220:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003224:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 8087 	beq.w	800333e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003230:	4b36      	ldr	r3, [pc, #216]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b08      	cmp	r3, #8
 800323a:	d061      	beq.n	8003300 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d146      	bne.n	80032d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003244:	4b33      	ldr	r3, [pc, #204]	@ (8003314 <HAL_RCC_OscConfig+0x4cc>)
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324a:	f7fe faf9 	bl	8001840 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003252:	f7fe faf5 	bl	8001840 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e06d      	b.n	8003340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003264:	4b29      	ldr	r3, [pc, #164]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1f0      	bne.n	8003252 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003278:	d108      	bne.n	800328c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800327a:	4b24      	ldr	r3, [pc, #144]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	4921      	ldr	r1, [pc, #132]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 8003288:	4313      	orrs	r3, r2
 800328a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800328c:	4b1f      	ldr	r3, [pc, #124]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a19      	ldr	r1, [r3, #32]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329c:	430b      	orrs	r3, r1
 800329e:	491b      	ldr	r1, [pc, #108]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003314 <HAL_RCC_OscConfig+0x4cc>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032aa:	f7fe fac9 	bl	8001840 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b2:	f7fe fac5 	bl	8001840 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e03d      	b.n	8003340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032c4:	4b11      	ldr	r3, [pc, #68]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0x46a>
 80032d0:	e035      	b.n	800333e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d2:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <HAL_RCC_OscConfig+0x4cc>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d8:	f7fe fab2 	bl	8001840 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e0:	f7fe faae 	bl	8001840 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e026      	b.n	8003340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f2:	4b06      	ldr	r3, [pc, #24]	@ (800330c <HAL_RCC_OscConfig+0x4c4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0x498>
 80032fe:	e01e      	b.n	800333e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d107      	bne.n	8003318 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e019      	b.n	8003340 <HAL_RCC_OscConfig+0x4f8>
 800330c:	40021000 	.word	0x40021000
 8003310:	40007000 	.word	0x40007000
 8003314:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003318:	4b0b      	ldr	r3, [pc, #44]	@ (8003348 <HAL_RCC_OscConfig+0x500>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	429a      	cmp	r2, r3
 800332a:	d106      	bne.n	800333a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003336:	429a      	cmp	r2, r3
 8003338:	d001      	beq.n	800333e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40021000 	.word	0x40021000

0800334c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0d0      	b.n	8003502 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003360:	4b6a      	ldr	r3, [pc, #424]	@ (800350c <HAL_RCC_ClockConfig+0x1c0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d910      	bls.n	8003390 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336e:	4b67      	ldr	r3, [pc, #412]	@ (800350c <HAL_RCC_ClockConfig+0x1c0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f023 0207 	bic.w	r2, r3, #7
 8003376:	4965      	ldr	r1, [pc, #404]	@ (800350c <HAL_RCC_ClockConfig+0x1c0>)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	4313      	orrs	r3, r2
 800337c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800337e:	4b63      	ldr	r3, [pc, #396]	@ (800350c <HAL_RCC_ClockConfig+0x1c0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d001      	beq.n	8003390 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0b8      	b.n	8003502 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d020      	beq.n	80033de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033a8:	4b59      	ldr	r3, [pc, #356]	@ (8003510 <HAL_RCC_ClockConfig+0x1c4>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	4a58      	ldr	r2, [pc, #352]	@ (8003510 <HAL_RCC_ClockConfig+0x1c4>)
 80033ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033c0:	4b53      	ldr	r3, [pc, #332]	@ (8003510 <HAL_RCC_ClockConfig+0x1c4>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	4a52      	ldr	r2, [pc, #328]	@ (8003510 <HAL_RCC_ClockConfig+0x1c4>)
 80033c6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80033ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033cc:	4b50      	ldr	r3, [pc, #320]	@ (8003510 <HAL_RCC_ClockConfig+0x1c4>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	494d      	ldr	r1, [pc, #308]	@ (8003510 <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d040      	beq.n	800346c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d107      	bne.n	8003402 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f2:	4b47      	ldr	r3, [pc, #284]	@ (8003510 <HAL_RCC_ClockConfig+0x1c4>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d115      	bne.n	800342a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e07f      	b.n	8003502 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d107      	bne.n	800341a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340a:	4b41      	ldr	r3, [pc, #260]	@ (8003510 <HAL_RCC_ClockConfig+0x1c4>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d109      	bne.n	800342a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e073      	b.n	8003502 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341a:	4b3d      	ldr	r3, [pc, #244]	@ (8003510 <HAL_RCC_ClockConfig+0x1c4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e06b      	b.n	8003502 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800342a:	4b39      	ldr	r3, [pc, #228]	@ (8003510 <HAL_RCC_ClockConfig+0x1c4>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f023 0203 	bic.w	r2, r3, #3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	4936      	ldr	r1, [pc, #216]	@ (8003510 <HAL_RCC_ClockConfig+0x1c4>)
 8003438:	4313      	orrs	r3, r2
 800343a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800343c:	f7fe fa00 	bl	8001840 <HAL_GetTick>
 8003440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003442:	e00a      	b.n	800345a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003444:	f7fe f9fc 	bl	8001840 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d901      	bls.n	800345a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e053      	b.n	8003502 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345a:	4b2d      	ldr	r3, [pc, #180]	@ (8003510 <HAL_RCC_ClockConfig+0x1c4>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 020c 	and.w	r2, r3, #12
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	429a      	cmp	r2, r3
 800346a:	d1eb      	bne.n	8003444 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800346c:	4b27      	ldr	r3, [pc, #156]	@ (800350c <HAL_RCC_ClockConfig+0x1c0>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d210      	bcs.n	800349c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	4b24      	ldr	r3, [pc, #144]	@ (800350c <HAL_RCC_ClockConfig+0x1c0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 0207 	bic.w	r2, r3, #7
 8003482:	4922      	ldr	r1, [pc, #136]	@ (800350c <HAL_RCC_ClockConfig+0x1c0>)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348a:	4b20      	ldr	r3, [pc, #128]	@ (800350c <HAL_RCC_ClockConfig+0x1c0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e032      	b.n	8003502 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034a8:	4b19      	ldr	r3, [pc, #100]	@ (8003510 <HAL_RCC_ClockConfig+0x1c4>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4916      	ldr	r1, [pc, #88]	@ (8003510 <HAL_RCC_ClockConfig+0x1c4>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034c6:	4b12      	ldr	r3, [pc, #72]	@ (8003510 <HAL_RCC_ClockConfig+0x1c4>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	490e      	ldr	r1, [pc, #56]	@ (8003510 <HAL_RCC_ClockConfig+0x1c4>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034da:	f000 f821 	bl	8003520 <HAL_RCC_GetSysClockFreq>
 80034de:	4602      	mov	r2, r0
 80034e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003510 <HAL_RCC_ClockConfig+0x1c4>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	091b      	lsrs	r3, r3, #4
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	490a      	ldr	r1, [pc, #40]	@ (8003514 <HAL_RCC_ClockConfig+0x1c8>)
 80034ec:	5ccb      	ldrb	r3, [r1, r3]
 80034ee:	fa22 f303 	lsr.w	r3, r2, r3
 80034f2:	4a09      	ldr	r2, [pc, #36]	@ (8003518 <HAL_RCC_ClockConfig+0x1cc>)
 80034f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034f6:	4b09      	ldr	r3, [pc, #36]	@ (800351c <HAL_RCC_ClockConfig+0x1d0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe f8aa 	bl	8001654 <HAL_InitTick>

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40022000 	.word	0x40022000
 8003510:	40021000 	.word	0x40021000
 8003514:	080073a4 	.word	0x080073a4
 8003518:	20000008 	.word	0x20000008
 800351c:	2000000c 	.word	0x2000000c

08003520 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	2300      	movs	r3, #0
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	2300      	movs	r3, #0
 8003534:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800353a:	4b1e      	ldr	r3, [pc, #120]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b04      	cmp	r3, #4
 8003548:	d002      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x30>
 800354a:	2b08      	cmp	r3, #8
 800354c:	d003      	beq.n	8003556 <HAL_RCC_GetSysClockFreq+0x36>
 800354e:	e027      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003550:	4b19      	ldr	r3, [pc, #100]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003552:	613b      	str	r3, [r7, #16]
      break;
 8003554:	e027      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	0c9b      	lsrs	r3, r3, #18
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	4a17      	ldr	r2, [pc, #92]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003560:	5cd3      	ldrb	r3, [r2, r3]
 8003562:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d010      	beq.n	8003590 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800356e:	4b11      	ldr	r3, [pc, #68]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	0c5b      	lsrs	r3, r3, #17
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	4a11      	ldr	r2, [pc, #68]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800357a:	5cd3      	ldrb	r3, [r2, r3]
 800357c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a0d      	ldr	r2, [pc, #52]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003582:	fb03 f202 	mul.w	r2, r3, r2
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	fbb2 f3f3 	udiv	r3, r2, r3
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	e004      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a0c      	ldr	r2, [pc, #48]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003594:	fb02 f303 	mul.w	r3, r2, r3
 8003598:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	613b      	str	r3, [r7, #16]
      break;
 800359e:	e002      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035a0:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80035a2:	613b      	str	r3, [r7, #16]
      break;
 80035a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035a6:	693b      	ldr	r3, [r7, #16]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40021000 	.word	0x40021000
 80035b8:	007a1200 	.word	0x007a1200
 80035bc:	080073bc 	.word	0x080073bc
 80035c0:	080073cc 	.word	0x080073cc
 80035c4:	003d0900 	.word	0x003d0900

080035c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035cc:	4b02      	ldr	r3, [pc, #8]	@ (80035d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80035ce:	681b      	ldr	r3, [r3, #0]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	20000008 	.word	0x20000008

080035dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035e0:	f7ff fff2 	bl	80035c8 <HAL_RCC_GetHCLKFreq>
 80035e4:	4602      	mov	r2, r0
 80035e6:	4b05      	ldr	r3, [pc, #20]	@ (80035fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	0a1b      	lsrs	r3, r3, #8
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	4903      	ldr	r1, [pc, #12]	@ (8003600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035f2:	5ccb      	ldrb	r3, [r1, r3]
 80035f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40021000 	.word	0x40021000
 8003600:	080073b4 	.word	0x080073b4

08003604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003608:	f7ff ffde 	bl	80035c8 <HAL_RCC_GetHCLKFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	0adb      	lsrs	r3, r3, #11
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4903      	ldr	r1, [pc, #12]	@ (8003628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000
 8003628:	080073b4 	.word	0x080073b4

0800362c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	220f      	movs	r2, #15
 800363a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800363c:	4b11      	ldr	r3, [pc, #68]	@ (8003684 <HAL_RCC_GetClockConfig+0x58>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 0203 	and.w	r2, r3, #3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003648:	4b0e      	ldr	r3, [pc, #56]	@ (8003684 <HAL_RCC_GetClockConfig+0x58>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003654:	4b0b      	ldr	r3, [pc, #44]	@ (8003684 <HAL_RCC_GetClockConfig+0x58>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003660:	4b08      	ldr	r3, [pc, #32]	@ (8003684 <HAL_RCC_GetClockConfig+0x58>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	08db      	lsrs	r3, r3, #3
 8003666:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800366e:	4b06      	ldr	r3, [pc, #24]	@ (8003688 <HAL_RCC_GetClockConfig+0x5c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0207 	and.w	r2, r3, #7
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr
 8003684:	40021000 	.word	0x40021000
 8003688:	40022000 	.word	0x40022000

0800368c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003694:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <RCC_Delay+0x34>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a0a      	ldr	r2, [pc, #40]	@ (80036c4 <RCC_Delay+0x38>)
 800369a:	fba2 2303 	umull	r2, r3, r2, r3
 800369e:	0a5b      	lsrs	r3, r3, #9
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	fb02 f303 	mul.w	r3, r2, r3
 80036a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036a8:	bf00      	nop
  }
  while (Delay --);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1e5a      	subs	r2, r3, #1
 80036ae:	60fa      	str	r2, [r7, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f9      	bne.n	80036a8 <RCC_Delay+0x1c>
}
 80036b4:	bf00      	nop
 80036b6:	bf00      	nop
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr
 80036c0:	20000008 	.word	0x20000008
 80036c4:	10624dd3 	.word	0x10624dd3

080036c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e076      	b.n	80037c8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d108      	bne.n	80036f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036ea:	d009      	beq.n	8003700 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	61da      	str	r2, [r3, #28]
 80036f2:	e005      	b.n	8003700 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7fd ff06 	bl	800152c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003736:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003748:	431a      	orrs	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003770:	431a      	orrs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003784:	ea42 0103 	orr.w	r1, r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	0c1a      	lsrs	r2, r3, #16
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f002 0204 	and.w	r2, r2, #4
 80037a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	4613      	mov	r3, r2
 80037de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_SPI_Transmit+0x22>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e12d      	b.n	8003a4e <HAL_SPI_Transmit+0x27e>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037fa:	f7fe f821 	bl	8001840 <HAL_GetTick>
 80037fe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b01      	cmp	r3, #1
 800380e:	d002      	beq.n	8003816 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003810:	2302      	movs	r3, #2
 8003812:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003814:	e116      	b.n	8003a44 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <HAL_SPI_Transmit+0x52>
 800381c:	88fb      	ldrh	r3, [r7, #6]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d102      	bne.n	8003828 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003826:	e10d      	b.n	8003a44 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2203      	movs	r2, #3
 800382c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	88fa      	ldrh	r2, [r7, #6]
 8003840:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	88fa      	ldrh	r2, [r7, #6]
 8003846:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800386e:	d10f      	bne.n	8003890 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800387e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800388e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800389a:	2b40      	cmp	r3, #64	@ 0x40
 800389c:	d007      	beq.n	80038ae <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038b6:	d14f      	bne.n	8003958 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <HAL_SPI_Transmit+0xf6>
 80038c0:	8afb      	ldrh	r3, [r7, #22]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d142      	bne.n	800394c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ca:	881a      	ldrh	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d6:	1c9a      	adds	r2, r3, #2
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038ea:	e02f      	b.n	800394c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d112      	bne.n	8003920 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fe:	881a      	ldrh	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390a:	1c9a      	adds	r2, r3, #2
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800391e:	e015      	b.n	800394c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003920:	f7fd ff8e 	bl	8001840 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d803      	bhi.n	8003938 <HAL_SPI_Transmit+0x168>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003936:	d102      	bne.n	800393e <HAL_SPI_Transmit+0x16e>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800394a:	e07b      	b.n	8003a44 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1ca      	bne.n	80038ec <HAL_SPI_Transmit+0x11c>
 8003956:	e050      	b.n	80039fa <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <HAL_SPI_Transmit+0x196>
 8003960:	8afb      	ldrh	r3, [r7, #22]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d144      	bne.n	80039f0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	330c      	adds	r3, #12
 8003970:	7812      	ldrb	r2, [r2, #0]
 8003972:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800398c:	e030      	b.n	80039f0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b02      	cmp	r3, #2
 800399a:	d113      	bne.n	80039c4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	7812      	ldrb	r2, [r2, #0]
 80039a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80039c2:	e015      	b.n	80039f0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039c4:	f7fd ff3c 	bl	8001840 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d803      	bhi.n	80039dc <HAL_SPI_Transmit+0x20c>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039da:	d102      	bne.n	80039e2 <HAL_SPI_Transmit+0x212>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80039ee:	e029      	b.n	8003a44 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1c9      	bne.n	800398e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	6839      	ldr	r1, [r7, #0]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 fbcc 	bl	800419c <SPI_EndRxTxTransaction>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10a      	bne.n	8003a2e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a18:	2300      	movs	r3, #0
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	77fb      	strb	r3, [r7, #31]
 8003a3a:	e003      	b.n	8003a44 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003a4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3720      	adds	r7, #32
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b088      	sub	sp, #32
 8003a5a:	af02      	add	r7, sp, #8
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	4613      	mov	r3, r2
 8003a64:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d002      	beq.n	8003a7c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003a76:	2302      	movs	r3, #2
 8003a78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a7a:	e0fb      	b.n	8003c74 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a84:	d112      	bne.n	8003aac <HAL_SPI_Receive+0x56>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10e      	bne.n	8003aac <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2204      	movs	r2, #4
 8003a92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a96:	88fa      	ldrh	r2, [r7, #6]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 f8ef 	bl	8003c86 <HAL_SPI_TransmitReceive>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	e0e8      	b.n	8003c7e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_SPI_Receive+0x64>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e0e1      	b.n	8003c7e <HAL_SPI_Receive+0x228>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ac2:	f7fd febd 	bl	8001840 <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_SPI_Receive+0x7e>
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d102      	bne.n	8003ada <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ad8:	e0cc      	b.n	8003c74 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2204      	movs	r2, #4
 8003ade:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	88fa      	ldrh	r2, [r7, #6]
 8003af2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	88fa      	ldrh	r2, [r7, #6]
 8003af8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b20:	d10f      	bne.n	8003b42 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b40:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b4c:	2b40      	cmp	r3, #64	@ 0x40
 8003b4e:	d007      	beq.n	8003b60 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b5e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d16a      	bne.n	8003c3e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b68:	e032      	b.n	8003bd0 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d115      	bne.n	8003ba4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f103 020c 	add.w	r2, r3, #12
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b84:	7812      	ldrb	r2, [r2, #0]
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ba2:	e015      	b.n	8003bd0 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ba4:	f7fd fe4c 	bl	8001840 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d803      	bhi.n	8003bbc <HAL_SPI_Receive+0x166>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bba:	d102      	bne.n	8003bc2 <HAL_SPI_Receive+0x16c>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003bce:	e051      	b.n	8003c74 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1c7      	bne.n	8003b6a <HAL_SPI_Receive+0x114>
 8003bda:	e035      	b.n	8003c48 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d113      	bne.n	8003c12 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf4:	b292      	uxth	r2, r2
 8003bf6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfc:	1c9a      	adds	r2, r3, #2
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c10:	e015      	b.n	8003c3e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c12:	f7fd fe15 	bl	8001840 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d803      	bhi.n	8003c2a <HAL_SPI_Receive+0x1d4>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c28:	d102      	bne.n	8003c30 <HAL_SPI_Receive+0x1da>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d106      	bne.n	8003c3e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003c3c:	e01a      	b.n	8003c74 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1c9      	bne.n	8003bdc <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	6839      	ldr	r1, [r7, #0]
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 fa53 	bl	80040f8 <SPI_EndRxTransaction>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	75fb      	strb	r3, [r7, #23]
 8003c6a:	e003      	b.n	8003c74 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b08c      	sub	sp, #48	@ 0x30
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	607a      	str	r2, [r7, #4]
 8003c92:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c94:	2301      	movs	r3, #1
 8003c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x26>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e198      	b.n	8003fde <HAL_SPI_TransmitReceive+0x358>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cb4:	f7fd fdc4 	bl	8001840 <HAL_GetTick>
 8003cb8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003cca:	887b      	ldrh	r3, [r7, #2]
 8003ccc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d00f      	beq.n	8003cf6 <HAL_SPI_TransmitReceive+0x70>
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cdc:	d107      	bne.n	8003cee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d103      	bne.n	8003cee <HAL_SPI_TransmitReceive+0x68>
 8003ce6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d003      	beq.n	8003cf6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003cf4:	e16d      	b.n	8003fd2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_SPI_TransmitReceive+0x82>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <HAL_SPI_TransmitReceive+0x82>
 8003d02:	887b      	ldrh	r3, [r7, #2]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d103      	bne.n	8003d10 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003d0e:	e160      	b.n	8003fd2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d003      	beq.n	8003d24 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2205      	movs	r2, #5
 8003d20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	887a      	ldrh	r2, [r7, #2]
 8003d34:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	887a      	ldrh	r2, [r7, #2]
 8003d3a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	887a      	ldrh	r2, [r7, #2]
 8003d46:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	887a      	ldrh	r2, [r7, #2]
 8003d4c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d64:	2b40      	cmp	r3, #64	@ 0x40
 8003d66:	d007      	beq.n	8003d78 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d80:	d17c      	bne.n	8003e7c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <HAL_SPI_TransmitReceive+0x10a>
 8003d8a:	8b7b      	ldrh	r3, [r7, #26]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d16a      	bne.n	8003e66 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d94:	881a      	ldrh	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da0:	1c9a      	adds	r2, r3, #2
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003db4:	e057      	b.n	8003e66 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d11b      	bne.n	8003dfc <HAL_SPI_TransmitReceive+0x176>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d016      	beq.n	8003dfc <HAL_SPI_TransmitReceive+0x176>
 8003dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d113      	bne.n	8003dfc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd8:	881a      	ldrh	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de4:	1c9a      	adds	r2, r3, #2
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d119      	bne.n	8003e3e <HAL_SPI_TransmitReceive+0x1b8>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d014      	beq.n	8003e3e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1e:	b292      	uxth	r2, r2
 8003e20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e26:	1c9a      	adds	r2, r3, #2
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e3e:	f7fd fcff 	bl	8001840 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d80b      	bhi.n	8003e66 <HAL_SPI_TransmitReceive+0x1e0>
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e54:	d007      	beq.n	8003e66 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003e64:	e0b5      	b.n	8003fd2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1a2      	bne.n	8003db6 <HAL_SPI_TransmitReceive+0x130>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d19d      	bne.n	8003db6 <HAL_SPI_TransmitReceive+0x130>
 8003e7a:	e080      	b.n	8003f7e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <HAL_SPI_TransmitReceive+0x204>
 8003e84:	8b7b      	ldrh	r3, [r7, #26]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d16f      	bne.n	8003f6a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	330c      	adds	r3, #12
 8003e94:	7812      	ldrb	r2, [r2, #0]
 8003e96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eb0:	e05b      	b.n	8003f6a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d11c      	bne.n	8003efa <HAL_SPI_TransmitReceive+0x274>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d017      	beq.n	8003efa <HAL_SPI_TransmitReceive+0x274>
 8003eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d114      	bne.n	8003efa <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	330c      	adds	r3, #12
 8003eda:	7812      	ldrb	r2, [r2, #0]
 8003edc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d119      	bne.n	8003f3c <HAL_SPI_TransmitReceive+0x2b6>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d014      	beq.n	8003f3c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f3c:	f7fd fc80 	bl	8001840 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d803      	bhi.n	8003f54 <HAL_SPI_TransmitReceive+0x2ce>
 8003f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f52:	d102      	bne.n	8003f5a <HAL_SPI_TransmitReceive+0x2d4>
 8003f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d107      	bne.n	8003f6a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003f68:	e033      	b.n	8003fd2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d19e      	bne.n	8003eb2 <HAL_SPI_TransmitReceive+0x22c>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d199      	bne.n	8003eb2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f80:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f90a 	bl	800419c <SPI_EndRxTxTransaction>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d006      	beq.n	8003f9c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003f9a:	e01a      	b.n	8003fd2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10a      	bne.n	8003fba <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fc8:	e003      	b.n	8003fd2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003fda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3730      	adds	r7, #48	@ 0x30
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ff8:	f7fd fc22 	bl	8001840 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004000:	1a9b      	subs	r3, r3, r2
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	4413      	add	r3, r2
 8004006:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004008:	f7fd fc1a 	bl	8001840 <HAL_GetTick>
 800400c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800400e:	4b39      	ldr	r3, [pc, #228]	@ (80040f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	015b      	lsls	r3, r3, #5
 8004014:	0d1b      	lsrs	r3, r3, #20
 8004016:	69fa      	ldr	r2, [r7, #28]
 8004018:	fb02 f303 	mul.w	r3, r2, r3
 800401c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800401e:	e054      	b.n	80040ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004026:	d050      	beq.n	80040ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004028:	f7fd fc0a 	bl	8001840 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	69fa      	ldr	r2, [r7, #28]
 8004034:	429a      	cmp	r2, r3
 8004036:	d902      	bls.n	800403e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d13d      	bne.n	80040ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800404c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004056:	d111      	bne.n	800407c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004060:	d004      	beq.n	800406c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800406a:	d107      	bne.n	800407c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800407a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004080:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004084:	d10f      	bne.n	80040a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e017      	b.n	80040ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4013      	ands	r3, r2
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	bf0c      	ite	eq
 80040da:	2301      	moveq	r3, #1
 80040dc:	2300      	movne	r3, #0
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	461a      	mov	r2, r3
 80040e2:	79fb      	ldrb	r3, [r7, #7]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d19b      	bne.n	8004020 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3720      	adds	r7, #32
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20000008 	.word	0x20000008

080040f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af02      	add	r7, sp, #8
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800410c:	d111      	bne.n	8004132 <SPI_EndRxTransaction+0x3a>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004116:	d004      	beq.n	8004122 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004120:	d107      	bne.n	8004132 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004130:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800413a:	d117      	bne.n	800416c <SPI_EndRxTransaction+0x74>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004144:	d112      	bne.n	800416c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2200      	movs	r2, #0
 800414e:	2101      	movs	r1, #1
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff ff49 	bl	8003fe8 <SPI_WaitFlagStateUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01a      	beq.n	8004192 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004160:	f043 0220 	orr.w	r2, r3, #32
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e013      	b.n	8004194 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2200      	movs	r2, #0
 8004174:	2180      	movs	r1, #128	@ 0x80
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f7ff ff36 	bl	8003fe8 <SPI_WaitFlagStateUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d007      	beq.n	8004192 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004186:	f043 0220 	orr.w	r2, r3, #32
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e000      	b.n	8004194 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2200      	movs	r2, #0
 80041b0:	2180      	movs	r1, #128	@ 0x80
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f7ff ff18 	bl	8003fe8 <SPI_WaitFlagStateUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d007      	beq.n	80041ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c2:	f043 0220 	orr.w	r2, r3, #32
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e000      	b.n	80041d0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e041      	b.n	800426e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f839 	bl	8004276 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3304      	adds	r3, #4
 8004214:	4619      	mov	r1, r3
 8004216:	4610      	mov	r0, r2
 8004218:	f000 f9b4 	bl	8004584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b01      	cmp	r3, #1
 800429a:	d001      	beq.n	80042a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e03a      	b.n	8004316 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a18      	ldr	r2, [pc, #96]	@ (8004320 <HAL_TIM_Base_Start_IT+0x98>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00e      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0x58>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ca:	d009      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0x58>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a14      	ldr	r2, [pc, #80]	@ (8004324 <HAL_TIM_Base_Start_IT+0x9c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d004      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0x58>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a13      	ldr	r2, [pc, #76]	@ (8004328 <HAL_TIM_Base_Start_IT+0xa0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d111      	bne.n	8004304 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b06      	cmp	r3, #6
 80042f0:	d010      	beq.n	8004314 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0201 	orr.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004302:	e007      	b.n	8004314 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr
 8004320:	40012c00 	.word	0x40012c00
 8004324:	40000400 	.word	0x40000400
 8004328:	40000800 	.word	0x40000800

0800432c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b02      	cmp	r3, #2
 8004340:	d122      	bne.n	8004388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b02      	cmp	r3, #2
 800434e:	d11b      	bne.n	8004388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0202 	mvn.w	r2, #2
 8004358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f8ed 	bl	800454e <HAL_TIM_IC_CaptureCallback>
 8004374:	e005      	b.n	8004382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f8e0 	bl	800453c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f8ef 	bl	8004560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0304 	and.w	r3, r3, #4
 8004392:	2b04      	cmp	r3, #4
 8004394:	d122      	bne.n	80043dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d11b      	bne.n	80043dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0204 	mvn.w	r2, #4
 80043ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2202      	movs	r2, #2
 80043b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f8c3 	bl	800454e <HAL_TIM_IC_CaptureCallback>
 80043c8:	e005      	b.n	80043d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f8b6 	bl	800453c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f8c5 	bl	8004560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d122      	bne.n	8004430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d11b      	bne.n	8004430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f06f 0208 	mvn.w	r2, #8
 8004400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2204      	movs	r2, #4
 8004406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f899 	bl	800454e <HAL_TIM_IC_CaptureCallback>
 800441c:	e005      	b.n	800442a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f88c 	bl	800453c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f89b 	bl	8004560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0310 	and.w	r3, r3, #16
 800443a:	2b10      	cmp	r3, #16
 800443c:	d122      	bne.n	8004484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	2b10      	cmp	r3, #16
 800444a:	d11b      	bne.n	8004484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0210 	mvn.w	r2, #16
 8004454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2208      	movs	r2, #8
 800445a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f86f 	bl	800454e <HAL_TIM_IC_CaptureCallback>
 8004470:	e005      	b.n	800447e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f862 	bl	800453c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f871 	bl	8004560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b01      	cmp	r3, #1
 8004490:	d10e      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b01      	cmp	r3, #1
 800449e:	d107      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f06f 0201 	mvn.w	r2, #1
 80044a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7fc ffb0 	bl	8001410 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ba:	2b80      	cmp	r3, #128	@ 0x80
 80044bc:	d10e      	bne.n	80044dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c8:	2b80      	cmp	r3, #128	@ 0x80
 80044ca:	d107      	bne.n	80044dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80044d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f8bf 	bl	800465a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e6:	2b40      	cmp	r3, #64	@ 0x40
 80044e8:	d10e      	bne.n	8004508 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f4:	2b40      	cmp	r3, #64	@ 0x40
 80044f6:	d107      	bne.n	8004508 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f835 	bl	8004572 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f003 0320 	and.w	r3, r3, #32
 8004512:	2b20      	cmp	r3, #32
 8004514:	d10e      	bne.n	8004534 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b20      	cmp	r3, #32
 8004522:	d107      	bne.n	8004534 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0220 	mvn.w	r2, #32
 800452c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f88a 	bl	8004648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004534:	bf00      	nop
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr

0800454e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr

08004560 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr

08004572 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr

08004584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a29      	ldr	r2, [pc, #164]	@ (800463c <TIM_Base_SetConfig+0xb8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00b      	beq.n	80045b4 <TIM_Base_SetConfig+0x30>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a2:	d007      	beq.n	80045b4 <TIM_Base_SetConfig+0x30>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a26      	ldr	r2, [pc, #152]	@ (8004640 <TIM_Base_SetConfig+0xbc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d003      	beq.n	80045b4 <TIM_Base_SetConfig+0x30>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a25      	ldr	r2, [pc, #148]	@ (8004644 <TIM_Base_SetConfig+0xc0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d108      	bne.n	80045c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a1c      	ldr	r2, [pc, #112]	@ (800463c <TIM_Base_SetConfig+0xb8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00b      	beq.n	80045e6 <TIM_Base_SetConfig+0x62>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045d4:	d007      	beq.n	80045e6 <TIM_Base_SetConfig+0x62>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a19      	ldr	r2, [pc, #100]	@ (8004640 <TIM_Base_SetConfig+0xbc>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d003      	beq.n	80045e6 <TIM_Base_SetConfig+0x62>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a18      	ldr	r2, [pc, #96]	@ (8004644 <TIM_Base_SetConfig+0xc0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d108      	bne.n	80045f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a07      	ldr	r2, [pc, #28]	@ (800463c <TIM_Base_SetConfig+0xb8>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d103      	bne.n	800462c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	615a      	str	r2, [r3, #20]
}
 8004632:	bf00      	nop
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr
 800463c:	40012c00 	.word	0x40012c00
 8004640:	40000400 	.word	0x40000400
 8004644:	40000800 	.word	0x40000800

08004648 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr

0800465a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e042      	b.n	8004704 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fc ff94 	bl	80015c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2224      	movs	r2, #36	@ 0x24
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f82b 	bl	800470c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	4313      	orrs	r3, r2
 800473a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004746:	f023 030c 	bic.w	r3, r3, #12
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6812      	ldr	r2, [r2, #0]
 800474e:	68b9      	ldr	r1, [r7, #8]
 8004750:	430b      	orrs	r3, r1
 8004752:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a2c      	ldr	r2, [pc, #176]	@ (8004820 <UART_SetConfig+0x114>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d103      	bne.n	800477c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004774:	f7fe ff46 	bl	8003604 <HAL_RCC_GetPCLK2Freq>
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	e002      	b.n	8004782 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800477c:	f7fe ff2e 	bl	80035dc <HAL_RCC_GetPCLK1Freq>
 8004780:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	009a      	lsls	r2, r3, #2
 800478c:	441a      	add	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	fbb2 f3f3 	udiv	r3, r2, r3
 8004798:	4a22      	ldr	r2, [pc, #136]	@ (8004824 <UART_SetConfig+0x118>)
 800479a:	fba2 2303 	umull	r2, r3, r2, r3
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	0119      	lsls	r1, r3, #4
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	009a      	lsls	r2, r3, #2
 80047ac:	441a      	add	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004824 <UART_SetConfig+0x118>)
 80047ba:	fba3 0302 	umull	r0, r3, r3, r2
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	2064      	movs	r0, #100	@ 0x64
 80047c2:	fb00 f303 	mul.w	r3, r0, r3
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	3332      	adds	r3, #50	@ 0x32
 80047cc:	4a15      	ldr	r2, [pc, #84]	@ (8004824 <UART_SetConfig+0x118>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047d8:	4419      	add	r1, r3
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	009a      	lsls	r2, r3, #2
 80047e4:	441a      	add	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80047f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004824 <UART_SetConfig+0x118>)
 80047f2:	fba3 0302 	umull	r0, r3, r3, r2
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	2064      	movs	r0, #100	@ 0x64
 80047fa:	fb00 f303 	mul.w	r3, r0, r3
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	3332      	adds	r3, #50	@ 0x32
 8004804:	4a07      	ldr	r2, [pc, #28]	@ (8004824 <UART_SetConfig+0x118>)
 8004806:	fba2 2303 	umull	r2, r3, r2, r3
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	f003 020f 	and.w	r2, r3, #15
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	440a      	add	r2, r1
 8004816:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004818:	bf00      	nop
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40013800 	.word	0x40013800
 8004824:	51eb851f 	.word	0x51eb851f

08004828 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800482e:	f3ef 8305 	mrs	r3, IPSR
 8004832:	60bb      	str	r3, [r7, #8]
  return(result);
 8004834:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10f      	bne.n	800485a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800483a:	f3ef 8310 	mrs	r3, PRIMASK
 800483e:	607b      	str	r3, [r7, #4]
  return(result);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <osKernelInitialize+0x32>
 8004846:	4b10      	ldr	r3, [pc, #64]	@ (8004888 <osKernelInitialize+0x60>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d109      	bne.n	8004862 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800484e:	f3ef 8311 	mrs	r3, BASEPRI
 8004852:	603b      	str	r3, [r7, #0]
  return(result);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800485a:	f06f 0305 	mvn.w	r3, #5
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	e00c      	b.n	800487c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004862:	4b09      	ldr	r3, [pc, #36]	@ (8004888 <osKernelInitialize+0x60>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d105      	bne.n	8004876 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800486a:	4b07      	ldr	r3, [pc, #28]	@ (8004888 <osKernelInitialize+0x60>)
 800486c:	2201      	movs	r2, #1
 800486e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	e002      	b.n	800487c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004876:	f04f 33ff 	mov.w	r3, #4294967295
 800487a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800487c:	68fb      	ldr	r3, [r7, #12]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr
 8004888:	20000204 	.word	0x20000204

0800488c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004892:	f3ef 8305 	mrs	r3, IPSR
 8004896:	60bb      	str	r3, [r7, #8]
  return(result);
 8004898:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10f      	bne.n	80048be <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800489e:	f3ef 8310 	mrs	r3, PRIMASK
 80048a2:	607b      	str	r3, [r7, #4]
  return(result);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d109      	bne.n	80048be <osKernelStart+0x32>
 80048aa:	4b11      	ldr	r3, [pc, #68]	@ (80048f0 <osKernelStart+0x64>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d109      	bne.n	80048c6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048b2:	f3ef 8311 	mrs	r3, BASEPRI
 80048b6:	603b      	str	r3, [r7, #0]
  return(result);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80048be:	f06f 0305 	mvn.w	r3, #5
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	e00e      	b.n	80048e4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80048c6:	4b0a      	ldr	r3, [pc, #40]	@ (80048f0 <osKernelStart+0x64>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d107      	bne.n	80048de <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80048ce:	4b08      	ldr	r3, [pc, #32]	@ (80048f0 <osKernelStart+0x64>)
 80048d0:	2202      	movs	r2, #2
 80048d2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80048d4:	f001 f890 	bl	80059f8 <vTaskStartScheduler>
      stat = osOK;
 80048d8:	2300      	movs	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	e002      	b.n	80048e4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80048de:	f04f 33ff 	mov.w	r3, #4294967295
 80048e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80048e4:	68fb      	ldr	r3, [r7, #12]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000204 	.word	0x20000204

080048f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b092      	sub	sp, #72	@ 0x48
 80048f8:	af04      	add	r7, sp, #16
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004900:	2300      	movs	r3, #0
 8004902:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004904:	f3ef 8305 	mrs	r3, IPSR
 8004908:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800490a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800490c:	2b00      	cmp	r3, #0
 800490e:	f040 8094 	bne.w	8004a3a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004912:	f3ef 8310 	mrs	r3, PRIMASK
 8004916:	623b      	str	r3, [r7, #32]
  return(result);
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	2b00      	cmp	r3, #0
 800491c:	f040 808d 	bne.w	8004a3a <osThreadNew+0x146>
 8004920:	4b48      	ldr	r3, [pc, #288]	@ (8004a44 <osThreadNew+0x150>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b02      	cmp	r3, #2
 8004926:	d106      	bne.n	8004936 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004928:	f3ef 8311 	mrs	r3, BASEPRI
 800492c:	61fb      	str	r3, [r7, #28]
  return(result);
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	2b00      	cmp	r3, #0
 8004932:	f040 8082 	bne.w	8004a3a <osThreadNew+0x146>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d07e      	beq.n	8004a3a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800493c:	2380      	movs	r3, #128	@ 0x80
 800493e:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004940:	2318      	movs	r3, #24
 8004942:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8004944:	2300      	movs	r3, #0
 8004946:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004948:	f107 031b 	add.w	r3, r7, #27
 800494c:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800494e:	f04f 33ff 	mov.w	r3, #4294967295
 8004952:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d045      	beq.n	80049e6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <osThreadNew+0x74>
        name = attr->name;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <osThreadNew+0x9a>
 800497c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800497e:	2b38      	cmp	r3, #56	@ 0x38
 8004980:	d805      	bhi.n	800498e <osThreadNew+0x9a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <osThreadNew+0x9e>
        return (NULL);
 800498e:	2300      	movs	r3, #0
 8004990:	e054      	b.n	8004a3c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	089b      	lsrs	r3, r3, #2
 80049a0:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00e      	beq.n	80049c8 <osThreadNew+0xd4>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2b5b      	cmp	r3, #91	@ 0x5b
 80049b0:	d90a      	bls.n	80049c8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d006      	beq.n	80049c8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <osThreadNew+0xd4>
        mem = 1;
 80049c2:	2301      	movs	r3, #1
 80049c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049c6:	e010      	b.n	80049ea <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10c      	bne.n	80049ea <osThreadNew+0xf6>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d108      	bne.n	80049ea <osThreadNew+0xf6>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d104      	bne.n	80049ea <osThreadNew+0xf6>
          mem = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049e4:	e001      	b.n	80049ea <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80049e6:	2300      	movs	r3, #0
 80049e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80049ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d110      	bne.n	8004a12 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80049f8:	9202      	str	r2, [sp, #8]
 80049fa:	9301      	str	r3, [sp, #4]
 80049fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a04:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 fe24 	bl	8005654 <xTaskCreateStatic>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	e013      	b.n	8004a3a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d110      	bne.n	8004a3a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	f107 0314 	add.w	r3, r7, #20
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 fe71 	bl	8005712 <xTaskCreate>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d001      	beq.n	8004a3a <osThreadNew+0x146>
          hTask = NULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a3a:	697b      	ldr	r3, [r7, #20]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3738      	adds	r7, #56	@ 0x38
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	20000204 	.word	0x20000204

08004a48 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a50:	f3ef 8305 	mrs	r3, IPSR
 8004a54:	613b      	str	r3, [r7, #16]
  return(result);
 8004a56:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10f      	bne.n	8004a7c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a60:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d109      	bne.n	8004a7c <osDelay+0x34>
 8004a68:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa0 <osDelay+0x58>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d109      	bne.n	8004a84 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a70:	f3ef 8311 	mrs	r3, BASEPRI
 8004a74:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <osDelay+0x3c>
    stat = osErrorISR;
 8004a7c:	f06f 0305 	mvn.w	r3, #5
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	e007      	b.n	8004a94 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 ff7c 	bl	800598c <vTaskDelay>
    }
  }

  return (stat);
 8004a94:	697b      	ldr	r3, [r7, #20]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000204 	.word	0x20000204

08004aa4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4a06      	ldr	r2, [pc, #24]	@ (8004acc <vApplicationGetIdleTaskMemory+0x28>)
 8004ab4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	4a05      	ldr	r2, [pc, #20]	@ (8004ad0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004aba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2280      	movs	r2, #128	@ 0x80
 8004ac0:	601a      	str	r2, [r3, #0]
}
 8004ac2:	bf00      	nop
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr
 8004acc:	20000208 	.word	0x20000208
 8004ad0:	20000264 	.word	0x20000264

08004ad4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4a07      	ldr	r2, [pc, #28]	@ (8004b00 <vApplicationGetTimerTaskMemory+0x2c>)
 8004ae4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4a06      	ldr	r2, [pc, #24]	@ (8004b04 <vApplicationGetTimerTaskMemory+0x30>)
 8004aea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004af2:	601a      	str	r2, [r3, #0]
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bc80      	pop	{r7}
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	20000464 	.word	0x20000464
 8004b04:	200004c0 	.word	0x200004c0

08004b08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f103 0208 	add.w	r2, r3, #8
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f103 0208 	add.w	r2, r3, #8
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f103 0208 	add.w	r2, r3, #8
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr

08004b46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc80      	pop	{r7}
 8004b5c:	4770      	bx	lr

08004b5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b085      	sub	sp, #20
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	601a      	str	r2, [r3, #0]
}
 8004b9a:	bf00      	nop
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr

08004ba4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bba:	d103      	bne.n	8004bc4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	e00c      	b.n	8004bde <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3308      	adds	r3, #8
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	e002      	b.n	8004bd2 <vListInsert+0x2e>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d2f6      	bcs.n	8004bcc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	601a      	str	r2, [r3, #0]
}
 8004c0a:	bf00      	nop
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr

08004c14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6892      	ldr	r2, [r2, #8]
 8004c2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6852      	ldr	r2, [r2, #4]
 8004c34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d103      	bne.n	8004c48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	1e5a      	subs	r2, r3, #1
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bc80      	pop	{r7}
 8004c64:	4770      	bx	lr
	...

08004c68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10b      	bne.n	8004c94 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c8e:	bf00      	nop
 8004c90:	bf00      	nop
 8004c92:	e7fd      	b.n	8004c90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c94:	f001 fffa 	bl	8006c8c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca0:	68f9      	ldr	r1, [r7, #12]
 8004ca2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ca4:	fb01 f303 	mul.w	r3, r1, r3
 8004ca8:	441a      	add	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	68f9      	ldr	r1, [r7, #12]
 8004cc8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004cca:	fb01 f303 	mul.w	r3, r1, r3
 8004cce:	441a      	add	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	22ff      	movs	r2, #255	@ 0xff
 8004cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	22ff      	movs	r2, #255	@ 0xff
 8004ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d114      	bne.n	8004d14 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d01a      	beq.n	8004d28 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3310      	adds	r3, #16
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f001 f910 	bl	8005f1c <xTaskRemoveFromEventList>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d012      	beq.n	8004d28 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d02:	4b0d      	ldr	r3, [pc, #52]	@ (8004d38 <xQueueGenericReset+0xd0>)
 8004d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	e009      	b.n	8004d28 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3310      	adds	r3, #16
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff fef5 	bl	8004b08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3324      	adds	r3, #36	@ 0x24
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff fef0 	bl	8004b08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d28:	f001 ffe0 	bl	8006cec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d2c:	2301      	movs	r3, #1
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	e000ed04 	.word	0xe000ed04

08004d3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08e      	sub	sp, #56	@ 0x38
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10b      	bne.n	8004d68 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004d62:	bf00      	nop
 8004d64:	bf00      	nop
 8004d66:	e7fd      	b.n	8004d64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10b      	bne.n	8004d86 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d80:	bf00      	nop
 8004d82:	bf00      	nop
 8004d84:	e7fd      	b.n	8004d82 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <xQueueGenericCreateStatic+0x56>
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <xQueueGenericCreateStatic+0x5a>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <xQueueGenericCreateStatic+0x5c>
 8004d96:	2300      	movs	r3, #0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10b      	bne.n	8004db4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	623b      	str	r3, [r7, #32]
}
 8004dae:	bf00      	nop
 8004db0:	bf00      	nop
 8004db2:	e7fd      	b.n	8004db0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d102      	bne.n	8004dc0 <xQueueGenericCreateStatic+0x84>
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <xQueueGenericCreateStatic+0x88>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <xQueueGenericCreateStatic+0x8a>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10b      	bne.n	8004de2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	61fb      	str	r3, [r7, #28]
}
 8004ddc:	bf00      	nop
 8004dde:	bf00      	nop
 8004de0:	e7fd      	b.n	8004dde <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004de2:	2350      	movs	r3, #80	@ 0x50
 8004de4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b50      	cmp	r3, #80	@ 0x50
 8004dea:	d00b      	beq.n	8004e04 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	61bb      	str	r3, [r7, #24]
}
 8004dfe:	bf00      	nop
 8004e00:	bf00      	nop
 8004e02:	e7fd      	b.n	8004e00 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00d      	beq.n	8004e2a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e16:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 f805 	bl	8004e34 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3730      	adds	r7, #48	@ 0x30
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d103      	bne.n	8004e50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	e002      	b.n	8004e56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e62:	2101      	movs	r1, #1
 8004e64:	69b8      	ldr	r0, [r7, #24]
 8004e66:	f7ff feff 	bl	8004c68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	78fa      	ldrb	r2, [r7, #3]
 8004e6e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e72:	bf00      	nop
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08e      	sub	sp, #56	@ 0x38
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10b      	bne.n	8004eb0 <xQueueGenericSend+0x34>
	__asm volatile
 8004e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004eaa:	bf00      	nop
 8004eac:	bf00      	nop
 8004eae:	e7fd      	b.n	8004eac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d103      	bne.n	8004ebe <xQueueGenericSend+0x42>
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <xQueueGenericSend+0x46>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <xQueueGenericSend+0x48>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10b      	bne.n	8004ee0 <xQueueGenericSend+0x64>
	__asm volatile
 8004ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004eda:	bf00      	nop
 8004edc:	bf00      	nop
 8004ede:	e7fd      	b.n	8004edc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d103      	bne.n	8004eee <xQueueGenericSend+0x72>
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <xQueueGenericSend+0x76>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <xQueueGenericSend+0x78>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10b      	bne.n	8004f10 <xQueueGenericSend+0x94>
	__asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	623b      	str	r3, [r7, #32]
}
 8004f0a:	bf00      	nop
 8004f0c:	bf00      	nop
 8004f0e:	e7fd      	b.n	8004f0c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f10:	f001 f9c8 	bl	80062a4 <xTaskGetSchedulerState>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d102      	bne.n	8004f20 <xQueueGenericSend+0xa4>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <xQueueGenericSend+0xa8>
 8004f20:	2301      	movs	r3, #1
 8004f22:	e000      	b.n	8004f26 <xQueueGenericSend+0xaa>
 8004f24:	2300      	movs	r3, #0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10b      	bne.n	8004f42 <xQueueGenericSend+0xc6>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	61fb      	str	r3, [r7, #28]
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	e7fd      	b.n	8004f3e <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f42:	f001 fea3 	bl	8006c8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d302      	bcc.n	8004f58 <xQueueGenericSend+0xdc>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d129      	bne.n	8004fac <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f5e:	f000 fa0d 	bl	800537c <prvCopyDataToQueue>
 8004f62:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d010      	beq.n	8004f8e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6e:	3324      	adds	r3, #36	@ 0x24
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 ffd3 	bl	8005f1c <xTaskRemoveFromEventList>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d013      	beq.n	8004fa4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800507c <xQueueGenericSend+0x200>)
 8004f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	e00a      	b.n	8004fa4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d007      	beq.n	8004fa4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f94:	4b39      	ldr	r3, [pc, #228]	@ (800507c <xQueueGenericSend+0x200>)
 8004f96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004fa4:	f001 fea2 	bl	8006cec <vPortExitCritical>
				return pdPASS;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e063      	b.n	8005074 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d103      	bne.n	8004fba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fb2:	f001 fe9b 	bl	8006cec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e05c      	b.n	8005074 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d106      	bne.n	8004fce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fc0:	f107 0314 	add.w	r3, r7, #20
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f001 f80d 	bl	8005fe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fce:	f001 fe8d 	bl	8006cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fd2:	f000 fd79 	bl	8005ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fd6:	f001 fe59 	bl	8006c8c <vPortEnterCritical>
 8004fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fe0:	b25b      	sxtb	r3, r3
 8004fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe6:	d103      	bne.n	8004ff0 <xQueueGenericSend+0x174>
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ff6:	b25b      	sxtb	r3, r3
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffc:	d103      	bne.n	8005006 <xQueueGenericSend+0x18a>
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005006:	f001 fe71 	bl	8006cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800500a:	1d3a      	adds	r2, r7, #4
 800500c:	f107 0314 	add.w	r3, r7, #20
 8005010:	4611      	mov	r1, r2
 8005012:	4618      	mov	r0, r3
 8005014:	f000 fffc 	bl	8006010 <xTaskCheckForTimeOut>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d124      	bne.n	8005068 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800501e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005020:	f000 faa4 	bl	800556c <prvIsQueueFull>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d018      	beq.n	800505c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800502a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502c:	3310      	adds	r3, #16
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	4611      	mov	r1, r2
 8005032:	4618      	mov	r0, r3
 8005034:	f000 ff20 	bl	8005e78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005038:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800503a:	f000 fa2f 	bl	800549c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800503e:	f000 fd51 	bl	8005ae4 <xTaskResumeAll>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	f47f af7c 	bne.w	8004f42 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800504a:	4b0c      	ldr	r3, [pc, #48]	@ (800507c <xQueueGenericSend+0x200>)
 800504c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	e772      	b.n	8004f42 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800505c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800505e:	f000 fa1d 	bl	800549c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005062:	f000 fd3f 	bl	8005ae4 <xTaskResumeAll>
 8005066:	e76c      	b.n	8004f42 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005068:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800506a:	f000 fa17 	bl	800549c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800506e:	f000 fd39 	bl	8005ae4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005072:	2300      	movs	r3, #0
		}
	}
}
 8005074:	4618      	mov	r0, r3
 8005076:	3738      	adds	r7, #56	@ 0x38
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	e000ed04 	.word	0xe000ed04

08005080 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08e      	sub	sp, #56	@ 0x38
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10b      	bne.n	80050b0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050aa:	bf00      	nop
 80050ac:	bf00      	nop
 80050ae:	e7fd      	b.n	80050ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d103      	bne.n	80050be <xQueueGenericSendFromISR+0x3e>
 80050b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <xQueueGenericSendFromISR+0x42>
 80050be:	2301      	movs	r3, #1
 80050c0:	e000      	b.n	80050c4 <xQueueGenericSendFromISR+0x44>
 80050c2:	2300      	movs	r3, #0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10b      	bne.n	80050e0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	623b      	str	r3, [r7, #32]
}
 80050da:	bf00      	nop
 80050dc:	bf00      	nop
 80050de:	e7fd      	b.n	80050dc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d103      	bne.n	80050ee <xQueueGenericSendFromISR+0x6e>
 80050e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <xQueueGenericSendFromISR+0x72>
 80050ee:	2301      	movs	r3, #1
 80050f0:	e000      	b.n	80050f4 <xQueueGenericSendFromISR+0x74>
 80050f2:	2300      	movs	r3, #0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10b      	bne.n	8005110 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80050f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	61fb      	str	r3, [r7, #28]
}
 800510a:	bf00      	nop
 800510c:	bf00      	nop
 800510e:	e7fd      	b.n	800510c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005110:	f001 fe7e 	bl	8006e10 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005114:	f3ef 8211 	mrs	r2, BASEPRI
 8005118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511c:	f383 8811 	msr	BASEPRI, r3
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	61ba      	str	r2, [r7, #24]
 800512a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800512c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800512e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005132:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005138:	429a      	cmp	r2, r3
 800513a:	d302      	bcc.n	8005142 <xQueueGenericSendFromISR+0xc2>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d12c      	bne.n	800519c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005144:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005148:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	68b9      	ldr	r1, [r7, #8]
 8005150:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005152:	f000 f913 	bl	800537c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005156:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800515a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515e:	d112      	bne.n	8005186 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005164:	2b00      	cmp	r3, #0
 8005166:	d016      	beq.n	8005196 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516a:	3324      	adds	r3, #36	@ 0x24
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fed5 	bl	8005f1c <xTaskRemoveFromEventList>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00e      	beq.n	8005196 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00b      	beq.n	8005196 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	e007      	b.n	8005196 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005186:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800518a:	3301      	adds	r3, #1
 800518c:	b2db      	uxtb	r3, r3
 800518e:	b25a      	sxtb	r2, r3
 8005190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005192:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005196:	2301      	movs	r3, #1
 8005198:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800519a:	e001      	b.n	80051a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800519c:	2300      	movs	r3, #0
 800519e:	637b      	str	r3, [r7, #52]	@ 0x34
 80051a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3738      	adds	r7, #56	@ 0x38
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08c      	sub	sp, #48	@ 0x30
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051c4:	2300      	movs	r3, #0
 80051c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10b      	bne.n	80051ea <xQueueReceive+0x32>
	__asm volatile
 80051d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	623b      	str	r3, [r7, #32]
}
 80051e4:	bf00      	nop
 80051e6:	bf00      	nop
 80051e8:	e7fd      	b.n	80051e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d103      	bne.n	80051f8 <xQueueReceive+0x40>
 80051f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <xQueueReceive+0x44>
 80051f8:	2301      	movs	r3, #1
 80051fa:	e000      	b.n	80051fe <xQueueReceive+0x46>
 80051fc:	2300      	movs	r3, #0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10b      	bne.n	800521a <xQueueReceive+0x62>
	__asm volatile
 8005202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	61fb      	str	r3, [r7, #28]
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop
 8005218:	e7fd      	b.n	8005216 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800521a:	f001 f843 	bl	80062a4 <xTaskGetSchedulerState>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d102      	bne.n	800522a <xQueueReceive+0x72>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <xQueueReceive+0x76>
 800522a:	2301      	movs	r3, #1
 800522c:	e000      	b.n	8005230 <xQueueReceive+0x78>
 800522e:	2300      	movs	r3, #0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10b      	bne.n	800524c <xQueueReceive+0x94>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	61bb      	str	r3, [r7, #24]
}
 8005246:	bf00      	nop
 8005248:	bf00      	nop
 800524a:	e7fd      	b.n	8005248 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800524c:	f001 fd1e 	bl	8006c8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005254:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01f      	beq.n	800529c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005260:	f000 f8f6 	bl	8005450 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	1e5a      	subs	r2, r3, #1
 8005268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800526c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00f      	beq.n	8005294 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005276:	3310      	adds	r3, #16
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fe4f 	bl	8005f1c <xTaskRemoveFromEventList>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d007      	beq.n	8005294 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005284:	4b3c      	ldr	r3, [pc, #240]	@ (8005378 <xQueueReceive+0x1c0>)
 8005286:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005294:	f001 fd2a 	bl	8006cec <vPortExitCritical>
				return pdPASS;
 8005298:	2301      	movs	r3, #1
 800529a:	e069      	b.n	8005370 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d103      	bne.n	80052aa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052a2:	f001 fd23 	bl	8006cec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052a6:	2300      	movs	r3, #0
 80052a8:	e062      	b.n	8005370 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d106      	bne.n	80052be <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052b0:	f107 0310 	add.w	r3, r7, #16
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 fe95 	bl	8005fe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052ba:	2301      	movs	r3, #1
 80052bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052be:	f001 fd15 	bl	8006cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052c2:	f000 fc01 	bl	8005ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052c6:	f001 fce1 	bl	8006c8c <vPortEnterCritical>
 80052ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052d0:	b25b      	sxtb	r3, r3
 80052d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d6:	d103      	bne.n	80052e0 <xQueueReceive+0x128>
 80052d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052e6:	b25b      	sxtb	r3, r3
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d103      	bne.n	80052f6 <xQueueReceive+0x13e>
 80052ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052f6:	f001 fcf9 	bl	8006cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052fa:	1d3a      	adds	r2, r7, #4
 80052fc:	f107 0310 	add.w	r3, r7, #16
 8005300:	4611      	mov	r1, r2
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fe84 	bl	8006010 <xTaskCheckForTimeOut>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d123      	bne.n	8005356 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800530e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005310:	f000 f916 	bl	8005540 <prvIsQueueEmpty>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d017      	beq.n	800534a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800531a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531c:	3324      	adds	r3, #36	@ 0x24
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	4611      	mov	r1, r2
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fda8 	bl	8005e78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005328:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800532a:	f000 f8b7 	bl	800549c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800532e:	f000 fbd9 	bl	8005ae4 <xTaskResumeAll>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d189      	bne.n	800524c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005338:	4b0f      	ldr	r3, [pc, #60]	@ (8005378 <xQueueReceive+0x1c0>)
 800533a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	e780      	b.n	800524c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800534a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800534c:	f000 f8a6 	bl	800549c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005350:	f000 fbc8 	bl	8005ae4 <xTaskResumeAll>
 8005354:	e77a      	b.n	800524c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005356:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005358:	f000 f8a0 	bl	800549c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800535c:	f000 fbc2 	bl	8005ae4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005360:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005362:	f000 f8ed 	bl	8005540 <prvIsQueueEmpty>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	f43f af6f 	beq.w	800524c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800536e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005370:	4618      	mov	r0, r3
 8005372:	3730      	adds	r7, #48	@ 0x30
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	e000ed04 	.word	0xe000ed04

0800537c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005388:	2300      	movs	r3, #0
 800538a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005390:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10d      	bne.n	80053b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d14d      	bne.n	800543e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 ff9a 	bl	80062e0 <xTaskPriorityDisinherit>
 80053ac:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	605a      	str	r2, [r3, #4]
 80053b4:	e043      	b.n	800543e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d119      	bne.n	80053f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6898      	ldr	r0, [r3, #8]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c4:	461a      	mov	r2, r3
 80053c6:	68b9      	ldr	r1, [r7, #8]
 80053c8:	f001 ff6c 	bl	80072a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d4:	441a      	add	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d32b      	bcc.n	800543e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	609a      	str	r2, [r3, #8]
 80053ee:	e026      	b.n	800543e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	68d8      	ldr	r0, [r3, #12]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f8:	461a      	mov	r2, r3
 80053fa:	68b9      	ldr	r1, [r7, #8]
 80053fc:	f001 ff52 	bl	80072a4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005408:	425b      	negs	r3, r3
 800540a:	441a      	add	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	429a      	cmp	r2, r3
 800541a:	d207      	bcs.n	800542c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005424:	425b      	negs	r3, r3
 8005426:	441a      	add	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d105      	bne.n	800543e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	3b01      	subs	r3, #1
 800543c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005446:	697b      	ldr	r3, [r7, #20]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545e:	2b00      	cmp	r3, #0
 8005460:	d018      	beq.n	8005494 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546a:	441a      	add	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	429a      	cmp	r2, r3
 800547a:	d303      	bcc.n	8005484 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68d9      	ldr	r1, [r3, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548c:	461a      	mov	r2, r3
 800548e:	6838      	ldr	r0, [r7, #0]
 8005490:	f001 ff08 	bl	80072a4 <memcpy>
	}
}
 8005494:	bf00      	nop
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054a4:	f001 fbf2 	bl	8006c8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054b0:	e011      	b.n	80054d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d012      	beq.n	80054e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	3324      	adds	r3, #36	@ 0x24
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fd2c 	bl	8005f1c <xTaskRemoveFromEventList>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054ca:	f000 fe05 	bl	80060d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054ce:	7bfb      	ldrb	r3, [r7, #15]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	dce9      	bgt.n	80054b2 <prvUnlockQueue+0x16>
 80054de:	e000      	b.n	80054e2 <prvUnlockQueue+0x46>
					break;
 80054e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	22ff      	movs	r2, #255	@ 0xff
 80054e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80054ea:	f001 fbff 	bl	8006cec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80054ee:	f001 fbcd 	bl	8006c8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054fa:	e011      	b.n	8005520 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d012      	beq.n	800552a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3310      	adds	r3, #16
 8005508:	4618      	mov	r0, r3
 800550a:	f000 fd07 	bl	8005f1c <xTaskRemoveFromEventList>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005514:	f000 fde0 	bl	80060d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005518:	7bbb      	ldrb	r3, [r7, #14]
 800551a:	3b01      	subs	r3, #1
 800551c:	b2db      	uxtb	r3, r3
 800551e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005520:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005524:	2b00      	cmp	r3, #0
 8005526:	dce9      	bgt.n	80054fc <prvUnlockQueue+0x60>
 8005528:	e000      	b.n	800552c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800552a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	22ff      	movs	r2, #255	@ 0xff
 8005530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005534:	f001 fbda 	bl	8006cec <vPortExitCritical>
}
 8005538:	bf00      	nop
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005548:	f001 fba0 	bl	8006c8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005550:	2b00      	cmp	r3, #0
 8005552:	d102      	bne.n	800555a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005554:	2301      	movs	r3, #1
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	e001      	b.n	800555e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800555a:	2300      	movs	r3, #0
 800555c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800555e:	f001 fbc5 	bl	8006cec <vPortExitCritical>

	return xReturn;
 8005562:	68fb      	ldr	r3, [r7, #12]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005574:	f001 fb8a 	bl	8006c8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005580:	429a      	cmp	r2, r3
 8005582:	d102      	bne.n	800558a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005584:	2301      	movs	r3, #1
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	e001      	b.n	800558e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800558e:	f001 fbad 	bl	8006cec <vPortExitCritical>

	return xReturn;
 8005592:	68fb      	ldr	r3, [r7, #12]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055a6:	2300      	movs	r3, #0
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	e014      	b.n	80055d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80055ac:	4a0e      	ldr	r2, [pc, #56]	@ (80055e8 <vQueueAddToRegistry+0x4c>)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10b      	bne.n	80055d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80055b8:	490b      	ldr	r1, [pc, #44]	@ (80055e8 <vQueueAddToRegistry+0x4c>)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80055c2:	4a09      	ldr	r2, [pc, #36]	@ (80055e8 <vQueueAddToRegistry+0x4c>)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	4413      	add	r3, r2
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80055ce:	e006      	b.n	80055de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3301      	adds	r3, #1
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b07      	cmp	r3, #7
 80055da:	d9e7      	bls.n	80055ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055dc:	bf00      	nop
 80055de:	bf00      	nop
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bc80      	pop	{r7}
 80055e6:	4770      	bx	lr
 80055e8:	200008c0 	.word	0x200008c0

080055ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80055fc:	f001 fb46 	bl	8006c8c <vPortEnterCritical>
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005606:	b25b      	sxtb	r3, r3
 8005608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560c:	d103      	bne.n	8005616 <vQueueWaitForMessageRestricted+0x2a>
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800561c:	b25b      	sxtb	r3, r3
 800561e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005622:	d103      	bne.n	800562c <vQueueWaitForMessageRestricted+0x40>
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800562c:	f001 fb5e 	bl	8006cec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005634:	2b00      	cmp	r3, #0
 8005636:	d106      	bne.n	8005646 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	3324      	adds	r3, #36	@ 0x24
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	68b9      	ldr	r1, [r7, #8]
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fc3f 	bl	8005ec4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005646:	6978      	ldr	r0, [r7, #20]
 8005648:	f7ff ff28 	bl	800549c <prvUnlockQueue>
	}
 800564c:	bf00      	nop
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08e      	sub	sp, #56	@ 0x38
 8005658:	af04      	add	r7, sp, #16
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10b      	bne.n	8005680 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	623b      	str	r3, [r7, #32]
}
 800567a:	bf00      	nop
 800567c:	bf00      	nop
 800567e:	e7fd      	b.n	800567c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10b      	bne.n	800569e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	61fb      	str	r3, [r7, #28]
}
 8005698:	bf00      	nop
 800569a:	bf00      	nop
 800569c:	e7fd      	b.n	800569a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800569e:	235c      	movs	r3, #92	@ 0x5c
 80056a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80056a6:	d00b      	beq.n	80056c0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	61bb      	str	r3, [r7, #24]
}
 80056ba:	bf00      	nop
 80056bc:	bf00      	nop
 80056be:	e7fd      	b.n	80056bc <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d01e      	beq.n	8005704 <xTaskCreateStatic+0xb0>
 80056c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d01b      	beq.n	8005704 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ce:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056d4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d8:	2202      	movs	r2, #2
 80056da:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056de:	2300      	movs	r3, #0
 80056e0:	9303      	str	r3, [sp, #12]
 80056e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e4:	9302      	str	r3, [sp, #8]
 80056e6:	f107 0314 	add.w	r3, r7, #20
 80056ea:	9301      	str	r3, [sp, #4]
 80056ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68b9      	ldr	r1, [r7, #8]
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 f850 	bl	800579c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80056fe:	f000 f8d5 	bl	80058ac <prvAddNewTaskToReadyList>
 8005702:	e001      	b.n	8005708 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005704:	2300      	movs	r3, #0
 8005706:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005708:	697b      	ldr	r3, [r7, #20]
	}
 800570a:	4618      	mov	r0, r3
 800570c:	3728      	adds	r7, #40	@ 0x28
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005712:	b580      	push	{r7, lr}
 8005714:	b08c      	sub	sp, #48	@ 0x30
 8005716:	af04      	add	r7, sp, #16
 8005718:	60f8      	str	r0, [r7, #12]
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	603b      	str	r3, [r7, #0]
 800571e:	4613      	mov	r3, r2
 8005720:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005722:	88fb      	ldrh	r3, [r7, #6]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4618      	mov	r0, r3
 8005728:	f001 fbb2 	bl	8006e90 <pvPortMalloc>
 800572c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00e      	beq.n	8005752 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005734:	205c      	movs	r0, #92	@ 0x5c
 8005736:	f001 fbab 	bl	8006e90 <pvPortMalloc>
 800573a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	631a      	str	r2, [r3, #48]	@ 0x30
 8005748:	e005      	b.n	8005756 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800574a:	6978      	ldr	r0, [r7, #20]
 800574c:	f001 fc68 	bl	8007020 <vPortFree>
 8005750:	e001      	b.n	8005756 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005752:	2300      	movs	r3, #0
 8005754:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d017      	beq.n	800578c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005764:	88fa      	ldrh	r2, [r7, #6]
 8005766:	2300      	movs	r3, #0
 8005768:	9303      	str	r3, [sp, #12]
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	9302      	str	r3, [sp, #8]
 800576e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005770:	9301      	str	r3, [sp, #4]
 8005772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 f80e 	bl	800579c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005780:	69f8      	ldr	r0, [r7, #28]
 8005782:	f000 f893 	bl	80058ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005786:	2301      	movs	r3, #1
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	e002      	b.n	8005792 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800578c:	f04f 33ff 	mov.w	r3, #4294967295
 8005790:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005792:	69bb      	ldr	r3, [r7, #24]
	}
 8005794:	4618      	mov	r0, r3
 8005796:	3720      	adds	r7, #32
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b088      	sub	sp, #32
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	461a      	mov	r2, r3
 80057b4:	21a5      	movs	r1, #165	@ 0xa5
 80057b6:	f001 fd49 	bl	800724c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80057ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80057c4:	3b01      	subs	r3, #1
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	f023 0307 	bic.w	r3, r3, #7
 80057d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00b      	beq.n	80057f6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	617b      	str	r3, [r7, #20]
}
 80057f0:	bf00      	nop
 80057f2:	bf00      	nop
 80057f4:	e7fd      	b.n	80057f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057f6:	2300      	movs	r3, #0
 80057f8:	61fb      	str	r3, [r7, #28]
 80057fa:	e012      	b.n	8005822 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	4413      	add	r3, r2
 8005802:	7819      	ldrb	r1, [r3, #0]
 8005804:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	4413      	add	r3, r2
 800580a:	3334      	adds	r3, #52	@ 0x34
 800580c:	460a      	mov	r2, r1
 800580e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	4413      	add	r3, r2
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d006      	beq.n	800582a <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	3301      	adds	r3, #1
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	2b0f      	cmp	r3, #15
 8005826:	d9e9      	bls.n	80057fc <prvInitialiseNewTask+0x60>
 8005828:	e000      	b.n	800582c <prvInitialiseNewTask+0x90>
		{
			break;
 800582a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800582c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005836:	2b37      	cmp	r3, #55	@ 0x37
 8005838:	d901      	bls.n	800583e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800583a:	2337      	movs	r3, #55	@ 0x37
 800583c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800583e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005842:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005846:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005848:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800584a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584c:	2200      	movs	r2, #0
 800584e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005852:	3304      	adds	r3, #4
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff f976 	bl	8004b46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800585a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585c:	3318      	adds	r3, #24
 800585e:	4618      	mov	r0, r3
 8005860:	f7ff f971 	bl	8004b46 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005868:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800586a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005872:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005878:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800587a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587c:	2200      	movs	r2, #0
 800587e:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	68f9      	ldr	r1, [r7, #12]
 800588c:	69b8      	ldr	r0, [r7, #24]
 800588e:	f001 f90b 	bl	8006aa8 <pxPortInitialiseStack>
 8005892:	4602      	mov	r2, r0
 8005894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005896:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800589e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058a4:	bf00      	nop
 80058a6:	3720      	adds	r7, #32
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058b4:	f001 f9ea 	bl	8006c8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058b8:	4b2d      	ldr	r3, [pc, #180]	@ (8005970 <prvAddNewTaskToReadyList+0xc4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3301      	adds	r3, #1
 80058be:	4a2c      	ldr	r2, [pc, #176]	@ (8005970 <prvAddNewTaskToReadyList+0xc4>)
 80058c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005974 <prvAddNewTaskToReadyList+0xc8>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d109      	bne.n	80058de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005974 <prvAddNewTaskToReadyList+0xc8>)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058d0:	4b27      	ldr	r3, [pc, #156]	@ (8005970 <prvAddNewTaskToReadyList+0xc4>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d110      	bne.n	80058fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058d8:	f000 fc22 	bl	8006120 <prvInitialiseTaskLists>
 80058dc:	e00d      	b.n	80058fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058de:	4b26      	ldr	r3, [pc, #152]	@ (8005978 <prvAddNewTaskToReadyList+0xcc>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d109      	bne.n	80058fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058e6:	4b23      	ldr	r3, [pc, #140]	@ (8005974 <prvAddNewTaskToReadyList+0xc8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d802      	bhi.n	80058fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005974 <prvAddNewTaskToReadyList+0xc8>)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058fa:	4b20      	ldr	r3, [pc, #128]	@ (800597c <prvAddNewTaskToReadyList+0xd0>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	3301      	adds	r3, #1
 8005900:	4a1e      	ldr	r2, [pc, #120]	@ (800597c <prvAddNewTaskToReadyList+0xd0>)
 8005902:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005904:	4b1d      	ldr	r3, [pc, #116]	@ (800597c <prvAddNewTaskToReadyList+0xd0>)
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005910:	4b1b      	ldr	r3, [pc, #108]	@ (8005980 <prvAddNewTaskToReadyList+0xd4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	429a      	cmp	r2, r3
 8005916:	d903      	bls.n	8005920 <prvAddNewTaskToReadyList+0x74>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591c:	4a18      	ldr	r2, [pc, #96]	@ (8005980 <prvAddNewTaskToReadyList+0xd4>)
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005924:	4613      	mov	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4a15      	ldr	r2, [pc, #84]	@ (8005984 <prvAddNewTaskToReadyList+0xd8>)
 800592e:	441a      	add	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3304      	adds	r3, #4
 8005934:	4619      	mov	r1, r3
 8005936:	4610      	mov	r0, r2
 8005938:	f7ff f911 	bl	8004b5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800593c:	f001 f9d6 	bl	8006cec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005940:	4b0d      	ldr	r3, [pc, #52]	@ (8005978 <prvAddNewTaskToReadyList+0xcc>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00e      	beq.n	8005966 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005948:	4b0a      	ldr	r3, [pc, #40]	@ (8005974 <prvAddNewTaskToReadyList+0xc8>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005952:	429a      	cmp	r2, r3
 8005954:	d207      	bcs.n	8005966 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005956:	4b0c      	ldr	r3, [pc, #48]	@ (8005988 <prvAddNewTaskToReadyList+0xdc>)
 8005958:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005966:	bf00      	nop
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000dd4 	.word	0x20000dd4
 8005974:	20000900 	.word	0x20000900
 8005978:	20000de0 	.word	0x20000de0
 800597c:	20000df0 	.word	0x20000df0
 8005980:	20000ddc 	.word	0x20000ddc
 8005984:	20000904 	.word	0x20000904
 8005988:	e000ed04 	.word	0xe000ed04

0800598c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005994:	2300      	movs	r3, #0
 8005996:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d018      	beq.n	80059d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800599e:	4b14      	ldr	r3, [pc, #80]	@ (80059f0 <vTaskDelay+0x64>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00b      	beq.n	80059be <vTaskDelay+0x32>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	60bb      	str	r3, [r7, #8]
}
 80059b8:	bf00      	nop
 80059ba:	bf00      	nop
 80059bc:	e7fd      	b.n	80059ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059be:	f000 f883 	bl	8005ac8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059c2:	2100      	movs	r1, #0
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fcfb 	bl	80063c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059ca:	f000 f88b 	bl	8005ae4 <xTaskResumeAll>
 80059ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d107      	bne.n	80059e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80059d6:	4b07      	ldr	r3, [pc, #28]	@ (80059f4 <vTaskDelay+0x68>)
 80059d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059e6:	bf00      	nop
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20000dfc 	.word	0x20000dfc
 80059f4:	e000ed04 	.word	0xe000ed04

080059f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08a      	sub	sp, #40	@ 0x28
 80059fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a02:	2300      	movs	r3, #0
 8005a04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a06:	463a      	mov	r2, r7
 8005a08:	1d39      	adds	r1, r7, #4
 8005a0a:	f107 0308 	add.w	r3, r7, #8
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7ff f848 	bl	8004aa4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a14:	6839      	ldr	r1, [r7, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	9202      	str	r2, [sp, #8]
 8005a1c:	9301      	str	r3, [sp, #4]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	2300      	movs	r3, #0
 8005a24:	460a      	mov	r2, r1
 8005a26:	4922      	ldr	r1, [pc, #136]	@ (8005ab0 <vTaskStartScheduler+0xb8>)
 8005a28:	4822      	ldr	r0, [pc, #136]	@ (8005ab4 <vTaskStartScheduler+0xbc>)
 8005a2a:	f7ff fe13 	bl	8005654 <xTaskCreateStatic>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	4a21      	ldr	r2, [pc, #132]	@ (8005ab8 <vTaskStartScheduler+0xc0>)
 8005a32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a34:	4b20      	ldr	r3, [pc, #128]	@ (8005ab8 <vTaskStartScheduler+0xc0>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	617b      	str	r3, [r7, #20]
 8005a40:	e001      	b.n	8005a46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d102      	bne.n	8005a52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a4c:	f000 fd0c 	bl	8006468 <xTimerCreateTimerTask>
 8005a50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d116      	bne.n	8005a86 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	613b      	str	r3, [r7, #16]
}
 8005a6a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a6c:	4b13      	ldr	r3, [pc, #76]	@ (8005abc <vTaskStartScheduler+0xc4>)
 8005a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a74:	4b12      	ldr	r3, [pc, #72]	@ (8005ac0 <vTaskStartScheduler+0xc8>)
 8005a76:	2201      	movs	r2, #1
 8005a78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005a7a:	4b12      	ldr	r3, [pc, #72]	@ (8005ac4 <vTaskStartScheduler+0xcc>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a80:	f001 f892 	bl	8006ba8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a84:	e00f      	b.n	8005aa6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8c:	d10b      	bne.n	8005aa6 <vTaskStartScheduler+0xae>
	__asm volatile
 8005a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	60fb      	str	r3, [r7, #12]
}
 8005aa0:	bf00      	nop
 8005aa2:	bf00      	nop
 8005aa4:	e7fd      	b.n	8005aa2 <vTaskStartScheduler+0xaa>
}
 8005aa6:	bf00      	nop
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	08007310 	.word	0x08007310
 8005ab4:	080060f1 	.word	0x080060f1
 8005ab8:	20000df8 	.word	0x20000df8
 8005abc:	20000df4 	.word	0x20000df4
 8005ac0:	20000de0 	.word	0x20000de0
 8005ac4:	20000dd8 	.word	0x20000dd8

08005ac8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ac8:	b480      	push	{r7}
 8005aca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005acc:	4b04      	ldr	r3, [pc, #16]	@ (8005ae0 <vTaskSuspendAll+0x18>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	4a03      	ldr	r2, [pc, #12]	@ (8005ae0 <vTaskSuspendAll+0x18>)
 8005ad4:	6013      	str	r3, [r2, #0]
}
 8005ad6:	bf00      	nop
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bc80      	pop	{r7}
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	20000dfc 	.word	0x20000dfc

08005ae4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005aee:	2300      	movs	r3, #0
 8005af0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005af2:	4b42      	ldr	r3, [pc, #264]	@ (8005bfc <xTaskResumeAll+0x118>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10b      	bne.n	8005b12 <xTaskResumeAll+0x2e>
	__asm volatile
 8005afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	603b      	str	r3, [r7, #0]
}
 8005b0c:	bf00      	nop
 8005b0e:	bf00      	nop
 8005b10:	e7fd      	b.n	8005b0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b12:	f001 f8bb 	bl	8006c8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b16:	4b39      	ldr	r3, [pc, #228]	@ (8005bfc <xTaskResumeAll+0x118>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	4a37      	ldr	r2, [pc, #220]	@ (8005bfc <xTaskResumeAll+0x118>)
 8005b1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b20:	4b36      	ldr	r3, [pc, #216]	@ (8005bfc <xTaskResumeAll+0x118>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d162      	bne.n	8005bee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b28:	4b35      	ldr	r3, [pc, #212]	@ (8005c00 <xTaskResumeAll+0x11c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d05e      	beq.n	8005bee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b30:	e02f      	b.n	8005b92 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005b32:	4b34      	ldr	r3, [pc, #208]	@ (8005c04 <xTaskResumeAll+0x120>)
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	3318      	adds	r3, #24
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff f868 	bl	8004c14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3304      	adds	r3, #4
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff f863 	bl	8004c14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b52:	4b2d      	ldr	r3, [pc, #180]	@ (8005c08 <xTaskResumeAll+0x124>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d903      	bls.n	8005b62 <xTaskResumeAll+0x7e>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5e:	4a2a      	ldr	r2, [pc, #168]	@ (8005c08 <xTaskResumeAll+0x124>)
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b66:	4613      	mov	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4a27      	ldr	r2, [pc, #156]	@ (8005c0c <xTaskResumeAll+0x128>)
 8005b70:	441a      	add	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3304      	adds	r3, #4
 8005b76:	4619      	mov	r1, r3
 8005b78:	4610      	mov	r0, r2
 8005b7a:	f7fe fff0 	bl	8004b5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b82:	4b23      	ldr	r3, [pc, #140]	@ (8005c10 <xTaskResumeAll+0x12c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d302      	bcc.n	8005b92 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005b8c:	4b21      	ldr	r3, [pc, #132]	@ (8005c14 <xTaskResumeAll+0x130>)
 8005b8e:	2201      	movs	r2, #1
 8005b90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b92:	4b1c      	ldr	r3, [pc, #112]	@ (8005c04 <xTaskResumeAll+0x120>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1cb      	bne.n	8005b32 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ba0:	f000 fb5c 	bl	800625c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8005c18 <xTaskResumeAll+0x134>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d010      	beq.n	8005bd2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005bb0:	f000 f844 	bl	8005c3c <xTaskIncrementTick>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005bba:	4b16      	ldr	r3, [pc, #88]	@ (8005c14 <xTaskResumeAll+0x130>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f1      	bne.n	8005bb0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005bcc:	4b12      	ldr	r3, [pc, #72]	@ (8005c18 <xTaskResumeAll+0x134>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bd2:	4b10      	ldr	r3, [pc, #64]	@ (8005c14 <xTaskResumeAll+0x130>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d009      	beq.n	8005bee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005bde:	4b0f      	ldr	r3, [pc, #60]	@ (8005c1c <xTaskResumeAll+0x138>)
 8005be0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bee:	f001 f87d 	bl	8006cec <vPortExitCritical>

	return xAlreadyYielded;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	20000dfc 	.word	0x20000dfc
 8005c00:	20000dd4 	.word	0x20000dd4
 8005c04:	20000d94 	.word	0x20000d94
 8005c08:	20000ddc 	.word	0x20000ddc
 8005c0c:	20000904 	.word	0x20000904
 8005c10:	20000900 	.word	0x20000900
 8005c14:	20000de8 	.word	0x20000de8
 8005c18:	20000de4 	.word	0x20000de4
 8005c1c:	e000ed04 	.word	0xe000ed04

08005c20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c26:	4b04      	ldr	r3, [pc, #16]	@ (8005c38 <xTaskGetTickCount+0x18>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c2c:	687b      	ldr	r3, [r7, #4]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bc80      	pop	{r7}
 8005c36:	4770      	bx	lr
 8005c38:	20000dd8 	.word	0x20000dd8

08005c3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c42:	2300      	movs	r3, #0
 8005c44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c46:	4b52      	ldr	r3, [pc, #328]	@ (8005d90 <xTaskIncrementTick+0x154>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f040 808f 	bne.w	8005d6e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c50:	4b50      	ldr	r3, [pc, #320]	@ (8005d94 <xTaskIncrementTick+0x158>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3301      	adds	r3, #1
 8005c56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c58:	4a4e      	ldr	r2, [pc, #312]	@ (8005d94 <xTaskIncrementTick+0x158>)
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d121      	bne.n	8005ca8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c64:	4b4c      	ldr	r3, [pc, #304]	@ (8005d98 <xTaskIncrementTick+0x15c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00b      	beq.n	8005c86 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	603b      	str	r3, [r7, #0]
}
 8005c80:	bf00      	nop
 8005c82:	bf00      	nop
 8005c84:	e7fd      	b.n	8005c82 <xTaskIncrementTick+0x46>
 8005c86:	4b44      	ldr	r3, [pc, #272]	@ (8005d98 <xTaskIncrementTick+0x15c>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	4b43      	ldr	r3, [pc, #268]	@ (8005d9c <xTaskIncrementTick+0x160>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a41      	ldr	r2, [pc, #260]	@ (8005d98 <xTaskIncrementTick+0x15c>)
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	4a41      	ldr	r2, [pc, #260]	@ (8005d9c <xTaskIncrementTick+0x160>)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	4b41      	ldr	r3, [pc, #260]	@ (8005da0 <xTaskIncrementTick+0x164>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	4a3f      	ldr	r2, [pc, #252]	@ (8005da0 <xTaskIncrementTick+0x164>)
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	f000 fada 	bl	800625c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ca8:	4b3e      	ldr	r3, [pc, #248]	@ (8005da4 <xTaskIncrementTick+0x168>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d34e      	bcc.n	8005d50 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cb2:	4b39      	ldr	r3, [pc, #228]	@ (8005d98 <xTaskIncrementTick+0x15c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <xTaskIncrementTick+0x84>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e000      	b.n	8005cc2 <xTaskIncrementTick+0x86>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d004      	beq.n	8005cd0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cc6:	4b37      	ldr	r3, [pc, #220]	@ (8005da4 <xTaskIncrementTick+0x168>)
 8005cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ccc:	601a      	str	r2, [r3, #0]
					break;
 8005cce:	e03f      	b.n	8005d50 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005cd0:	4b31      	ldr	r3, [pc, #196]	@ (8005d98 <xTaskIncrementTick+0x15c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d203      	bcs.n	8005cf0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ce8:	4a2e      	ldr	r2, [pc, #184]	@ (8005da4 <xTaskIncrementTick+0x168>)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6013      	str	r3, [r2, #0]
						break;
 8005cee:	e02f      	b.n	8005d50 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fe ff8d 	bl	8004c14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d004      	beq.n	8005d0c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	3318      	adds	r3, #24
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fe ff84 	bl	8004c14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d10:	4b25      	ldr	r3, [pc, #148]	@ (8005da8 <xTaskIncrementTick+0x16c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d903      	bls.n	8005d20 <xTaskIncrementTick+0xe4>
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1c:	4a22      	ldr	r2, [pc, #136]	@ (8005da8 <xTaskIncrementTick+0x16c>)
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4a1f      	ldr	r2, [pc, #124]	@ (8005dac <xTaskIncrementTick+0x170>)
 8005d2e:	441a      	add	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	3304      	adds	r3, #4
 8005d34:	4619      	mov	r1, r3
 8005d36:	4610      	mov	r0, r2
 8005d38:	f7fe ff11 	bl	8004b5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d40:	4b1b      	ldr	r3, [pc, #108]	@ (8005db0 <xTaskIncrementTick+0x174>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d3b3      	bcc.n	8005cb2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d4e:	e7b0      	b.n	8005cb2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d50:	4b17      	ldr	r3, [pc, #92]	@ (8005db0 <xTaskIncrementTick+0x174>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d56:	4915      	ldr	r1, [pc, #84]	@ (8005dac <xTaskIncrementTick+0x170>)
 8005d58:	4613      	mov	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	440b      	add	r3, r1
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d907      	bls.n	8005d78 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	e004      	b.n	8005d78 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005d6e:	4b11      	ldr	r3, [pc, #68]	@ (8005db4 <xTaskIncrementTick+0x178>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3301      	adds	r3, #1
 8005d74:	4a0f      	ldr	r2, [pc, #60]	@ (8005db4 <xTaskIncrementTick+0x178>)
 8005d76:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005d78:	4b0f      	ldr	r3, [pc, #60]	@ (8005db8 <xTaskIncrementTick+0x17c>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8005d80:	2301      	movs	r3, #1
 8005d82:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005d84:	697b      	ldr	r3, [r7, #20]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	20000dfc 	.word	0x20000dfc
 8005d94:	20000dd8 	.word	0x20000dd8
 8005d98:	20000d8c 	.word	0x20000d8c
 8005d9c:	20000d90 	.word	0x20000d90
 8005da0:	20000dec 	.word	0x20000dec
 8005da4:	20000df4 	.word	0x20000df4
 8005da8:	20000ddc 	.word	0x20000ddc
 8005dac:	20000904 	.word	0x20000904
 8005db0:	20000900 	.word	0x20000900
 8005db4:	20000de4 	.word	0x20000de4
 8005db8:	20000de8 	.word	0x20000de8

08005dbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005dc2:	4b28      	ldr	r3, [pc, #160]	@ (8005e64 <vTaskSwitchContext+0xa8>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005dca:	4b27      	ldr	r3, [pc, #156]	@ (8005e68 <vTaskSwitchContext+0xac>)
 8005dcc:	2201      	movs	r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005dd0:	e042      	b.n	8005e58 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005dd2:	4b25      	ldr	r3, [pc, #148]	@ (8005e68 <vTaskSwitchContext+0xac>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005dd8:	4b24      	ldr	r3, [pc, #144]	@ (8005e6c <vTaskSwitchContext+0xb0>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	e011      	b.n	8005e04 <vTaskSwitchContext+0x48>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10b      	bne.n	8005dfe <vTaskSwitchContext+0x42>
	__asm volatile
 8005de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	607b      	str	r3, [r7, #4]
}
 8005df8:	bf00      	nop
 8005dfa:	bf00      	nop
 8005dfc:	e7fd      	b.n	8005dfa <vTaskSwitchContext+0x3e>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3b01      	subs	r3, #1
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	491a      	ldr	r1, [pc, #104]	@ (8005e70 <vTaskSwitchContext+0xb4>)
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d0e3      	beq.n	8005de0 <vTaskSwitchContext+0x24>
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4a13      	ldr	r2, [pc, #76]	@ (8005e70 <vTaskSwitchContext+0xb4>)
 8005e24:	4413      	add	r3, r2
 8005e26:	60bb      	str	r3, [r7, #8]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	605a      	str	r2, [r3, #4]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	3308      	adds	r3, #8
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d104      	bne.n	8005e48 <vTaskSwitchContext+0x8c>
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	605a      	str	r2, [r3, #4]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	4a09      	ldr	r2, [pc, #36]	@ (8005e74 <vTaskSwitchContext+0xb8>)
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	4a06      	ldr	r2, [pc, #24]	@ (8005e6c <vTaskSwitchContext+0xb0>)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6013      	str	r3, [r2, #0]
}
 8005e58:	bf00      	nop
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bc80      	pop	{r7}
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	20000dfc 	.word	0x20000dfc
 8005e68:	20000de8 	.word	0x20000de8
 8005e6c:	20000ddc 	.word	0x20000ddc
 8005e70:	20000904 	.word	0x20000904
 8005e74:	20000900 	.word	0x20000900

08005e78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10b      	bne.n	8005ea0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	60fb      	str	r3, [r7, #12]
}
 8005e9a:	bf00      	nop
 8005e9c:	bf00      	nop
 8005e9e:	e7fd      	b.n	8005e9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ea0:	4b07      	ldr	r3, [pc, #28]	@ (8005ec0 <vTaskPlaceOnEventList+0x48>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3318      	adds	r3, #24
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7fe fe7b 	bl	8004ba4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005eae:	2101      	movs	r1, #1
 8005eb0:	6838      	ldr	r0, [r7, #0]
 8005eb2:	f000 fa85 	bl	80063c0 <prvAddCurrentTaskToDelayedList>
}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000900 	.word	0x20000900

08005ec4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10b      	bne.n	8005eee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	617b      	str	r3, [r7, #20]
}
 8005ee8:	bf00      	nop
 8005eea:	bf00      	nop
 8005eec:	e7fd      	b.n	8005eea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005eee:	4b0a      	ldr	r3, [pc, #40]	@ (8005f18 <vTaskPlaceOnEventListRestricted+0x54>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3318      	adds	r3, #24
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f7fe fe31 	bl	8004b5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d002      	beq.n	8005f08 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005f02:	f04f 33ff 	mov.w	r3, #4294967295
 8005f06:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	68b8      	ldr	r0, [r7, #8]
 8005f0c:	f000 fa58 	bl	80063c0 <prvAddCurrentTaskToDelayedList>
	}
 8005f10:	bf00      	nop
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	20000900 	.word	0x20000900

08005f1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10b      	bne.n	8005f4a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	60fb      	str	r3, [r7, #12]
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop
 8005f48:	e7fd      	b.n	8005f46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	3318      	adds	r3, #24
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fe fe60 	bl	8004c14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f54:	4b1d      	ldr	r3, [pc, #116]	@ (8005fcc <xTaskRemoveFromEventList+0xb0>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d11d      	bne.n	8005f98 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fe fe57 	bl	8004c14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f6a:	4b19      	ldr	r3, [pc, #100]	@ (8005fd0 <xTaskRemoveFromEventList+0xb4>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d903      	bls.n	8005f7a <xTaskRemoveFromEventList+0x5e>
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f76:	4a16      	ldr	r2, [pc, #88]	@ (8005fd0 <xTaskRemoveFromEventList+0xb4>)
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f7e:	4613      	mov	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4a13      	ldr	r2, [pc, #76]	@ (8005fd4 <xTaskRemoveFromEventList+0xb8>)
 8005f88:	441a      	add	r2, r3
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	3304      	adds	r3, #4
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4610      	mov	r0, r2
 8005f92:	f7fe fde4 	bl	8004b5e <vListInsertEnd>
 8005f96:	e005      	b.n	8005fa4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	3318      	adds	r3, #24
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	480e      	ldr	r0, [pc, #56]	@ (8005fd8 <xTaskRemoveFromEventList+0xbc>)
 8005fa0:	f7fe fddd 	bl	8004b5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8005fdc <xTaskRemoveFromEventList+0xc0>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d905      	bls.n	8005fbe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe0 <xTaskRemoveFromEventList+0xc4>)
 8005fb8:	2201      	movs	r2, #1
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	e001      	b.n	8005fc2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005fc2:	697b      	ldr	r3, [r7, #20]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	20000dfc 	.word	0x20000dfc
 8005fd0:	20000ddc 	.word	0x20000ddc
 8005fd4:	20000904 	.word	0x20000904
 8005fd8:	20000d94 	.word	0x20000d94
 8005fdc:	20000900 	.word	0x20000900
 8005fe0:	20000de8 	.word	0x20000de8

08005fe4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fec:	4b06      	ldr	r3, [pc, #24]	@ (8006008 <vTaskInternalSetTimeOutState+0x24>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ff4:	4b05      	ldr	r3, [pc, #20]	@ (800600c <vTaskInternalSetTimeOutState+0x28>)
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	605a      	str	r2, [r3, #4]
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	bc80      	pop	{r7}
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	20000dec 	.word	0x20000dec
 800600c:	20000dd8 	.word	0x20000dd8

08006010 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10b      	bne.n	8006038 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	613b      	str	r3, [r7, #16]
}
 8006032:	bf00      	nop
 8006034:	bf00      	nop
 8006036:	e7fd      	b.n	8006034 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10b      	bne.n	8006056 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	60fb      	str	r3, [r7, #12]
}
 8006050:	bf00      	nop
 8006052:	bf00      	nop
 8006054:	e7fd      	b.n	8006052 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006056:	f000 fe19 	bl	8006c8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800605a:	4b1d      	ldr	r3, [pc, #116]	@ (80060d0 <xTaskCheckForTimeOut+0xc0>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006072:	d102      	bne.n	800607a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006074:	2300      	movs	r3, #0
 8006076:	61fb      	str	r3, [r7, #28]
 8006078:	e023      	b.n	80060c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4b15      	ldr	r3, [pc, #84]	@ (80060d4 <xTaskCheckForTimeOut+0xc4>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d007      	beq.n	8006096 <xTaskCheckForTimeOut+0x86>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	429a      	cmp	r2, r3
 800608e:	d302      	bcc.n	8006096 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006090:	2301      	movs	r3, #1
 8006092:	61fb      	str	r3, [r7, #28]
 8006094:	e015      	b.n	80060c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	429a      	cmp	r2, r3
 800609e:	d20b      	bcs.n	80060b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	1ad2      	subs	r2, r2, r3
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7ff ff99 	bl	8005fe4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060b2:	2300      	movs	r3, #0
 80060b4:	61fb      	str	r3, [r7, #28]
 80060b6:	e004      	b.n	80060c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060be:	2301      	movs	r3, #1
 80060c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060c2:	f000 fe13 	bl	8006cec <vPortExitCritical>

	return xReturn;
 80060c6:	69fb      	ldr	r3, [r7, #28]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3720      	adds	r7, #32
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	20000dd8 	.word	0x20000dd8
 80060d4:	20000dec 	.word	0x20000dec

080060d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060d8:	b480      	push	{r7}
 80060da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060dc:	4b03      	ldr	r3, [pc, #12]	@ (80060ec <vTaskMissedYield+0x14>)
 80060de:	2201      	movs	r2, #1
 80060e0:	601a      	str	r2, [r3, #0]
}
 80060e2:	bf00      	nop
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bc80      	pop	{r7}
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	20000de8 	.word	0x20000de8

080060f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060f8:	f000 f852 	bl	80061a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060fc:	4b06      	ldr	r3, [pc, #24]	@ (8006118 <prvIdleTask+0x28>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d9f9      	bls.n	80060f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006104:	4b05      	ldr	r3, [pc, #20]	@ (800611c <prvIdleTask+0x2c>)
 8006106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006114:	e7f0      	b.n	80060f8 <prvIdleTask+0x8>
 8006116:	bf00      	nop
 8006118:	20000904 	.word	0x20000904
 800611c:	e000ed04 	.word	0xe000ed04

08006120 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006126:	2300      	movs	r3, #0
 8006128:	607b      	str	r3, [r7, #4]
 800612a:	e00c      	b.n	8006146 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	4613      	mov	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4a12      	ldr	r2, [pc, #72]	@ (8006180 <prvInitialiseTaskLists+0x60>)
 8006138:	4413      	add	r3, r2
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe fce4 	bl	8004b08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3301      	adds	r3, #1
 8006144:	607b      	str	r3, [r7, #4]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b37      	cmp	r3, #55	@ 0x37
 800614a:	d9ef      	bls.n	800612c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800614c:	480d      	ldr	r0, [pc, #52]	@ (8006184 <prvInitialiseTaskLists+0x64>)
 800614e:	f7fe fcdb 	bl	8004b08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006152:	480d      	ldr	r0, [pc, #52]	@ (8006188 <prvInitialiseTaskLists+0x68>)
 8006154:	f7fe fcd8 	bl	8004b08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006158:	480c      	ldr	r0, [pc, #48]	@ (800618c <prvInitialiseTaskLists+0x6c>)
 800615a:	f7fe fcd5 	bl	8004b08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800615e:	480c      	ldr	r0, [pc, #48]	@ (8006190 <prvInitialiseTaskLists+0x70>)
 8006160:	f7fe fcd2 	bl	8004b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006164:	480b      	ldr	r0, [pc, #44]	@ (8006194 <prvInitialiseTaskLists+0x74>)
 8006166:	f7fe fccf 	bl	8004b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800616a:	4b0b      	ldr	r3, [pc, #44]	@ (8006198 <prvInitialiseTaskLists+0x78>)
 800616c:	4a05      	ldr	r2, [pc, #20]	@ (8006184 <prvInitialiseTaskLists+0x64>)
 800616e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006170:	4b0a      	ldr	r3, [pc, #40]	@ (800619c <prvInitialiseTaskLists+0x7c>)
 8006172:	4a05      	ldr	r2, [pc, #20]	@ (8006188 <prvInitialiseTaskLists+0x68>)
 8006174:	601a      	str	r2, [r3, #0]
}
 8006176:	bf00      	nop
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	20000904 	.word	0x20000904
 8006184:	20000d64 	.word	0x20000d64
 8006188:	20000d78 	.word	0x20000d78
 800618c:	20000d94 	.word	0x20000d94
 8006190:	20000da8 	.word	0x20000da8
 8006194:	20000dc0 	.word	0x20000dc0
 8006198:	20000d8c 	.word	0x20000d8c
 800619c:	20000d90 	.word	0x20000d90

080061a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061a6:	e019      	b.n	80061dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061a8:	f000 fd70 	bl	8006c8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80061ac:	4b10      	ldr	r3, [pc, #64]	@ (80061f0 <prvCheckTasksWaitingTermination+0x50>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3304      	adds	r3, #4
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fe fd2b 	bl	8004c14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061be:	4b0d      	ldr	r3, [pc, #52]	@ (80061f4 <prvCheckTasksWaitingTermination+0x54>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	4a0b      	ldr	r2, [pc, #44]	@ (80061f4 <prvCheckTasksWaitingTermination+0x54>)
 80061c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061c8:	4b0b      	ldr	r3, [pc, #44]	@ (80061f8 <prvCheckTasksWaitingTermination+0x58>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	4a0a      	ldr	r2, [pc, #40]	@ (80061f8 <prvCheckTasksWaitingTermination+0x58>)
 80061d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061d2:	f000 fd8b 	bl	8006cec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f810 	bl	80061fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061dc:	4b06      	ldr	r3, [pc, #24]	@ (80061f8 <prvCheckTasksWaitingTermination+0x58>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1e1      	bne.n	80061a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20000da8 	.word	0x20000da8
 80061f4:	20000dd4 	.word	0x20000dd4
 80061f8:	20000dbc 	.word	0x20000dbc

080061fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800620a:	2b00      	cmp	r3, #0
 800620c:	d108      	bne.n	8006220 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006212:	4618      	mov	r0, r3
 8006214:	f000 ff04 	bl	8007020 <vPortFree>
				vPortFree( pxTCB );
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 ff01 	bl	8007020 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800621e:	e019      	b.n	8006254 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006226:	2b01      	cmp	r3, #1
 8006228:	d103      	bne.n	8006232 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fef8 	bl	8007020 <vPortFree>
	}
 8006230:	e010      	b.n	8006254 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006238:	2b02      	cmp	r3, #2
 800623a:	d00b      	beq.n	8006254 <prvDeleteTCB+0x58>
	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	60fb      	str	r3, [r7, #12]
}
 800624e:	bf00      	nop
 8006250:	bf00      	nop
 8006252:	e7fd      	b.n	8006250 <prvDeleteTCB+0x54>
	}
 8006254:	bf00      	nop
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006262:	4b0e      	ldr	r3, [pc, #56]	@ (800629c <prvResetNextTaskUnblockTime+0x40>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <prvResetNextTaskUnblockTime+0x14>
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <prvResetNextTaskUnblockTime+0x16>
 8006270:	2300      	movs	r3, #0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d004      	beq.n	8006280 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006276:	4b0a      	ldr	r3, [pc, #40]	@ (80062a0 <prvResetNextTaskUnblockTime+0x44>)
 8006278:	f04f 32ff 	mov.w	r2, #4294967295
 800627c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800627e:	e008      	b.n	8006292 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006280:	4b06      	ldr	r3, [pc, #24]	@ (800629c <prvResetNextTaskUnblockTime+0x40>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	4a04      	ldr	r2, [pc, #16]	@ (80062a0 <prvResetNextTaskUnblockTime+0x44>)
 8006290:	6013      	str	r3, [r2, #0]
}
 8006292:	bf00      	nop
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	bc80      	pop	{r7}
 800629a:	4770      	bx	lr
 800629c:	20000d8c 	.word	0x20000d8c
 80062a0:	20000df4 	.word	0x20000df4

080062a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062aa:	4b0b      	ldr	r3, [pc, #44]	@ (80062d8 <xTaskGetSchedulerState+0x34>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d102      	bne.n	80062b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062b2:	2301      	movs	r3, #1
 80062b4:	607b      	str	r3, [r7, #4]
 80062b6:	e008      	b.n	80062ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062b8:	4b08      	ldr	r3, [pc, #32]	@ (80062dc <xTaskGetSchedulerState+0x38>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d102      	bne.n	80062c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062c0:	2302      	movs	r3, #2
 80062c2:	607b      	str	r3, [r7, #4]
 80062c4:	e001      	b.n	80062ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062c6:	2300      	movs	r3, #0
 80062c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062ca:	687b      	ldr	r3, [r7, #4]
	}
 80062cc:	4618      	mov	r0, r3
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bc80      	pop	{r7}
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	20000de0 	.word	0x20000de0
 80062dc:	20000dfc 	.word	0x20000dfc

080062e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062ec:	2300      	movs	r3, #0
 80062ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d058      	beq.n	80063a8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062f6:	4b2f      	ldr	r3, [pc, #188]	@ (80063b4 <xTaskPriorityDisinherit+0xd4>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d00b      	beq.n	8006318 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	60fb      	str	r3, [r7, #12]
}
 8006312:	bf00      	nop
 8006314:	bf00      	nop
 8006316:	e7fd      	b.n	8006314 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10b      	bne.n	8006338 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	60bb      	str	r3, [r7, #8]
}
 8006332:	bf00      	nop
 8006334:	bf00      	nop
 8006336:	e7fd      	b.n	8006334 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800633c:	1e5a      	subs	r2, r3, #1
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800634a:	429a      	cmp	r2, r3
 800634c:	d02c      	beq.n	80063a8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006352:	2b00      	cmp	r3, #0
 8006354:	d128      	bne.n	80063a8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	3304      	adds	r3, #4
 800635a:	4618      	mov	r0, r3
 800635c:	f7fe fc5a 	bl	8004c14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006378:	4b0f      	ldr	r3, [pc, #60]	@ (80063b8 <xTaskPriorityDisinherit+0xd8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	429a      	cmp	r2, r3
 800637e:	d903      	bls.n	8006388 <xTaskPriorityDisinherit+0xa8>
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006384:	4a0c      	ldr	r2, [pc, #48]	@ (80063b8 <xTaskPriorityDisinherit+0xd8>)
 8006386:	6013      	str	r3, [r2, #0]
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800638c:	4613      	mov	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4a09      	ldr	r2, [pc, #36]	@ (80063bc <xTaskPriorityDisinherit+0xdc>)
 8006396:	441a      	add	r2, r3
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	3304      	adds	r3, #4
 800639c:	4619      	mov	r1, r3
 800639e:	4610      	mov	r0, r2
 80063a0:	f7fe fbdd 	bl	8004b5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063a4:	2301      	movs	r3, #1
 80063a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063a8:	697b      	ldr	r3, [r7, #20]
	}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3718      	adds	r7, #24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20000900 	.word	0x20000900
 80063b8:	20000ddc 	.word	0x20000ddc
 80063bc:	20000904 	.word	0x20000904

080063c0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063ca:	4b21      	ldr	r3, [pc, #132]	@ (8006450 <prvAddCurrentTaskToDelayedList+0x90>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063d0:	4b20      	ldr	r3, [pc, #128]	@ (8006454 <prvAddCurrentTaskToDelayedList+0x94>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3304      	adds	r3, #4
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fe fc1c 	bl	8004c14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e2:	d10a      	bne.n	80063fa <prvAddCurrentTaskToDelayedList+0x3a>
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006454 <prvAddCurrentTaskToDelayedList+0x94>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3304      	adds	r3, #4
 80063f0:	4619      	mov	r1, r3
 80063f2:	4819      	ldr	r0, [pc, #100]	@ (8006458 <prvAddCurrentTaskToDelayedList+0x98>)
 80063f4:	f7fe fbb3 	bl	8004b5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063f8:	e026      	b.n	8006448 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4413      	add	r3, r2
 8006400:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006402:	4b14      	ldr	r3, [pc, #80]	@ (8006454 <prvAddCurrentTaskToDelayedList+0x94>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	429a      	cmp	r2, r3
 8006410:	d209      	bcs.n	8006426 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006412:	4b12      	ldr	r3, [pc, #72]	@ (800645c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	4b0f      	ldr	r3, [pc, #60]	@ (8006454 <prvAddCurrentTaskToDelayedList+0x94>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3304      	adds	r3, #4
 800641c:	4619      	mov	r1, r3
 800641e:	4610      	mov	r0, r2
 8006420:	f7fe fbc0 	bl	8004ba4 <vListInsert>
}
 8006424:	e010      	b.n	8006448 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006426:	4b0e      	ldr	r3, [pc, #56]	@ (8006460 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	4b0a      	ldr	r3, [pc, #40]	@ (8006454 <prvAddCurrentTaskToDelayedList+0x94>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	3304      	adds	r3, #4
 8006430:	4619      	mov	r1, r3
 8006432:	4610      	mov	r0, r2
 8006434:	f7fe fbb6 	bl	8004ba4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006438:	4b0a      	ldr	r3, [pc, #40]	@ (8006464 <prvAddCurrentTaskToDelayedList+0xa4>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	429a      	cmp	r2, r3
 8006440:	d202      	bcs.n	8006448 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006442:	4a08      	ldr	r2, [pc, #32]	@ (8006464 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	6013      	str	r3, [r2, #0]
}
 8006448:	bf00      	nop
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	20000dd8 	.word	0x20000dd8
 8006454:	20000900 	.word	0x20000900
 8006458:	20000dc0 	.word	0x20000dc0
 800645c:	20000d90 	.word	0x20000d90
 8006460:	20000d8c 	.word	0x20000d8c
 8006464:	20000df4 	.word	0x20000df4

08006468 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b08a      	sub	sp, #40	@ 0x28
 800646c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800646e:	2300      	movs	r3, #0
 8006470:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006472:	f000 fad9 	bl	8006a28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006476:	4b1d      	ldr	r3, [pc, #116]	@ (80064ec <xTimerCreateTimerTask+0x84>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d021      	beq.n	80064c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006482:	2300      	movs	r3, #0
 8006484:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006486:	1d3a      	adds	r2, r7, #4
 8006488:	f107 0108 	add.w	r1, r7, #8
 800648c:	f107 030c 	add.w	r3, r7, #12
 8006490:	4618      	mov	r0, r3
 8006492:	f7fe fb1f 	bl	8004ad4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006496:	6879      	ldr	r1, [r7, #4]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	9202      	str	r2, [sp, #8]
 800649e:	9301      	str	r3, [sp, #4]
 80064a0:	2302      	movs	r3, #2
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	2300      	movs	r3, #0
 80064a6:	460a      	mov	r2, r1
 80064a8:	4911      	ldr	r1, [pc, #68]	@ (80064f0 <xTimerCreateTimerTask+0x88>)
 80064aa:	4812      	ldr	r0, [pc, #72]	@ (80064f4 <xTimerCreateTimerTask+0x8c>)
 80064ac:	f7ff f8d2 	bl	8005654 <xTaskCreateStatic>
 80064b0:	4603      	mov	r3, r0
 80064b2:	4a11      	ldr	r2, [pc, #68]	@ (80064f8 <xTimerCreateTimerTask+0x90>)
 80064b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80064b6:	4b10      	ldr	r3, [pc, #64]	@ (80064f8 <xTimerCreateTimerTask+0x90>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80064be:	2301      	movs	r3, #1
 80064c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10b      	bne.n	80064e0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80064c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	613b      	str	r3, [r7, #16]
}
 80064da:	bf00      	nop
 80064dc:	bf00      	nop
 80064de:	e7fd      	b.n	80064dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80064e0:	697b      	ldr	r3, [r7, #20]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	20000e30 	.word	0x20000e30
 80064f0:	08007318 	.word	0x08007318
 80064f4:	0800661d 	.word	0x0800661d
 80064f8:	20000e34 	.word	0x20000e34

080064fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08a      	sub	sp, #40	@ 0x28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
 8006508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800650a:	2300      	movs	r3, #0
 800650c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10b      	bne.n	800652c <xTimerGenericCommand+0x30>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	623b      	str	r3, [r7, #32]
}
 8006526:	bf00      	nop
 8006528:	bf00      	nop
 800652a:	e7fd      	b.n	8006528 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800652c:	4b19      	ldr	r3, [pc, #100]	@ (8006594 <xTimerGenericCommand+0x98>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d02a      	beq.n	800658a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2b05      	cmp	r3, #5
 8006544:	dc18      	bgt.n	8006578 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006546:	f7ff fead 	bl	80062a4 <xTaskGetSchedulerState>
 800654a:	4603      	mov	r3, r0
 800654c:	2b02      	cmp	r3, #2
 800654e:	d109      	bne.n	8006564 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006550:	4b10      	ldr	r3, [pc, #64]	@ (8006594 <xTimerGenericCommand+0x98>)
 8006552:	6818      	ldr	r0, [r3, #0]
 8006554:	f107 0110 	add.w	r1, r7, #16
 8006558:	2300      	movs	r3, #0
 800655a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800655c:	f7fe fc8e 	bl	8004e7c <xQueueGenericSend>
 8006560:	6278      	str	r0, [r7, #36]	@ 0x24
 8006562:	e012      	b.n	800658a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006564:	4b0b      	ldr	r3, [pc, #44]	@ (8006594 <xTimerGenericCommand+0x98>)
 8006566:	6818      	ldr	r0, [r3, #0]
 8006568:	f107 0110 	add.w	r1, r7, #16
 800656c:	2300      	movs	r3, #0
 800656e:	2200      	movs	r2, #0
 8006570:	f7fe fc84 	bl	8004e7c <xQueueGenericSend>
 8006574:	6278      	str	r0, [r7, #36]	@ 0x24
 8006576:	e008      	b.n	800658a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006578:	4b06      	ldr	r3, [pc, #24]	@ (8006594 <xTimerGenericCommand+0x98>)
 800657a:	6818      	ldr	r0, [r3, #0]
 800657c:	f107 0110 	add.w	r1, r7, #16
 8006580:	2300      	movs	r3, #0
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	f7fe fd7c 	bl	8005080 <xQueueGenericSendFromISR>
 8006588:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800658c:	4618      	mov	r0, r3
 800658e:	3728      	adds	r7, #40	@ 0x28
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	20000e30 	.word	0x20000e30

08006598 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b088      	sub	sp, #32
 800659c:	af02      	add	r7, sp, #8
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006618 <prvProcessExpiredTimer+0x80>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	3304      	adds	r3, #4
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fe fb2f 	bl	8004c14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d123      	bne.n	8006606 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	18d1      	adds	r1, r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	6978      	ldr	r0, [r7, #20]
 80065cc:	f000 f8cc 	bl	8006768 <prvInsertTimerInActiveList>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d017      	beq.n	8006606 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065d6:	2300      	movs	r3, #0
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	2300      	movs	r3, #0
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	2100      	movs	r1, #0
 80065e0:	6978      	ldr	r0, [r7, #20]
 80065e2:	f7ff ff8b 	bl	80064fc <xTimerGenericCommand>
 80065e6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10b      	bne.n	8006606 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	60fb      	str	r3, [r7, #12]
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	e7fd      	b.n	8006602 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660a:	6978      	ldr	r0, [r7, #20]
 800660c:	4798      	blx	r3
}
 800660e:	bf00      	nop
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20000e28 	.word	0x20000e28

0800661c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006624:	f107 0308 	add.w	r3, r7, #8
 8006628:	4618      	mov	r0, r3
 800662a:	f000 f859 	bl	80066e0 <prvGetNextExpireTime>
 800662e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	4619      	mov	r1, r3
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 f805 	bl	8006644 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800663a:	f000 f8d7 	bl	80067ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800663e:	bf00      	nop
 8006640:	e7f0      	b.n	8006624 <prvTimerTask+0x8>
	...

08006644 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800664e:	f7ff fa3b 	bl	8005ac8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006652:	f107 0308 	add.w	r3, r7, #8
 8006656:	4618      	mov	r0, r3
 8006658:	f000 f866 	bl	8006728 <prvSampleTimeNow>
 800665c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d130      	bne.n	80066c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10a      	bne.n	8006680 <prvProcessTimerOrBlockTask+0x3c>
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	429a      	cmp	r2, r3
 8006670:	d806      	bhi.n	8006680 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006672:	f7ff fa37 	bl	8005ae4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006676:	68f9      	ldr	r1, [r7, #12]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff ff8d 	bl	8006598 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800667e:	e024      	b.n	80066ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d008      	beq.n	8006698 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006686:	4b13      	ldr	r3, [pc, #76]	@ (80066d4 <prvProcessTimerOrBlockTask+0x90>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	bf0c      	ite	eq
 8006690:	2301      	moveq	r3, #1
 8006692:	2300      	movne	r3, #0
 8006694:	b2db      	uxtb	r3, r3
 8006696:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006698:	4b0f      	ldr	r3, [pc, #60]	@ (80066d8 <prvProcessTimerOrBlockTask+0x94>)
 800669a:	6818      	ldr	r0, [r3, #0]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	4619      	mov	r1, r3
 80066a6:	f7fe ffa1 	bl	80055ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80066aa:	f7ff fa1b 	bl	8005ae4 <xTaskResumeAll>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80066b4:	4b09      	ldr	r3, [pc, #36]	@ (80066dc <prvProcessTimerOrBlockTask+0x98>)
 80066b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	f3bf 8f6f 	isb	sy
}
 80066c4:	e001      	b.n	80066ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80066c6:	f7ff fa0d 	bl	8005ae4 <xTaskResumeAll>
}
 80066ca:	bf00      	nop
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000e2c 	.word	0x20000e2c
 80066d8:	20000e30 	.word	0x20000e30
 80066dc:	e000ed04 	.word	0xe000ed04

080066e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80066e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006724 <prvGetNextExpireTime+0x44>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	bf0c      	ite	eq
 80066f2:	2301      	moveq	r3, #1
 80066f4:	2300      	movne	r3, #0
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	461a      	mov	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d105      	bne.n	8006712 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006706:	4b07      	ldr	r3, [pc, #28]	@ (8006724 <prvGetNextExpireTime+0x44>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60fb      	str	r3, [r7, #12]
 8006710:	e001      	b.n	8006716 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006716:	68fb      	ldr	r3, [r7, #12]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	bc80      	pop	{r7}
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	20000e28 	.word	0x20000e28

08006728 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006730:	f7ff fa76 	bl	8005c20 <xTaskGetTickCount>
 8006734:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006736:	4b0b      	ldr	r3, [pc, #44]	@ (8006764 <prvSampleTimeNow+0x3c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	429a      	cmp	r2, r3
 800673e:	d205      	bcs.n	800674c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006740:	f000 f910 	bl	8006964 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	e002      	b.n	8006752 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006752:	4a04      	ldr	r2, [pc, #16]	@ (8006764 <prvSampleTimeNow+0x3c>)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006758:	68fb      	ldr	r3, [r7, #12]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20000e38 	.word	0x20000e38

08006768 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
 8006774:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006776:	2300      	movs	r3, #0
 8006778:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	429a      	cmp	r2, r3
 800678c:	d812      	bhi.n	80067b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	1ad2      	subs	r2, r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	429a      	cmp	r2, r3
 800679a:	d302      	bcc.n	80067a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800679c:	2301      	movs	r3, #1
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	e01b      	b.n	80067da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80067a2:	4b10      	ldr	r3, [pc, #64]	@ (80067e4 <prvInsertTimerInActiveList+0x7c>)
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3304      	adds	r3, #4
 80067aa:	4619      	mov	r1, r3
 80067ac:	4610      	mov	r0, r2
 80067ae:	f7fe f9f9 	bl	8004ba4 <vListInsert>
 80067b2:	e012      	b.n	80067da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d206      	bcs.n	80067ca <prvInsertTimerInActiveList+0x62>
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d302      	bcc.n	80067ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80067c4:	2301      	movs	r3, #1
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	e007      	b.n	80067da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067ca:	4b07      	ldr	r3, [pc, #28]	@ (80067e8 <prvInsertTimerInActiveList+0x80>)
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3304      	adds	r3, #4
 80067d2:	4619      	mov	r1, r3
 80067d4:	4610      	mov	r0, r2
 80067d6:	f7fe f9e5 	bl	8004ba4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80067da:	697b      	ldr	r3, [r7, #20]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3718      	adds	r7, #24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	20000e2c 	.word	0x20000e2c
 80067e8:	20000e28 	.word	0x20000e28

080067ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08e      	sub	sp, #56	@ 0x38
 80067f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067f2:	e0a5      	b.n	8006940 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	da19      	bge.n	800682e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80067fa:	1d3b      	adds	r3, r7, #4
 80067fc:	3304      	adds	r3, #4
 80067fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10b      	bne.n	800681e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	61fb      	str	r3, [r7, #28]
}
 8006818:	bf00      	nop
 800681a:	bf00      	nop
 800681c:	e7fd      	b.n	800681a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800681e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006824:	6850      	ldr	r0, [r2, #4]
 8006826:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006828:	6892      	ldr	r2, [r2, #8]
 800682a:	4611      	mov	r1, r2
 800682c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	f2c0 8085 	blt.w	8006940 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800683a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d004      	beq.n	800684c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006844:	3304      	adds	r3, #4
 8006846:	4618      	mov	r0, r3
 8006848:	f7fe f9e4 	bl	8004c14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800684c:	463b      	mov	r3, r7
 800684e:	4618      	mov	r0, r3
 8006850:	f7ff ff6a 	bl	8006728 <prvSampleTimeNow>
 8006854:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b09      	cmp	r3, #9
 800685a:	d86c      	bhi.n	8006936 <prvProcessReceivedCommands+0x14a>
 800685c:	a201      	add	r2, pc, #4	@ (adr r2, 8006864 <prvProcessReceivedCommands+0x78>)
 800685e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006862:	bf00      	nop
 8006864:	0800688d 	.word	0x0800688d
 8006868:	0800688d 	.word	0x0800688d
 800686c:	0800688d 	.word	0x0800688d
 8006870:	08006937 	.word	0x08006937
 8006874:	080068eb 	.word	0x080068eb
 8006878:	08006925 	.word	0x08006925
 800687c:	0800688d 	.word	0x0800688d
 8006880:	0800688d 	.word	0x0800688d
 8006884:	08006937 	.word	0x08006937
 8006888:	080068eb 	.word	0x080068eb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	18d1      	adds	r1, r2, r3
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006898:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800689a:	f7ff ff65 	bl	8006768 <prvInsertTimerInActiveList>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d04a      	beq.n	800693a <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068aa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80068ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d142      	bne.n	800693a <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	441a      	add	r2, r3
 80068bc:	2300      	movs	r3, #0
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	2300      	movs	r3, #0
 80068c2:	2100      	movs	r1, #0
 80068c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068c6:	f7ff fe19 	bl	80064fc <xTimerGenericCommand>
 80068ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d133      	bne.n	800693a <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	61bb      	str	r3, [r7, #24]
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop
 80068e8:	e7fd      	b.n	80068e6 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80068f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10b      	bne.n	8006910 <prvProcessReceivedCommands+0x124>
	__asm volatile
 80068f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fc:	f383 8811 	msr	BASEPRI, r3
 8006900:	f3bf 8f6f 	isb	sy
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	617b      	str	r3, [r7, #20]
}
 800690a:	bf00      	nop
 800690c:	bf00      	nop
 800690e:	e7fd      	b.n	800690c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006912:	699a      	ldr	r2, [r3, #24]
 8006914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006916:	18d1      	adds	r1, r2, r3
 8006918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800691c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800691e:	f7ff ff23 	bl	8006768 <prvInsertTimerInActiveList>
					break;
 8006922:	e00d      	b.n	8006940 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006926:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800692a:	2b00      	cmp	r3, #0
 800692c:	d107      	bne.n	800693e <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800692e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006930:	f000 fb76 	bl	8007020 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006934:	e003      	b.n	800693e <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8006936:	bf00      	nop
 8006938:	e002      	b.n	8006940 <prvProcessReceivedCommands+0x154>
					break;
 800693a:	bf00      	nop
 800693c:	e000      	b.n	8006940 <prvProcessReceivedCommands+0x154>
					break;
 800693e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006940:	4b07      	ldr	r3, [pc, #28]	@ (8006960 <prvProcessReceivedCommands+0x174>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	1d39      	adds	r1, r7, #4
 8006946:	2200      	movs	r2, #0
 8006948:	4618      	mov	r0, r3
 800694a:	f7fe fc35 	bl	80051b8 <xQueueReceive>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	f47f af4f 	bne.w	80067f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006956:	bf00      	nop
 8006958:	bf00      	nop
 800695a:	3730      	adds	r7, #48	@ 0x30
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	20000e30 	.word	0x20000e30

08006964 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b088      	sub	sp, #32
 8006968:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800696a:	e046      	b.n	80069fa <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800696c:	4b2c      	ldr	r3, [pc, #176]	@ (8006a20 <prvSwitchTimerLists+0xbc>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006976:	4b2a      	ldr	r3, [pc, #168]	@ (8006a20 <prvSwitchTimerLists+0xbc>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	3304      	adds	r3, #4
 8006984:	4618      	mov	r0, r3
 8006986:	f7fe f945 	bl	8004c14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d12f      	bne.n	80069fa <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	4413      	add	r3, r2
 80069a2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d90e      	bls.n	80069ca <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069b8:	4b19      	ldr	r3, [pc, #100]	@ (8006a20 <prvSwitchTimerLists+0xbc>)
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	3304      	adds	r3, #4
 80069c0:	4619      	mov	r1, r3
 80069c2:	4610      	mov	r0, r2
 80069c4:	f7fe f8ee 	bl	8004ba4 <vListInsert>
 80069c8:	e017      	b.n	80069fa <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069ca:	2300      	movs	r3, #0
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	2300      	movs	r3, #0
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	2100      	movs	r1, #0
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f7ff fd91 	bl	80064fc <xTimerGenericCommand>
 80069da:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10b      	bne.n	80069fa <prvSwitchTimerLists+0x96>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	603b      	str	r3, [r7, #0]
}
 80069f4:	bf00      	nop
 80069f6:	bf00      	nop
 80069f8:	e7fd      	b.n	80069f6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069fa:	4b09      	ldr	r3, [pc, #36]	@ (8006a20 <prvSwitchTimerLists+0xbc>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1b3      	bne.n	800696c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a04:	4b06      	ldr	r3, [pc, #24]	@ (8006a20 <prvSwitchTimerLists+0xbc>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a0a:	4b06      	ldr	r3, [pc, #24]	@ (8006a24 <prvSwitchTimerLists+0xc0>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a04      	ldr	r2, [pc, #16]	@ (8006a20 <prvSwitchTimerLists+0xbc>)
 8006a10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a12:	4a04      	ldr	r2, [pc, #16]	@ (8006a24 <prvSwitchTimerLists+0xc0>)
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	6013      	str	r3, [r2, #0]
}
 8006a18:	bf00      	nop
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	20000e28 	.word	0x20000e28
 8006a24:	20000e2c 	.word	0x20000e2c

08006a28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a2e:	f000 f92d 	bl	8006c8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a32:	4b15      	ldr	r3, [pc, #84]	@ (8006a88 <prvCheckForValidListAndQueue+0x60>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d120      	bne.n	8006a7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006a3a:	4814      	ldr	r0, [pc, #80]	@ (8006a8c <prvCheckForValidListAndQueue+0x64>)
 8006a3c:	f7fe f864 	bl	8004b08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006a40:	4813      	ldr	r0, [pc, #76]	@ (8006a90 <prvCheckForValidListAndQueue+0x68>)
 8006a42:	f7fe f861 	bl	8004b08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006a46:	4b13      	ldr	r3, [pc, #76]	@ (8006a94 <prvCheckForValidListAndQueue+0x6c>)
 8006a48:	4a10      	ldr	r2, [pc, #64]	@ (8006a8c <prvCheckForValidListAndQueue+0x64>)
 8006a4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006a4c:	4b12      	ldr	r3, [pc, #72]	@ (8006a98 <prvCheckForValidListAndQueue+0x70>)
 8006a4e:	4a10      	ldr	r2, [pc, #64]	@ (8006a90 <prvCheckForValidListAndQueue+0x68>)
 8006a50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a52:	2300      	movs	r3, #0
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	4b11      	ldr	r3, [pc, #68]	@ (8006a9c <prvCheckForValidListAndQueue+0x74>)
 8006a58:	4a11      	ldr	r2, [pc, #68]	@ (8006aa0 <prvCheckForValidListAndQueue+0x78>)
 8006a5a:	2110      	movs	r1, #16
 8006a5c:	200a      	movs	r0, #10
 8006a5e:	f7fe f96d 	bl	8004d3c <xQueueGenericCreateStatic>
 8006a62:	4603      	mov	r3, r0
 8006a64:	4a08      	ldr	r2, [pc, #32]	@ (8006a88 <prvCheckForValidListAndQueue+0x60>)
 8006a66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006a68:	4b07      	ldr	r3, [pc, #28]	@ (8006a88 <prvCheckForValidListAndQueue+0x60>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d005      	beq.n	8006a7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a70:	4b05      	ldr	r3, [pc, #20]	@ (8006a88 <prvCheckForValidListAndQueue+0x60>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	490b      	ldr	r1, [pc, #44]	@ (8006aa4 <prvCheckForValidListAndQueue+0x7c>)
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7fe fd90 	bl	800559c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a7c:	f000 f936 	bl	8006cec <vPortExitCritical>
}
 8006a80:	bf00      	nop
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20000e30 	.word	0x20000e30
 8006a8c:	20000e00 	.word	0x20000e00
 8006a90:	20000e14 	.word	0x20000e14
 8006a94:	20000e28 	.word	0x20000e28
 8006a98:	20000e2c 	.word	0x20000e2c
 8006a9c:	20000edc 	.word	0x20000edc
 8006aa0:	20000e3c 	.word	0x20000e3c
 8006aa4:	08007320 	.word	0x08007320

08006aa8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	3b04      	subs	r3, #4
 8006ab8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3b04      	subs	r3, #4
 8006ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f023 0201 	bic.w	r2, r3, #1
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	3b04      	subs	r3, #4
 8006ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ad8:	4a08      	ldr	r2, [pc, #32]	@ (8006afc <pxPortInitialiseStack+0x54>)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	3b14      	subs	r3, #20
 8006ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3b20      	subs	r3, #32
 8006aee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006af0:	68fb      	ldr	r3, [r7, #12]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bc80      	pop	{r7}
 8006afa:	4770      	bx	lr
 8006afc:	08006b01 	.word	0x08006b01

08006b00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b0a:	4b12      	ldr	r3, [pc, #72]	@ (8006b54 <prvTaskExitError+0x54>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b12:	d00b      	beq.n	8006b2c <prvTaskExitError+0x2c>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	60fb      	str	r3, [r7, #12]
}
 8006b26:	bf00      	nop
 8006b28:	bf00      	nop
 8006b2a:	e7fd      	b.n	8006b28 <prvTaskExitError+0x28>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	60bb      	str	r3, [r7, #8]
}
 8006b3e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b40:	bf00      	nop
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0fc      	beq.n	8006b42 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b48:	bf00      	nop
 8006b4a:	bf00      	nop
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bc80      	pop	{r7}
 8006b52:	4770      	bx	lr
 8006b54:	20000014 	.word	0x20000014
	...

08006b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b60:	4b07      	ldr	r3, [pc, #28]	@ (8006b80 <pxCurrentTCBConst2>)
 8006b62:	6819      	ldr	r1, [r3, #0]
 8006b64:	6808      	ldr	r0, [r1, #0]
 8006b66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b6a:	f380 8809 	msr	PSP, r0
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f04f 0000 	mov.w	r0, #0
 8006b76:	f380 8811 	msr	BASEPRI, r0
 8006b7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006b7e:	4770      	bx	lr

08006b80 <pxCurrentTCBConst2>:
 8006b80:	20000900 	.word	0x20000900
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop

08006b88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006b88:	4806      	ldr	r0, [pc, #24]	@ (8006ba4 <prvPortStartFirstTask+0x1c>)
 8006b8a:	6800      	ldr	r0, [r0, #0]
 8006b8c:	6800      	ldr	r0, [r0, #0]
 8006b8e:	f380 8808 	msr	MSP, r0
 8006b92:	b662      	cpsie	i
 8006b94:	b661      	cpsie	f
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	df00      	svc	0
 8006ba0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006ba2:	bf00      	nop
 8006ba4:	e000ed08 	.word	0xe000ed08

08006ba8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006bae:	4b32      	ldr	r3, [pc, #200]	@ (8006c78 <xPortStartScheduler+0xd0>)
 8006bb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	22ff      	movs	r2, #255	@ 0xff
 8006bbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006bc8:	78fb      	ldrb	r3, [r7, #3]
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006bd0:	b2da      	uxtb	r2, r3
 8006bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8006c7c <xPortStartScheduler+0xd4>)
 8006bd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8006c80 <xPortStartScheduler+0xd8>)
 8006bd8:	2207      	movs	r2, #7
 8006bda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bdc:	e009      	b.n	8006bf2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006bde:	4b28      	ldr	r3, [pc, #160]	@ (8006c80 <xPortStartScheduler+0xd8>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	4a26      	ldr	r2, [pc, #152]	@ (8006c80 <xPortStartScheduler+0xd8>)
 8006be6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006be8:	78fb      	ldrb	r3, [r7, #3]
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bf2:	78fb      	ldrb	r3, [r7, #3]
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bfa:	2b80      	cmp	r3, #128	@ 0x80
 8006bfc:	d0ef      	beq.n	8006bde <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006bfe:	4b20      	ldr	r3, [pc, #128]	@ (8006c80 <xPortStartScheduler+0xd8>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f1c3 0307 	rsb	r3, r3, #7
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d00b      	beq.n	8006c22 <xPortStartScheduler+0x7a>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	60bb      	str	r3, [r7, #8]
}
 8006c1c:	bf00      	nop
 8006c1e:	bf00      	nop
 8006c20:	e7fd      	b.n	8006c1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c22:	4b17      	ldr	r3, [pc, #92]	@ (8006c80 <xPortStartScheduler+0xd8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	4a15      	ldr	r2, [pc, #84]	@ (8006c80 <xPortStartScheduler+0xd8>)
 8006c2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c2c:	4b14      	ldr	r3, [pc, #80]	@ (8006c80 <xPortStartScheduler+0xd8>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c34:	4a12      	ldr	r2, [pc, #72]	@ (8006c80 <xPortStartScheduler+0xd8>)
 8006c36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c40:	4b10      	ldr	r3, [pc, #64]	@ (8006c84 <xPortStartScheduler+0xdc>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a0f      	ldr	r2, [pc, #60]	@ (8006c84 <xPortStartScheduler+0xdc>)
 8006c46:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006c4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8006c84 <xPortStartScheduler+0xdc>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a0c      	ldr	r2, [pc, #48]	@ (8006c84 <xPortStartScheduler+0xdc>)
 8006c52:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006c56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c58:	f000 f8b8 	bl	8006dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c88 <xPortStartScheduler+0xe0>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c62:	f7ff ff91 	bl	8006b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c66:	f7ff f8a9 	bl	8005dbc <vTaskSwitchContext>
	prvTaskExitError();
 8006c6a:	f7ff ff49 	bl	8006b00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	e000e400 	.word	0xe000e400
 8006c7c:	20000f2c 	.word	0x20000f2c
 8006c80:	20000f30 	.word	0x20000f30
 8006c84:	e000ed20 	.word	0xe000ed20
 8006c88:	20000014 	.word	0x20000014

08006c8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
	__asm volatile
 8006c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	607b      	str	r3, [r7, #4]
}
 8006ca4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8006ce4 <vPortEnterCritical+0x58>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3301      	adds	r3, #1
 8006cac:	4a0d      	ldr	r2, [pc, #52]	@ (8006ce4 <vPortEnterCritical+0x58>)
 8006cae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce4 <vPortEnterCritical+0x58>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d110      	bne.n	8006cda <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce8 <vPortEnterCritical+0x5c>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00b      	beq.n	8006cda <vPortEnterCritical+0x4e>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	603b      	str	r3, [r7, #0]
}
 8006cd4:	bf00      	nop
 8006cd6:	bf00      	nop
 8006cd8:	e7fd      	b.n	8006cd6 <vPortEnterCritical+0x4a>
	}
}
 8006cda:	bf00      	nop
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bc80      	pop	{r7}
 8006ce2:	4770      	bx	lr
 8006ce4:	20000014 	.word	0x20000014
 8006ce8:	e000ed04 	.word	0xe000ed04

08006cec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006cf2:	4b12      	ldr	r3, [pc, #72]	@ (8006d3c <vPortExitCritical+0x50>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10b      	bne.n	8006d12 <vPortExitCritical+0x26>
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	607b      	str	r3, [r7, #4]
}
 8006d0c:	bf00      	nop
 8006d0e:	bf00      	nop
 8006d10:	e7fd      	b.n	8006d0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006d12:	4b0a      	ldr	r3, [pc, #40]	@ (8006d3c <vPortExitCritical+0x50>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3b01      	subs	r3, #1
 8006d18:	4a08      	ldr	r2, [pc, #32]	@ (8006d3c <vPortExitCritical+0x50>)
 8006d1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d1c:	4b07      	ldr	r3, [pc, #28]	@ (8006d3c <vPortExitCritical+0x50>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d105      	bne.n	8006d30 <vPortExitCritical+0x44>
 8006d24:	2300      	movs	r3, #0
 8006d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	f383 8811 	msr	BASEPRI, r3
}
 8006d2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bc80      	pop	{r7}
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	20000014 	.word	0x20000014

08006d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d40:	f3ef 8009 	mrs	r0, PSP
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	4b0d      	ldr	r3, [pc, #52]	@ (8006d80 <pxCurrentTCBConst>)
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006d50:	6010      	str	r0, [r2, #0]
 8006d52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006d56:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006d5a:	f380 8811 	msr	BASEPRI, r0
 8006d5e:	f7ff f82d 	bl	8005dbc <vTaskSwitchContext>
 8006d62:	f04f 0000 	mov.w	r0, #0
 8006d66:	f380 8811 	msr	BASEPRI, r0
 8006d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006d6e:	6819      	ldr	r1, [r3, #0]
 8006d70:	6808      	ldr	r0, [r1, #0]
 8006d72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006d76:	f380 8809 	msr	PSP, r0
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	4770      	bx	lr

08006d80 <pxCurrentTCBConst>:
 8006d80:	20000900 	.word	0x20000900
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop

08006d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	607b      	str	r3, [r7, #4]
}
 8006da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006da2:	f7fe ff4b 	bl	8005c3c <xTaskIncrementTick>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006dac:	4b06      	ldr	r3, [pc, #24]	@ (8006dc8 <SysTick_Handler+0x40>)
 8006dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	2300      	movs	r3, #0
 8006db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	f383 8811 	msr	BASEPRI, r3
}
 8006dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006dc0:	bf00      	nop
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	e000ed04 	.word	0xe000ed04

08006dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8006dfc <vPortSetupTimerInterrupt+0x30>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006e00 <vPortSetupTimerInterrupt+0x34>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ddc:	4b09      	ldr	r3, [pc, #36]	@ (8006e04 <vPortSetupTimerInterrupt+0x38>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a09      	ldr	r2, [pc, #36]	@ (8006e08 <vPortSetupTimerInterrupt+0x3c>)
 8006de2:	fba2 2303 	umull	r2, r3, r2, r3
 8006de6:	099b      	lsrs	r3, r3, #6
 8006de8:	4a08      	ldr	r2, [pc, #32]	@ (8006e0c <vPortSetupTimerInterrupt+0x40>)
 8006dea:	3b01      	subs	r3, #1
 8006dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dee:	4b03      	ldr	r3, [pc, #12]	@ (8006dfc <vPortSetupTimerInterrupt+0x30>)
 8006df0:	2207      	movs	r2, #7
 8006df2:	601a      	str	r2, [r3, #0]
}
 8006df4:	bf00      	nop
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bc80      	pop	{r7}
 8006dfa:	4770      	bx	lr
 8006dfc:	e000e010 	.word	0xe000e010
 8006e00:	e000e018 	.word	0xe000e018
 8006e04:	20000008 	.word	0x20000008
 8006e08:	10624dd3 	.word	0x10624dd3
 8006e0c:	e000e014 	.word	0xe000e014

08006e10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e16:	f3ef 8305 	mrs	r3, IPSR
 8006e1a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2b0f      	cmp	r3, #15
 8006e20:	d915      	bls.n	8006e4e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e22:	4a17      	ldr	r2, [pc, #92]	@ (8006e80 <vPortValidateInterruptPriority+0x70>)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4413      	add	r3, r2
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e2c:	4b15      	ldr	r3, [pc, #84]	@ (8006e84 <vPortValidateInterruptPriority+0x74>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	7afa      	ldrb	r2, [r7, #11]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d20b      	bcs.n	8006e4e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	607b      	str	r3, [r7, #4]
}
 8006e48:	bf00      	nop
 8006e4a:	bf00      	nop
 8006e4c:	e7fd      	b.n	8006e4a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006e88 <vPortValidateInterruptPriority+0x78>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006e56:	4b0d      	ldr	r3, [pc, #52]	@ (8006e8c <vPortValidateInterruptPriority+0x7c>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d90b      	bls.n	8006e76 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	603b      	str	r3, [r7, #0]
}
 8006e70:	bf00      	nop
 8006e72:	bf00      	nop
 8006e74:	e7fd      	b.n	8006e72 <vPortValidateInterruptPriority+0x62>
	}
 8006e76:	bf00      	nop
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bc80      	pop	{r7}
 8006e7e:	4770      	bx	lr
 8006e80:	e000e3f0 	.word	0xe000e3f0
 8006e84:	20000f2c 	.word	0x20000f2c
 8006e88:	e000ed0c 	.word	0xe000ed0c
 8006e8c:	20000f30 	.word	0x20000f30

08006e90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08a      	sub	sp, #40	@ 0x28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e9c:	f7fe fe14 	bl	8005ac8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ea0:	4b5a      	ldr	r3, [pc, #360]	@ (800700c <pvPortMalloc+0x17c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d101      	bne.n	8006eac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ea8:	f000 f916 	bl	80070d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006eac:	4b58      	ldr	r3, [pc, #352]	@ (8007010 <pvPortMalloc+0x180>)
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f040 8090 	bne.w	8006fda <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d01e      	beq.n	8006efe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006ec0:	2208      	movs	r2, #8
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d015      	beq.n	8006efe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f023 0307 	bic.w	r3, r3, #7
 8006ed8:	3308      	adds	r3, #8
 8006eda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00b      	beq.n	8006efe <pvPortMalloc+0x6e>
	__asm volatile
 8006ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eea:	f383 8811 	msr	BASEPRI, r3
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	617b      	str	r3, [r7, #20]
}
 8006ef8:	bf00      	nop
 8006efa:	bf00      	nop
 8006efc:	e7fd      	b.n	8006efa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d06a      	beq.n	8006fda <pvPortMalloc+0x14a>
 8006f04:	4b43      	ldr	r3, [pc, #268]	@ (8007014 <pvPortMalloc+0x184>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d865      	bhi.n	8006fda <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f0e:	4b42      	ldr	r3, [pc, #264]	@ (8007018 <pvPortMalloc+0x188>)
 8006f10:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f12:	4b41      	ldr	r3, [pc, #260]	@ (8007018 <pvPortMalloc+0x188>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f18:	e004      	b.n	8006f24 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d903      	bls.n	8006f36 <pvPortMalloc+0xa6>
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1f1      	bne.n	8006f1a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f36:	4b35      	ldr	r3, [pc, #212]	@ (800700c <pvPortMalloc+0x17c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d04c      	beq.n	8006fda <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2208      	movs	r2, #8
 8006f46:	4413      	add	r3, r2
 8006f48:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	1ad2      	subs	r2, r2, r3
 8006f5a:	2308      	movs	r3, #8
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d920      	bls.n	8006fa4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4413      	add	r3, r2
 8006f68:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	f003 0307 	and.w	r3, r3, #7
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00b      	beq.n	8006f8c <pvPortMalloc+0xfc>
	__asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	613b      	str	r3, [r7, #16]
}
 8006f86:	bf00      	nop
 8006f88:	bf00      	nop
 8006f8a:	e7fd      	b.n	8006f88 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8e:	685a      	ldr	r2, [r3, #4]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	1ad2      	subs	r2, r2, r3
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f9e:	69b8      	ldr	r0, [r7, #24]
 8006fa0:	f000 f8fc 	bl	800719c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8007014 <pvPortMalloc+0x184>)
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	4a19      	ldr	r2, [pc, #100]	@ (8007014 <pvPortMalloc+0x184>)
 8006fb0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fb2:	4b18      	ldr	r3, [pc, #96]	@ (8007014 <pvPortMalloc+0x184>)
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	4b19      	ldr	r3, [pc, #100]	@ (800701c <pvPortMalloc+0x18c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d203      	bcs.n	8006fc6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006fbe:	4b15      	ldr	r3, [pc, #84]	@ (8007014 <pvPortMalloc+0x184>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a16      	ldr	r2, [pc, #88]	@ (800701c <pvPortMalloc+0x18c>)
 8006fc4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	4b11      	ldr	r3, [pc, #68]	@ (8007010 <pvPortMalloc+0x180>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006fda:	f7fe fd83 	bl	8005ae4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	f003 0307 	and.w	r3, r3, #7
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00b      	beq.n	8007000 <pvPortMalloc+0x170>
	__asm volatile
 8006fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fec:	f383 8811 	msr	BASEPRI, r3
 8006ff0:	f3bf 8f6f 	isb	sy
 8006ff4:	f3bf 8f4f 	dsb	sy
 8006ff8:	60fb      	str	r3, [r7, #12]
}
 8006ffa:	bf00      	nop
 8006ffc:	bf00      	nop
 8006ffe:	e7fd      	b.n	8006ffc <pvPortMalloc+0x16c>
	return pvReturn;
 8007000:	69fb      	ldr	r3, [r7, #28]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3728      	adds	r7, #40	@ 0x28
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	20001b3c 	.word	0x20001b3c
 8007010:	20001b48 	.word	0x20001b48
 8007014:	20001b40 	.word	0x20001b40
 8007018:	20001b34 	.word	0x20001b34
 800701c:	20001b44 	.word	0x20001b44

08007020 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d04a      	beq.n	80070c8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007032:	2308      	movs	r3, #8
 8007034:	425b      	negs	r3, r3
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4413      	add	r3, r2
 800703a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	4b22      	ldr	r3, [pc, #136]	@ (80070d0 <vPortFree+0xb0>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4013      	ands	r3, r2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10b      	bne.n	8007066 <vPortFree+0x46>
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	60fb      	str	r3, [r7, #12]
}
 8007060:	bf00      	nop
 8007062:	bf00      	nop
 8007064:	e7fd      	b.n	8007062 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00b      	beq.n	8007086 <vPortFree+0x66>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	60bb      	str	r3, [r7, #8]
}
 8007080:	bf00      	nop
 8007082:	bf00      	nop
 8007084:	e7fd      	b.n	8007082 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	4b11      	ldr	r3, [pc, #68]	@ (80070d0 <vPortFree+0xb0>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4013      	ands	r3, r2
 8007090:	2b00      	cmp	r3, #0
 8007092:	d019      	beq.n	80070c8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d115      	bne.n	80070c8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	4b0b      	ldr	r3, [pc, #44]	@ (80070d0 <vPortFree+0xb0>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	43db      	mvns	r3, r3
 80070a6:	401a      	ands	r2, r3
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070ac:	f7fe fd0c 	bl	8005ac8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	4b07      	ldr	r3, [pc, #28]	@ (80070d4 <vPortFree+0xb4>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4413      	add	r3, r2
 80070ba:	4a06      	ldr	r2, [pc, #24]	@ (80070d4 <vPortFree+0xb4>)
 80070bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070be:	6938      	ldr	r0, [r7, #16]
 80070c0:	f000 f86c 	bl	800719c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80070c4:	f7fe fd0e 	bl	8005ae4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80070c8:	bf00      	nop
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	20001b48 	.word	0x20001b48
 80070d4:	20001b40 	.word	0x20001b40

080070d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070de:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80070e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070e4:	4b27      	ldr	r3, [pc, #156]	@ (8007184 <prvHeapInit+0xac>)
 80070e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f003 0307 	and.w	r3, r3, #7
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00c      	beq.n	800710c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	3307      	adds	r3, #7
 80070f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 0307 	bic.w	r3, r3, #7
 80070fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	4a1f      	ldr	r2, [pc, #124]	@ (8007184 <prvHeapInit+0xac>)
 8007108:	4413      	add	r3, r2
 800710a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007110:	4a1d      	ldr	r2, [pc, #116]	@ (8007188 <prvHeapInit+0xb0>)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007116:	4b1c      	ldr	r3, [pc, #112]	@ (8007188 <prvHeapInit+0xb0>)
 8007118:	2200      	movs	r2, #0
 800711a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	4413      	add	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007124:	2208      	movs	r2, #8
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	1a9b      	subs	r3, r3, r2
 800712a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0307 	bic.w	r3, r3, #7
 8007132:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	4a15      	ldr	r2, [pc, #84]	@ (800718c <prvHeapInit+0xb4>)
 8007138:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800713a:	4b14      	ldr	r3, [pc, #80]	@ (800718c <prvHeapInit+0xb4>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2200      	movs	r2, #0
 8007140:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007142:	4b12      	ldr	r3, [pc, #72]	@ (800718c <prvHeapInit+0xb4>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2200      	movs	r2, #0
 8007148:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	1ad2      	subs	r2, r2, r3
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007158:	4b0c      	ldr	r3, [pc, #48]	@ (800718c <prvHeapInit+0xb4>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	4a0a      	ldr	r2, [pc, #40]	@ (8007190 <prvHeapInit+0xb8>)
 8007166:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	4a09      	ldr	r2, [pc, #36]	@ (8007194 <prvHeapInit+0xbc>)
 800716e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007170:	4b09      	ldr	r3, [pc, #36]	@ (8007198 <prvHeapInit+0xc0>)
 8007172:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007176:	601a      	str	r2, [r3, #0]
}
 8007178:	bf00      	nop
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	bc80      	pop	{r7}
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	20000f34 	.word	0x20000f34
 8007188:	20001b34 	.word	0x20001b34
 800718c:	20001b3c 	.word	0x20001b3c
 8007190:	20001b44 	.word	0x20001b44
 8007194:	20001b40 	.word	0x20001b40
 8007198:	20001b48 	.word	0x20001b48

0800719c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071a4:	4b27      	ldr	r3, [pc, #156]	@ (8007244 <prvInsertBlockIntoFreeList+0xa8>)
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	e002      	b.n	80071b0 <prvInsertBlockIntoFreeList+0x14>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d8f7      	bhi.n	80071aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	4413      	add	r3, r2
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d108      	bne.n	80071de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	441a      	add	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	441a      	add	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d118      	bne.n	8007224 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	4b14      	ldr	r3, [pc, #80]	@ (8007248 <prvInsertBlockIntoFreeList+0xac>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d00d      	beq.n	800721a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	441a      	add	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	e008      	b.n	800722c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800721a:	4b0b      	ldr	r3, [pc, #44]	@ (8007248 <prvInsertBlockIntoFreeList+0xac>)
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	e003      	b.n	800722c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	429a      	cmp	r2, r3
 8007232:	d002      	beq.n	800723a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800723a:	bf00      	nop
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	bc80      	pop	{r7}
 8007242:	4770      	bx	lr
 8007244:	20001b34 	.word	0x20001b34
 8007248:	20001b3c 	.word	0x20001b3c

0800724c <memset>:
 800724c:	4603      	mov	r3, r0
 800724e:	4402      	add	r2, r0
 8007250:	4293      	cmp	r3, r2
 8007252:	d100      	bne.n	8007256 <memset+0xa>
 8007254:	4770      	bx	lr
 8007256:	f803 1b01 	strb.w	r1, [r3], #1
 800725a:	e7f9      	b.n	8007250 <memset+0x4>

0800725c <__libc_init_array>:
 800725c:	b570      	push	{r4, r5, r6, lr}
 800725e:	2600      	movs	r6, #0
 8007260:	4d0c      	ldr	r5, [pc, #48]	@ (8007294 <__libc_init_array+0x38>)
 8007262:	4c0d      	ldr	r4, [pc, #52]	@ (8007298 <__libc_init_array+0x3c>)
 8007264:	1b64      	subs	r4, r4, r5
 8007266:	10a4      	asrs	r4, r4, #2
 8007268:	42a6      	cmp	r6, r4
 800726a:	d109      	bne.n	8007280 <__libc_init_array+0x24>
 800726c:	f000 f828 	bl	80072c0 <_init>
 8007270:	2600      	movs	r6, #0
 8007272:	4d0a      	ldr	r5, [pc, #40]	@ (800729c <__libc_init_array+0x40>)
 8007274:	4c0a      	ldr	r4, [pc, #40]	@ (80072a0 <__libc_init_array+0x44>)
 8007276:	1b64      	subs	r4, r4, r5
 8007278:	10a4      	asrs	r4, r4, #2
 800727a:	42a6      	cmp	r6, r4
 800727c:	d105      	bne.n	800728a <__libc_init_array+0x2e>
 800727e:	bd70      	pop	{r4, r5, r6, pc}
 8007280:	f855 3b04 	ldr.w	r3, [r5], #4
 8007284:	4798      	blx	r3
 8007286:	3601      	adds	r6, #1
 8007288:	e7ee      	b.n	8007268 <__libc_init_array+0xc>
 800728a:	f855 3b04 	ldr.w	r3, [r5], #4
 800728e:	4798      	blx	r3
 8007290:	3601      	adds	r6, #1
 8007292:	e7f2      	b.n	800727a <__libc_init_array+0x1e>
 8007294:	080073d0 	.word	0x080073d0
 8007298:	080073d0 	.word	0x080073d0
 800729c:	080073d0 	.word	0x080073d0
 80072a0:	080073d4 	.word	0x080073d4

080072a4 <memcpy>:
 80072a4:	440a      	add	r2, r1
 80072a6:	4291      	cmp	r1, r2
 80072a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80072ac:	d100      	bne.n	80072b0 <memcpy+0xc>
 80072ae:	4770      	bx	lr
 80072b0:	b510      	push	{r4, lr}
 80072b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072b6:	4291      	cmp	r1, r2
 80072b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072bc:	d1f9      	bne.n	80072b2 <memcpy+0xe>
 80072be:	bd10      	pop	{r4, pc}

080072c0 <_init>:
 80072c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c2:	bf00      	nop
 80072c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072c6:	bc08      	pop	{r3}
 80072c8:	469e      	mov	lr, r3
 80072ca:	4770      	bx	lr

080072cc <_fini>:
 80072cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ce:	bf00      	nop
 80072d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072d2:	bc08      	pop	{r3}
 80072d4:	469e      	mov	lr, r3
 80072d6:	4770      	bx	lr
