
TX_c6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024d8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080025e4  080025e4  000035e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002620  08002620  00004024  2**0
                  CONTENTS
  4 .ARM          00000000  08002620  08002620  00004024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002620  08002620  00004024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002620  08002620  00003620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002624  08002624  00003624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08002628  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000024  0800264c  00004024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  0800264c  000040e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088be  00000000  00000000  0000404d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001793  00000000  00000000  0000c90b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0000e0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000067f  00000000  00000000  0000e918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016917  00000000  00000000  0000ef97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009caa  00000000  00000000  000258ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080e74  00000000  00000000  0002f558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b03cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021b0  00000000  00000000  000b0410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000b25c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	080025cc 	.word	0x080025cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	080025cc 	.word	0x080025cc

0800014c <CS_Select>:
#define NRF24_CSN_PIN    GPIO_PIN_0



void CS_Select (void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2101      	movs	r1, #1
 8000154:	4802      	ldr	r0, [pc, #8]	@ (8000160 <CS_Select+0x14>)
 8000156:	f000 ff66 	bl	8001026 <HAL_GPIO_WritePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010c00 	.word	0x40010c00

08000164 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2101      	movs	r1, #1
 800016c:	4802      	ldr	r0, [pc, #8]	@ (8000178 <CS_UnSelect+0x14>)
 800016e:	f000 ff5a 	bl	8001026 <HAL_GPIO_WritePin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010c00 	.word	0x40010c00

0800017c <CE_Enable>:


void CE_Enable (void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000180:	2201      	movs	r2, #1
 8000182:	2110      	movs	r1, #16
 8000184:	4802      	ldr	r0, [pc, #8]	@ (8000190 <CE_Enable+0x14>)
 8000186:	f000 ff4e 	bl	8001026 <HAL_GPIO_WritePin>
}
 800018a:	bf00      	nop
 800018c:	bd80      	pop	{r7, pc}
 800018e:	bf00      	nop
 8000190:	40010800 	.word	0x40010800

08000194 <CE_Disable>:

void CE_Disable (void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	2110      	movs	r1, #16
 800019c:	4802      	ldr	r0, [pc, #8]	@ (80001a8 <CE_Disable+0x14>)
 800019e:	f000 ff42 	bl	8001026 <HAL_GPIO_WritePin>
}
 80001a2:	bf00      	nop
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40010800 	.word	0x40010800

080001ac <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	460a      	mov	r2, r1
 80001b6:	71fb      	strb	r3, [r7, #7]
 80001b8:	4613      	mov	r3, r2
 80001ba:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	f043 0320 	orr.w	r3, r3, #32
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80001c6:	79bb      	ldrb	r3, [r7, #6]
 80001c8:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80001ca:	f7ff ffbf 	bl	800014c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80001ce:	f107 010c 	add.w	r1, r7, #12
 80001d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001d6:	2202      	movs	r2, #2
 80001d8:	4804      	ldr	r0, [pc, #16]	@ (80001ec <nrf24_WriteReg+0x40>)
 80001da:	f001 fbe9 	bl	80019b0 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80001de:	f7ff ffc1 	bl	8000164 <CS_UnSelect>
}
 80001e2:	bf00      	nop
 80001e4:	3710      	adds	r7, #16
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	20000044 	.word	0x20000044

080001f0 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b086      	sub	sp, #24
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	607a      	str	r2, [r7, #4]
 80001fc:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	f043 0320 	orr.w	r3, r3, #32
 8000204:	b2db      	uxtb	r3, r3
 8000206:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000208:	f7ff ffa0 	bl	800014c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 800020c:	f107 0114 	add.w	r1, r7, #20
 8000210:	2364      	movs	r3, #100	@ 0x64
 8000212:	2201      	movs	r2, #1
 8000214:	4808      	ldr	r0, [pc, #32]	@ (8000238 <nrf24_WriteRegMulti+0x48>)
 8000216:	f001 fbcb 	bl	80019b0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	b29a      	uxth	r2, r3
 800021e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000222:	68b9      	ldr	r1, [r7, #8]
 8000224:	4804      	ldr	r0, [pc, #16]	@ (8000238 <nrf24_WriteRegMulti+0x48>)
 8000226:	f001 fbc3 	bl	80019b0 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800022a:	f7ff ff9b 	bl	8000164 <CS_UnSelect>
}
 800022e:	bf00      	nop
 8000230:	3718      	adds	r7, #24
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	20000044 	.word	0x20000044

0800023c <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000246:	2300      	movs	r3, #0
 8000248:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800024a:	f7ff ff7f 	bl	800014c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800024e:	1df9      	adds	r1, r7, #7
 8000250:	2364      	movs	r3, #100	@ 0x64
 8000252:	2201      	movs	r2, #1
 8000254:	4808      	ldr	r0, [pc, #32]	@ (8000278 <nrf24_ReadReg+0x3c>)
 8000256:	f001 fbab 	bl	80019b0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800025a:	f107 010f 	add.w	r1, r7, #15
 800025e:	2364      	movs	r3, #100	@ 0x64
 8000260:	2201      	movs	r2, #1
 8000262:	4805      	ldr	r0, [pc, #20]	@ (8000278 <nrf24_ReadReg+0x3c>)
 8000264:	f001 fce7 	bl	8001c36 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000268:	f7ff ff7c 	bl	8000164 <CS_UnSelect>

	return data;
 800026c:	7bfb      	ldrb	r3, [r7, #15]
}
 800026e:	4618      	mov	r0, r3
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000044 	.word	0x20000044

0800027c <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000286:	f7ff ff61 	bl	800014c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 800028a:	1df9      	adds	r1, r7, #7
 800028c:	2364      	movs	r3, #100	@ 0x64
 800028e:	2201      	movs	r2, #1
 8000290:	4804      	ldr	r0, [pc, #16]	@ (80002a4 <nrfsendCmd+0x28>)
 8000292:	f001 fb8d 	bl	80019b0 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000296:	f7ff ff65 	bl	8000164 <CS_UnSelect>
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000044 	.word	0x20000044

080002a8 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b088      	sub	sp, #32
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	2b07      	cmp	r3, #7
 80002b6:	d104      	bne.n	80002c2 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80002b8:	2100      	movs	r1, #0
 80002ba:	2007      	movs	r0, #7
 80002bc:	f7ff ff76 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80002c0:	e090      	b.n	80003e4 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	2b17      	cmp	r3, #23
 80002c6:	d104      	bne.n	80002d2 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80002c8:	2111      	movs	r1, #17
 80002ca:	2017      	movs	r0, #23
 80002cc:	f7ff ff6e 	bl	80001ac <nrf24_WriteReg>
}
 80002d0:	e088      	b.n	80003e4 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80002d2:	2108      	movs	r1, #8
 80002d4:	2000      	movs	r0, #0
 80002d6:	f7ff ff69 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80002da:	213f      	movs	r1, #63	@ 0x3f
 80002dc:	2001      	movs	r0, #1
 80002de:	f7ff ff65 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80002e2:	2103      	movs	r1, #3
 80002e4:	2002      	movs	r0, #2
 80002e6:	f7ff ff61 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80002ea:	2103      	movs	r1, #3
 80002ec:	2003      	movs	r0, #3
 80002ee:	f7ff ff5d 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80002f2:	2103      	movs	r1, #3
 80002f4:	2004      	movs	r0, #4
 80002f6:	f7ff ff59 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80002fa:	2102      	movs	r1, #2
 80002fc:	2005      	movs	r0, #5
 80002fe:	f7ff ff55 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000302:	210e      	movs	r1, #14
 8000304:	2006      	movs	r0, #6
 8000306:	f7ff ff51 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 800030a:	2100      	movs	r1, #0
 800030c:	2007      	movs	r0, #7
 800030e:	f7ff ff4d 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000312:	2100      	movs	r1, #0
 8000314:	2008      	movs	r0, #8
 8000316:	f7ff ff49 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 800031a:	2100      	movs	r1, #0
 800031c:	2009      	movs	r0, #9
 800031e:	f7ff ff45 	bl	80001ac <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000322:	4a32      	ldr	r2, [pc, #200]	@ (80003ec <nrf24_reset+0x144>)
 8000324:	f107 0318 	add.w	r3, r7, #24
 8000328:	e892 0003 	ldmia.w	r2, {r0, r1}
 800032c:	6018      	str	r0, [r3, #0]
 800032e:	3304      	adds	r3, #4
 8000330:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	2205      	movs	r2, #5
 8000338:	4619      	mov	r1, r3
 800033a:	200a      	movs	r0, #10
 800033c:	f7ff ff58 	bl	80001f0 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000340:	4a2b      	ldr	r2, [pc, #172]	@ (80003f0 <nrf24_reset+0x148>)
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	e892 0003 	ldmia.w	r2, {r0, r1}
 800034a:	6018      	str	r0, [r3, #0]
 800034c:	3304      	adds	r3, #4
 800034e:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	2205      	movs	r2, #5
 8000356:	4619      	mov	r1, r3
 8000358:	200b      	movs	r0, #11
 800035a:	f7ff ff49 	bl	80001f0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800035e:	21c3      	movs	r1, #195	@ 0xc3
 8000360:	200c      	movs	r0, #12
 8000362:	f7ff ff23 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8000366:	21c4      	movs	r1, #196	@ 0xc4
 8000368:	200d      	movs	r0, #13
 800036a:	f7ff ff1f 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 800036e:	21c5      	movs	r1, #197	@ 0xc5
 8000370:	200e      	movs	r0, #14
 8000372:	f7ff ff1b 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8000376:	21c6      	movs	r1, #198	@ 0xc6
 8000378:	200f      	movs	r0, #15
 800037a:	f7ff ff17 	bl	80001ac <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800037e:	4a1b      	ldr	r2, [pc, #108]	@ (80003ec <nrf24_reset+0x144>)
 8000380:	f107 0308 	add.w	r3, r7, #8
 8000384:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000388:	6018      	str	r0, [r3, #0]
 800038a:	3304      	adds	r3, #4
 800038c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 800038e:	f107 0308 	add.w	r3, r7, #8
 8000392:	2205      	movs	r2, #5
 8000394:	4619      	mov	r1, r3
 8000396:	2010      	movs	r0, #16
 8000398:	f7ff ff2a 	bl	80001f0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 800039c:	2100      	movs	r1, #0
 800039e:	2011      	movs	r0, #17
 80003a0:	f7ff ff04 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80003a4:	2100      	movs	r1, #0
 80003a6:	2012      	movs	r0, #18
 80003a8:	f7ff ff00 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80003ac:	2100      	movs	r1, #0
 80003ae:	2013      	movs	r0, #19
 80003b0:	f7ff fefc 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80003b4:	2100      	movs	r1, #0
 80003b6:	2014      	movs	r0, #20
 80003b8:	f7ff fef8 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80003bc:	2100      	movs	r1, #0
 80003be:	2015      	movs	r0, #21
 80003c0:	f7ff fef4 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80003c4:	2100      	movs	r1, #0
 80003c6:	2016      	movs	r0, #22
 80003c8:	f7ff fef0 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80003cc:	2111      	movs	r1, #17
 80003ce:	2017      	movs	r0, #23
 80003d0:	f7ff feec 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80003d4:	2100      	movs	r1, #0
 80003d6:	201c      	movs	r0, #28
 80003d8:	f7ff fee8 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80003dc:	2100      	movs	r1, #0
 80003de:	201d      	movs	r0, #29
 80003e0:	f7ff fee4 	bl	80001ac <nrf24_WriteReg>
}
 80003e4:	bf00      	nop
 80003e6:	3720      	adds	r7, #32
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	080025e4 	.word	0x080025e4
 80003f0:	080025ec 	.word	0x080025ec

080003f4 <NRF24_Init>:




void NRF24_Init (void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80003f8:	f7ff fecc 	bl	8000194 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80003fc:	2000      	movs	r0, #0
 80003fe:	f7ff ff53 	bl	80002a8 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8000402:	2100      	movs	r1, #0
 8000404:	2000      	movs	r0, #0
 8000406:	f7ff fed1 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 800040a:	2100      	movs	r1, #0
 800040c:	2001      	movs	r0, #1
 800040e:	f7ff fecd 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8000412:	2100      	movs	r1, #0
 8000414:	2002      	movs	r0, #2
 8000416:	f7ff fec9 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800041a:	2103      	movs	r1, #3
 800041c:	2003      	movs	r0, #3
 800041e:	f7ff fec5 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8000422:	2100      	movs	r1, #0
 8000424:	2004      	movs	r0, #4
 8000426:	f7ff fec1 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800042a:	2100      	movs	r1, #0
 800042c:	2005      	movs	r0, #5
 800042e:	f7ff febd 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8000432:	210e      	movs	r1, #14
 8000434:	2006      	movs	r0, #6
 8000436:	f7ff feb9 	bl	80001ac <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800043a:	f7ff fe9f 	bl	800017c <CE_Enable>

}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}

08000442 <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 8000442:	b580      	push	{r7, lr}
 8000444:	b084      	sub	sp, #16
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
 800044a:	460b      	mov	r3, r1
 800044c:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800044e:	f7ff fea1 	bl	8000194 <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000452:	78fb      	ldrb	r3, [r7, #3]
 8000454:	4619      	mov	r1, r3
 8000456:	2005      	movs	r0, #5
 8000458:	f7ff fea8 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 800045c:	2205      	movs	r2, #5
 800045e:	6879      	ldr	r1, [r7, #4]
 8000460:	2010      	movs	r0, #16
 8000462:	f7ff fec5 	bl	80001f0 <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000466:	2000      	movs	r0, #0
 8000468:	f7ff fee8 	bl	800023c <nrf24_ReadReg>
 800046c:	4603      	mov	r3, r0
 800046e:	73fb      	strb	r3, [r7, #15]
	config = config | (1<<1);   // write 1 in the PWR_UP bit
 8000470:	7bfb      	ldrb	r3, [r7, #15]
 8000472:	f043 0302 	orr.w	r3, r3, #2
 8000476:	73fb      	strb	r3, [r7, #15]
	//config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
	nrf24_WriteReg (CONFIG, config);
 8000478:	7bfb      	ldrb	r3, [r7, #15]
 800047a:	4619      	mov	r1, r3
 800047c:	2000      	movs	r0, #0
 800047e:	f7ff fe95 	bl	80001ac <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000482:	f7ff fe7b 	bl	800017c <CE_Enable>

}
 8000486:	bf00      	nop
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
	...

08000490 <NRF24_Transmit>:


// transmit the data

uint8_t NRF24_Transmit (uint8_t *data)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	73bb      	strb	r3, [r7, #14]

	// select the device
	CS_Select();
 800049c:	f7ff fe56 	bl	800014c <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 80004a0:	23a0      	movs	r3, #160	@ 0xa0
 80004a2:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80004a4:	f107 010e 	add.w	r1, r7, #14
 80004a8:	2364      	movs	r3, #100	@ 0x64
 80004aa:	2201      	movs	r2, #1
 80004ac:	4819      	ldr	r0, [pc, #100]	@ (8000514 <NRF24_Transmit+0x84>)
 80004ae:	f001 fa7f 	bl	80019b0 <HAL_SPI_Transmit>

	// send the payload
	HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000);
 80004b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004b6:	2220      	movs	r2, #32
 80004b8:	6879      	ldr	r1, [r7, #4]
 80004ba:	4816      	ldr	r0, [pc, #88]	@ (8000514 <NRF24_Transmit+0x84>)
 80004bc:	f001 fa78 	bl	80019b0 <HAL_SPI_Transmit>

	// Unselect the device
	CS_UnSelect();
 80004c0:	f7ff fe50 	bl	8000164 <CS_UnSelect>

	HAL_Delay(1);
 80004c4:	2001      	movs	r0, #1
 80004c6:	f000 fb13 	bl	8000af0 <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 80004ca:	2017      	movs	r0, #23
 80004cc:	f7ff feb6 	bl	800023c <nrf24_ReadReg>
 80004d0:	4603      	mov	r3, r0
 80004d2:	73fb      	strb	r3, [r7, #15]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 80004d4:	7bfb      	ldrb	r3, [r7, #15]
 80004d6:	f003 0310 	and.w	r3, r3, #16
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d014      	beq.n	8000508 <NRF24_Transmit+0x78>
 80004de:	7bfb      	ldrb	r3, [r7, #15]
 80004e0:	f003 0308 	and.w	r3, r3, #8
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d10f      	bne.n	8000508 <NRF24_Transmit+0x78>
	{
		cmdtosend = FLUSH_TX;
 80004e8:	23e1      	movs	r3, #225	@ 0xe1
 80004ea:	73bb      	strb	r3, [r7, #14]
		nrfsendCmd(cmdtosend);
 80004ec:	7bbb      	ldrb	r3, [r7, #14]
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff fec4 	bl	800027c <nrfsendCmd>

		// reset FIFO_STATUS
		nrf24_reset (FIFO_STATUS);
 80004f4:	2017      	movs	r0, #23
 80004f6:	f7ff fed7 	bl	80002a8 <nrf24_reset>
		globalcounterSuccseful++;
 80004fa:	4b07      	ldr	r3, [pc, #28]	@ (8000518 <NRF24_Transmit+0x88>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	3301      	adds	r3, #1
 8000500:	4a05      	ldr	r2, [pc, #20]	@ (8000518 <NRF24_Transmit+0x88>)
 8000502:	6013      	str	r3, [r2, #0]
		return 1;
 8000504:	2301      	movs	r3, #1
 8000506:	e000      	b.n	800050a <NRF24_Transmit+0x7a>

	}

	return 0;
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000044 	.word	0x20000044
 8000518:	20000040 	.word	0x20000040

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 fa83 	bl	8000a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f829 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 f8cd 	bl	80006c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800052e:	f000 f86b 	bl	8000608 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000532:	f000 f89f 	bl	8000674 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init();
 8000536:	f7ff ff5d 	bl	80003f4 <NRF24_Init>
  NRF24_TxMode(TxAddress, 10);
 800053a:	210a      	movs	r1, #10
 800053c:	480b      	ldr	r0, [pc, #44]	@ (800056c <main+0x50>)
 800053e:	f7ff ff80 	bl	8000442 <NRF24_TxMode>

  int pinState = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000546:	2102      	movs	r1, #2
 8000548:	4809      	ldr	r0, [pc, #36]	@ (8000570 <main+0x54>)
 800054a:	f000 fd55 	bl	8000ff8 <HAL_GPIO_ReadPin>
 800054e:	4603      	mov	r3, r0
 8000550:	607b      	str	r3, [r7, #4]

	  if (!pinState)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d1f6      	bne.n	8000546 <main+0x2a>
	  {
		  NRF24_Transmit(TxData);
 8000558:	4806      	ldr	r0, [pc, #24]	@ (8000574 <main+0x58>)
 800055a:	f7ff ff99 	bl	8000490 <NRF24_Transmit>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800055e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000562:	4805      	ldr	r0, [pc, #20]	@ (8000578 <main+0x5c>)
 8000564:	f000 fd77 	bl	8001056 <HAL_GPIO_TogglePin>
	  pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000568:	e7ed      	b.n	8000546 <main+0x2a>
 800056a:	bf00      	nop
 800056c:	20000000 	.word	0x20000000
 8000570:	40010c00 	.word	0x40010c00
 8000574:	20000008 	.word	0x20000008
 8000578:	40011000 	.word	0x40011000

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b090      	sub	sp, #64	@ 0x40
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0318 	add.w	r3, r7, #24
 8000586:	2228      	movs	r2, #40	@ 0x28
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f001 fff2 	bl	8002574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059e:	2301      	movs	r3, #1
 80005a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005ba:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0318 	add.w	r3, r7, #24
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 fd5f 	bl	8001088 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005d0:	f000 f908 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2102      	movs	r1, #2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 ffcc 	bl	800158c <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005fa:	f000 f8f3 	bl	80007e4 <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3740      	adds	r7, #64	@ 0x40
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800060c:	4b17      	ldr	r3, [pc, #92]	@ (800066c <MX_SPI1_Init+0x64>)
 800060e:	4a18      	ldr	r2, [pc, #96]	@ (8000670 <MX_SPI1_Init+0x68>)
 8000610:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000612:	4b16      	ldr	r3, [pc, #88]	@ (800066c <MX_SPI1_Init+0x64>)
 8000614:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000618:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800061a:	4b14      	ldr	r3, [pc, #80]	@ (800066c <MX_SPI1_Init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000620:	4b12      	ldr	r3, [pc, #72]	@ (800066c <MX_SPI1_Init+0x64>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000626:	4b11      	ldr	r3, [pc, #68]	@ (800066c <MX_SPI1_Init+0x64>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800062c:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <MX_SPI1_Init+0x64>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000632:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <MX_SPI1_Init+0x64>)
 8000634:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000638:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800063a:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <MX_SPI1_Init+0x64>)
 800063c:	2218      	movs	r2, #24
 800063e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000640:	4b0a      	ldr	r3, [pc, #40]	@ (800066c <MX_SPI1_Init+0x64>)
 8000642:	2200      	movs	r2, #0
 8000644:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000646:	4b09      	ldr	r3, [pc, #36]	@ (800066c <MX_SPI1_Init+0x64>)
 8000648:	2200      	movs	r2, #0
 800064a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800064c:	4b07      	ldr	r3, [pc, #28]	@ (800066c <MX_SPI1_Init+0x64>)
 800064e:	2200      	movs	r2, #0
 8000650:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <MX_SPI1_Init+0x64>)
 8000654:	220a      	movs	r2, #10
 8000656:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	@ (800066c <MX_SPI1_Init+0x64>)
 800065a:	f001 f925 	bl	80018a8 <HAL_SPI_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000664:	f000 f8be 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000044 	.word	0x20000044
 8000670:	40013000 	.word	0x40013000

08000674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 800067a:	4a12      	ldr	r2, [pc, #72]	@ (80006c4 <MX_USART2_UART_Init+0x50>)
 800067c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800067e:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 8000680:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000692:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000698:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 800069a:	220c      	movs	r2, #12
 800069c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 80006ac:	f001 fe84 	bl	80023b8 <HAL_UART_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006b6:	f000 f895 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2000009c 	.word	0x2000009c
 80006c4:	40004400 	.word	0x40004400

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006dc:	4b3d      	ldr	r3, [pc, #244]	@ (80007d4 <MX_GPIO_Init+0x10c>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a3c      	ldr	r2, [pc, #240]	@ (80007d4 <MX_GPIO_Init+0x10c>)
 80006e2:	f043 0310 	orr.w	r3, r3, #16
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b3a      	ldr	r3, [pc, #232]	@ (80007d4 <MX_GPIO_Init+0x10c>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f003 0310 	and.w	r3, r3, #16
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f4:	4b37      	ldr	r3, [pc, #220]	@ (80007d4 <MX_GPIO_Init+0x10c>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a36      	ldr	r2, [pc, #216]	@ (80007d4 <MX_GPIO_Init+0x10c>)
 80006fa:	f043 0320 	orr.w	r3, r3, #32
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b34      	ldr	r3, [pc, #208]	@ (80007d4 <MX_GPIO_Init+0x10c>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0320 	and.w	r3, r3, #32
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070c:	4b31      	ldr	r3, [pc, #196]	@ (80007d4 <MX_GPIO_Init+0x10c>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a30      	ldr	r2, [pc, #192]	@ (80007d4 <MX_GPIO_Init+0x10c>)
 8000712:	f043 0304 	orr.w	r3, r3, #4
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b2e      	ldr	r3, [pc, #184]	@ (80007d4 <MX_GPIO_Init+0x10c>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0304 	and.w	r3, r3, #4
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000724:	4b2b      	ldr	r3, [pc, #172]	@ (80007d4 <MX_GPIO_Init+0x10c>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a2a      	ldr	r2, [pc, #168]	@ (80007d4 <MX_GPIO_Init+0x10c>)
 800072a:	f043 0308 	orr.w	r3, r3, #8
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b28      	ldr	r3, [pc, #160]	@ (80007d4 <MX_GPIO_Init+0x10c>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0308 	and.w	r3, r3, #8
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000742:	4825      	ldr	r0, [pc, #148]	@ (80007d8 <MX_GPIO_Init+0x110>)
 8000744:	f000 fc6f 	bl	8001026 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2110      	movs	r1, #16
 800074c:	4823      	ldr	r0, [pc, #140]	@ (80007dc <MX_GPIO_Init+0x114>)
 800074e:	f000 fc6a 	bl	8001026 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2101      	movs	r1, #1
 8000756:	4822      	ldr	r0, [pc, #136]	@ (80007e0 <MX_GPIO_Init+0x118>)
 8000758:	f000 fc65 	bl	8001026 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800075c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2302      	movs	r3, #2
 800076c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	4619      	mov	r1, r3
 8000774:	4818      	ldr	r0, [pc, #96]	@ (80007d8 <MX_GPIO_Init+0x110>)
 8000776:	f000 fac3 	bl	8000d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800077a:	2310      	movs	r3, #16
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2302      	movs	r3, #2
 8000788:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	4619      	mov	r1, r3
 8000790:	4812      	ldr	r0, [pc, #72]	@ (80007dc <MX_GPIO_Init+0x114>)
 8000792:	f000 fab5 	bl	8000d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000796:	2301      	movs	r3, #1
 8000798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	4619      	mov	r1, r3
 80007ac:	480c      	ldr	r0, [pc, #48]	@ (80007e0 <MX_GPIO_Init+0x118>)
 80007ae:	f000 faa7 	bl	8000d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007b2:	2302      	movs	r3, #2
 80007b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	f107 0310 	add.w	r3, r7, #16
 80007c2:	4619      	mov	r1, r3
 80007c4:	4806      	ldr	r0, [pc, #24]	@ (80007e0 <MX_GPIO_Init+0x118>)
 80007c6:	f000 fa9b 	bl	8000d00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ca:	bf00      	nop
 80007cc:	3720      	adds	r7, #32
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40011000 	.word	0x40011000
 80007dc:	40010800 	.word	0x40010800
 80007e0:	40010c00 	.word	0x40010c00

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <Error_Handler+0x8>

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007f6:	4b15      	ldr	r3, [pc, #84]	@ (800084c <HAL_MspInit+0x5c>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	4a14      	ldr	r2, [pc, #80]	@ (800084c <HAL_MspInit+0x5c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6193      	str	r3, [r2, #24]
 8000802:	4b12      	ldr	r3, [pc, #72]	@ (800084c <HAL_MspInit+0x5c>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <HAL_MspInit+0x5c>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	4a0e      	ldr	r2, [pc, #56]	@ (800084c <HAL_MspInit+0x5c>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000818:	61d3      	str	r3, [r2, #28]
 800081a:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <HAL_MspInit+0x5c>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000826:	4b0a      	ldr	r3, [pc, #40]	@ (8000850 <HAL_MspInit+0x60>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	4a04      	ldr	r2, [pc, #16]	@ (8000850 <HAL_MspInit+0x60>)
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	40021000 	.word	0x40021000
 8000850:	40010000 	.word	0x40010000

08000854 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a1b      	ldr	r2, [pc, #108]	@ (80008dc <HAL_SPI_MspInit+0x88>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d12f      	bne.n	80008d4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000874:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <HAL_SPI_MspInit+0x8c>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a19      	ldr	r2, [pc, #100]	@ (80008e0 <HAL_SPI_MspInit+0x8c>)
 800087a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <HAL_SPI_MspInit+0x8c>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <HAL_SPI_MspInit+0x8c>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a13      	ldr	r2, [pc, #76]	@ (80008e0 <HAL_SPI_MspInit+0x8c>)
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <HAL_SPI_MspInit+0x8c>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0304 	and.w	r3, r3, #4
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008a4:	23a0      	movs	r3, #160	@ 0xa0
 80008a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	4619      	mov	r1, r3
 80008b6:	480b      	ldr	r0, [pc, #44]	@ (80008e4 <HAL_SPI_MspInit+0x90>)
 80008b8:	f000 fa22 	bl	8000d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008bc:	2340      	movs	r3, #64	@ 0x40
 80008be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	4619      	mov	r1, r3
 80008ce:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <HAL_SPI_MspInit+0x90>)
 80008d0:	f000 fa16 	bl	8000d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008d4:	bf00      	nop
 80008d6:	3720      	adds	r7, #32
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40013000 	.word	0x40013000
 80008e0:	40021000 	.word	0x40021000
 80008e4:	40010800 	.word	0x40010800

080008e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a1b      	ldr	r2, [pc, #108]	@ (8000970 <HAL_UART_MspInit+0x88>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d12f      	bne.n	8000968 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000908:	4b1a      	ldr	r3, [pc, #104]	@ (8000974 <HAL_UART_MspInit+0x8c>)
 800090a:	69db      	ldr	r3, [r3, #28]
 800090c:	4a19      	ldr	r2, [pc, #100]	@ (8000974 <HAL_UART_MspInit+0x8c>)
 800090e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000912:	61d3      	str	r3, [r2, #28]
 8000914:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <HAL_UART_MspInit+0x8c>)
 8000916:	69db      	ldr	r3, [r3, #28]
 8000918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <HAL_UART_MspInit+0x8c>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a13      	ldr	r2, [pc, #76]	@ (8000974 <HAL_UART_MspInit+0x8c>)
 8000926:	f043 0304 	orr.w	r3, r3, #4
 800092a:	6193      	str	r3, [r2, #24]
 800092c:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <HAL_UART_MspInit+0x8c>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000938:	2304      	movs	r3, #4
 800093a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000944:	f107 0310 	add.w	r3, r7, #16
 8000948:	4619      	mov	r1, r3
 800094a:	480b      	ldr	r0, [pc, #44]	@ (8000978 <HAL_UART_MspInit+0x90>)
 800094c:	f000 f9d8 	bl	8000d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000950:	2308      	movs	r3, #8
 8000952:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4619      	mov	r1, r3
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <HAL_UART_MspInit+0x90>)
 8000964:	f000 f9cc 	bl	8000d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000968:	bf00      	nop
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40004400 	.word	0x40004400
 8000974:	40021000 	.word	0x40021000
 8000978:	40010800 	.word	0x40010800

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <NMI_Handler+0x4>

08000984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <MemManage_Handler+0x4>

08000994 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr

080009c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009cc:	f000 f874 	bl	8000ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e0:	f7ff fff8 	bl	80009d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e4:	480b      	ldr	r0, [pc, #44]	@ (8000a14 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009e6:	490c      	ldr	r1, [pc, #48]	@ (8000a18 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009e8:	4a0c      	ldr	r2, [pc, #48]	@ (8000a1c <LoopFillZerobss+0x16>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a09      	ldr	r2, [pc, #36]	@ (8000a20 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009fc:	4c09      	ldr	r4, [pc, #36]	@ (8000a24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0a:	f001 fdbb 	bl	8002584 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a0e:	f7ff fd85 	bl	800051c <main>
  bx lr
 8000a12:	4770      	bx	lr
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000a1c:	08002628 	.word	0x08002628
  ldr r2, =_sbss
 8000a20:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000a24:	200000e8 	.word	0x200000e8

08000a28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC1_2_IRQHandler>
	...

08000a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a30:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <HAL_Init+0x28>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a07      	ldr	r2, [pc, #28]	@ (8000a54 <HAL_Init+0x28>)
 8000a36:	f043 0310 	orr.w	r3, r3, #16
 8000a3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f000 f92b 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a42:	200f      	movs	r0, #15
 8000a44:	f000 f808 	bl	8000a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a48:	f7ff fed2 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40022000 	.word	0x40022000

08000a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a60:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <HAL_InitTick+0x54>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <HAL_InitTick+0x58>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f935 	bl	8000ce6 <HAL_SYSTICK_Config>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e00e      	b.n	8000aa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b0f      	cmp	r3, #15
 8000a8a:	d80a      	bhi.n	8000aa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	f000 f90b 	bl	8000cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a98:	4a06      	ldr	r2, [pc, #24]	@ (8000ab4 <HAL_InitTick+0x5c>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e000      	b.n	8000aa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000018 	.word	0x20000018
 8000ab0:	20000020 	.word	0x20000020
 8000ab4:	2000001c 	.word	0x2000001c

08000ab8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000abc:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <HAL_IncTick+0x1c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <HAL_IncTick+0x20>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a03      	ldr	r2, [pc, #12]	@ (8000ad8 <HAL_IncTick+0x20>)
 8000aca:	6013      	str	r3, [r2, #0]
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	20000020 	.word	0x20000020
 8000ad8:	200000e4 	.word	0x200000e4

08000adc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b02      	ldr	r3, [pc, #8]	@ (8000aec <HAL_GetTick+0x10>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	200000e4 	.word	0x200000e4

08000af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af8:	f7ff fff0 	bl	8000adc <HAL_GetTick>
 8000afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b08:	d005      	beq.n	8000b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <HAL_Delay+0x44>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4413      	add	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b16:	bf00      	nop
 8000b18:	f7ff ffe0 	bl	8000adc <HAL_GetTick>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8f7      	bhi.n	8000b18 <HAL_Delay+0x28>
  {
  }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000020 	.word	0x20000020

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	@ (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	@ (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	@ 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	@ 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c64:	d301      	bcc.n	8000c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00f      	b.n	8000c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <SysTick_Config+0x40>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c72:	210f      	movs	r1, #15
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f7ff ff90 	bl	8000b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <SysTick_Config+0x40>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <SysTick_Config+0x40>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff49 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc0:	f7ff ff5e 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	6978      	ldr	r0, [r7, #20]
 8000ccc:	f7ff ff90 	bl	8000bf0 <NVIC_EncodePriority>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff5f 	bl	8000b9c <__NVIC_SetPriority>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff ffb0 	bl	8000c54 <SysTick_Config>
 8000cf4:	4603      	mov	r3, r0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b08b      	sub	sp, #44	@ 0x2c
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d12:	e161      	b.n	8000fd8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d14:	2201      	movs	r2, #1
 8000d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	69fa      	ldr	r2, [r7, #28]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	f040 8150 	bne.w	8000fd2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	4a97      	ldr	r2, [pc, #604]	@ (8000f94 <HAL_GPIO_Init+0x294>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d05e      	beq.n	8000dfa <HAL_GPIO_Init+0xfa>
 8000d3c:	4a95      	ldr	r2, [pc, #596]	@ (8000f94 <HAL_GPIO_Init+0x294>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d875      	bhi.n	8000e2e <HAL_GPIO_Init+0x12e>
 8000d42:	4a95      	ldr	r2, [pc, #596]	@ (8000f98 <HAL_GPIO_Init+0x298>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d058      	beq.n	8000dfa <HAL_GPIO_Init+0xfa>
 8000d48:	4a93      	ldr	r2, [pc, #588]	@ (8000f98 <HAL_GPIO_Init+0x298>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d86f      	bhi.n	8000e2e <HAL_GPIO_Init+0x12e>
 8000d4e:	4a93      	ldr	r2, [pc, #588]	@ (8000f9c <HAL_GPIO_Init+0x29c>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d052      	beq.n	8000dfa <HAL_GPIO_Init+0xfa>
 8000d54:	4a91      	ldr	r2, [pc, #580]	@ (8000f9c <HAL_GPIO_Init+0x29c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d869      	bhi.n	8000e2e <HAL_GPIO_Init+0x12e>
 8000d5a:	4a91      	ldr	r2, [pc, #580]	@ (8000fa0 <HAL_GPIO_Init+0x2a0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d04c      	beq.n	8000dfa <HAL_GPIO_Init+0xfa>
 8000d60:	4a8f      	ldr	r2, [pc, #572]	@ (8000fa0 <HAL_GPIO_Init+0x2a0>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d863      	bhi.n	8000e2e <HAL_GPIO_Init+0x12e>
 8000d66:	4a8f      	ldr	r2, [pc, #572]	@ (8000fa4 <HAL_GPIO_Init+0x2a4>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d046      	beq.n	8000dfa <HAL_GPIO_Init+0xfa>
 8000d6c:	4a8d      	ldr	r2, [pc, #564]	@ (8000fa4 <HAL_GPIO_Init+0x2a4>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d85d      	bhi.n	8000e2e <HAL_GPIO_Init+0x12e>
 8000d72:	2b12      	cmp	r3, #18
 8000d74:	d82a      	bhi.n	8000dcc <HAL_GPIO_Init+0xcc>
 8000d76:	2b12      	cmp	r3, #18
 8000d78:	d859      	bhi.n	8000e2e <HAL_GPIO_Init+0x12e>
 8000d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d80 <HAL_GPIO_Init+0x80>)
 8000d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d80:	08000dfb 	.word	0x08000dfb
 8000d84:	08000dd5 	.word	0x08000dd5
 8000d88:	08000de7 	.word	0x08000de7
 8000d8c:	08000e29 	.word	0x08000e29
 8000d90:	08000e2f 	.word	0x08000e2f
 8000d94:	08000e2f 	.word	0x08000e2f
 8000d98:	08000e2f 	.word	0x08000e2f
 8000d9c:	08000e2f 	.word	0x08000e2f
 8000da0:	08000e2f 	.word	0x08000e2f
 8000da4:	08000e2f 	.word	0x08000e2f
 8000da8:	08000e2f 	.word	0x08000e2f
 8000dac:	08000e2f 	.word	0x08000e2f
 8000db0:	08000e2f 	.word	0x08000e2f
 8000db4:	08000e2f 	.word	0x08000e2f
 8000db8:	08000e2f 	.word	0x08000e2f
 8000dbc:	08000e2f 	.word	0x08000e2f
 8000dc0:	08000e2f 	.word	0x08000e2f
 8000dc4:	08000ddd 	.word	0x08000ddd
 8000dc8:	08000df1 	.word	0x08000df1
 8000dcc:	4a76      	ldr	r2, [pc, #472]	@ (8000fa8 <HAL_GPIO_Init+0x2a8>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d013      	beq.n	8000dfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dd2:	e02c      	b.n	8000e2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	623b      	str	r3, [r7, #32]
          break;
 8000dda:	e029      	b.n	8000e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	3304      	adds	r3, #4
 8000de2:	623b      	str	r3, [r7, #32]
          break;
 8000de4:	e024      	b.n	8000e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	3308      	adds	r3, #8
 8000dec:	623b      	str	r3, [r7, #32]
          break;
 8000dee:	e01f      	b.n	8000e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	330c      	adds	r3, #12
 8000df6:	623b      	str	r3, [r7, #32]
          break;
 8000df8:	e01a      	b.n	8000e30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d102      	bne.n	8000e08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e02:	2304      	movs	r3, #4
 8000e04:	623b      	str	r3, [r7, #32]
          break;
 8000e06:	e013      	b.n	8000e30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d105      	bne.n	8000e1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e10:	2308      	movs	r3, #8
 8000e12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69fa      	ldr	r2, [r7, #28]
 8000e18:	611a      	str	r2, [r3, #16]
          break;
 8000e1a:	e009      	b.n	8000e30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e1c:	2308      	movs	r3, #8
 8000e1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	69fa      	ldr	r2, [r7, #28]
 8000e24:	615a      	str	r2, [r3, #20]
          break;
 8000e26:	e003      	b.n	8000e30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
          break;
 8000e2c:	e000      	b.n	8000e30 <HAL_GPIO_Init+0x130>
          break;
 8000e2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	2bff      	cmp	r3, #255	@ 0xff
 8000e34:	d801      	bhi.n	8000e3a <HAL_GPIO_Init+0x13a>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	e001      	b.n	8000e3e <HAL_GPIO_Init+0x13e>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	2bff      	cmp	r3, #255	@ 0xff
 8000e44:	d802      	bhi.n	8000e4c <HAL_GPIO_Init+0x14c>
 8000e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	e002      	b.n	8000e52 <HAL_GPIO_Init+0x152>
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e4e:	3b08      	subs	r3, #8
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	210f      	movs	r1, #15
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	401a      	ands	r2, r3
 8000e64:	6a39      	ldr	r1, [r7, #32]
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 80a9 	beq.w	8000fd2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e80:	4b4a      	ldr	r3, [pc, #296]	@ (8000fac <HAL_GPIO_Init+0x2ac>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a49      	ldr	r2, [pc, #292]	@ (8000fac <HAL_GPIO_Init+0x2ac>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b47      	ldr	r3, [pc, #284]	@ (8000fac <HAL_GPIO_Init+0x2ac>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e98:	4a45      	ldr	r2, [pc, #276]	@ (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9c:	089b      	lsrs	r3, r3, #2
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	220f      	movs	r2, #15
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a3d      	ldr	r2, [pc, #244]	@ (8000fb4 <HAL_GPIO_Init+0x2b4>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d00d      	beq.n	8000ee0 <HAL_GPIO_Init+0x1e0>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a3c      	ldr	r2, [pc, #240]	@ (8000fb8 <HAL_GPIO_Init+0x2b8>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d007      	beq.n	8000edc <HAL_GPIO_Init+0x1dc>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a3b      	ldr	r2, [pc, #236]	@ (8000fbc <HAL_GPIO_Init+0x2bc>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d101      	bne.n	8000ed8 <HAL_GPIO_Init+0x1d8>
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	e004      	b.n	8000ee2 <HAL_GPIO_Init+0x1e2>
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e002      	b.n	8000ee2 <HAL_GPIO_Init+0x1e2>
 8000edc:	2301      	movs	r3, #1
 8000ede:	e000      	b.n	8000ee2 <HAL_GPIO_Init+0x1e2>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ee4:	f002 0203 	and.w	r2, r2, #3
 8000ee8:	0092      	lsls	r2, r2, #2
 8000eea:	4093      	lsls	r3, r2
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ef2:	492f      	ldr	r1, [pc, #188]	@ (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	3302      	adds	r3, #2
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d006      	beq.n	8000f1a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc0 <HAL_GPIO_Init+0x2c0>)
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	492b      	ldr	r1, [pc, #172]	@ (8000fc0 <HAL_GPIO_Init+0x2c0>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	608b      	str	r3, [r1, #8]
 8000f18:	e006      	b.n	8000f28 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f1a:	4b29      	ldr	r3, [pc, #164]	@ (8000fc0 <HAL_GPIO_Init+0x2c0>)
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	4927      	ldr	r1, [pc, #156]	@ (8000fc0 <HAL_GPIO_Init+0x2c0>)
 8000f24:	4013      	ands	r3, r2
 8000f26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d006      	beq.n	8000f42 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f34:	4b22      	ldr	r3, [pc, #136]	@ (8000fc0 <HAL_GPIO_Init+0x2c0>)
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	4921      	ldr	r1, [pc, #132]	@ (8000fc0 <HAL_GPIO_Init+0x2c0>)
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	60cb      	str	r3, [r1, #12]
 8000f40:	e006      	b.n	8000f50 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f42:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc0 <HAL_GPIO_Init+0x2c0>)
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	491d      	ldr	r1, [pc, #116]	@ (8000fc0 <HAL_GPIO_Init+0x2c0>)
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d006      	beq.n	8000f6a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f5c:	4b18      	ldr	r3, [pc, #96]	@ (8000fc0 <HAL_GPIO_Init+0x2c0>)
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	4917      	ldr	r1, [pc, #92]	@ (8000fc0 <HAL_GPIO_Init+0x2c0>)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	604b      	str	r3, [r1, #4]
 8000f68:	e006      	b.n	8000f78 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f6a:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <HAL_GPIO_Init+0x2c0>)
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	4913      	ldr	r1, [pc, #76]	@ (8000fc0 <HAL_GPIO_Init+0x2c0>)
 8000f74:	4013      	ands	r3, r2
 8000f76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d01f      	beq.n	8000fc4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f84:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <HAL_GPIO_Init+0x2c0>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	490d      	ldr	r1, [pc, #52]	@ (8000fc0 <HAL_GPIO_Init+0x2c0>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	600b      	str	r3, [r1, #0]
 8000f90:	e01f      	b.n	8000fd2 <HAL_GPIO_Init+0x2d2>
 8000f92:	bf00      	nop
 8000f94:	10320000 	.word	0x10320000
 8000f98:	10310000 	.word	0x10310000
 8000f9c:	10220000 	.word	0x10220000
 8000fa0:	10210000 	.word	0x10210000
 8000fa4:	10120000 	.word	0x10120000
 8000fa8:	10110000 	.word	0x10110000
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40010000 	.word	0x40010000
 8000fb4:	40010800 	.word	0x40010800
 8000fb8:	40010c00 	.word	0x40010c00
 8000fbc:	40011000 	.word	0x40011000
 8000fc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <HAL_GPIO_Init+0x2f4>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	4909      	ldr	r1, [pc, #36]	@ (8000ff4 <HAL_GPIO_Init+0x2f4>)
 8000fce:	4013      	ands	r3, r2
 8000fd0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fde:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f47f ae96 	bne.w	8000d14 <HAL_GPIO_Init+0x14>
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	372c      	adds	r7, #44	@ 0x2c
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	40010400 	.word	0x40010400

08000ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	887b      	ldrh	r3, [r7, #2]
 800100a:	4013      	ands	r3, r2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d002      	beq.n	8001016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001010:	2301      	movs	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	e001      	b.n	800101a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001016:	2300      	movs	r3, #0
 8001018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr

08001026 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	460b      	mov	r3, r1
 8001030:	807b      	strh	r3, [r7, #2]
 8001032:	4613      	mov	r3, r2
 8001034:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001036:	787b      	ldrb	r3, [r7, #1]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800103c:	887a      	ldrh	r2, [r7, #2]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001042:	e003      	b.n	800104c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001044:	887b      	ldrh	r3, [r7, #2]
 8001046:	041a      	lsls	r2, r3, #16
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	611a      	str	r2, [r3, #16]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001056:	b480      	push	{r7}
 8001058:	b085      	sub	sp, #20
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	460b      	mov	r3, r1
 8001060:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001068:	887a      	ldrh	r2, [r7, #2]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4013      	ands	r3, r2
 800106e:	041a      	lsls	r2, r3, #16
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	43d9      	mvns	r1, r3
 8001074:	887b      	ldrh	r3, [r7, #2]
 8001076:	400b      	ands	r3, r1
 8001078:	431a      	orrs	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	611a      	str	r2, [r3, #16]
}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e272      	b.n	8001580 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 8087 	beq.w	80011b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010a8:	4b92      	ldr	r3, [pc, #584]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 030c 	and.w	r3, r3, #12
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d00c      	beq.n	80010ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010b4:	4b8f      	ldr	r3, [pc, #572]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 030c 	and.w	r3, r3, #12
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d112      	bne.n	80010e6 <HAL_RCC_OscConfig+0x5e>
 80010c0:	4b8c      	ldr	r3, [pc, #560]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010cc:	d10b      	bne.n	80010e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ce:	4b89      	ldr	r3, [pc, #548]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d06c      	beq.n	80011b4 <HAL_RCC_OscConfig+0x12c>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d168      	bne.n	80011b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e24c      	b.n	8001580 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010ee:	d106      	bne.n	80010fe <HAL_RCC_OscConfig+0x76>
 80010f0:	4b80      	ldr	r3, [pc, #512]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a7f      	ldr	r2, [pc, #508]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80010f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	e02e      	b.n	800115c <HAL_RCC_OscConfig+0xd4>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10c      	bne.n	8001120 <HAL_RCC_OscConfig+0x98>
 8001106:	4b7b      	ldr	r3, [pc, #492]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a7a      	ldr	r2, [pc, #488]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 800110c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4b78      	ldr	r3, [pc, #480]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a77      	ldr	r2, [pc, #476]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001118:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e01d      	b.n	800115c <HAL_RCC_OscConfig+0xd4>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001128:	d10c      	bne.n	8001144 <HAL_RCC_OscConfig+0xbc>
 800112a:	4b72      	ldr	r3, [pc, #456]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a71      	ldr	r2, [pc, #452]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	4b6f      	ldr	r3, [pc, #444]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a6e      	ldr	r2, [pc, #440]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 800113c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	e00b      	b.n	800115c <HAL_RCC_OscConfig+0xd4>
 8001144:	4b6b      	ldr	r3, [pc, #428]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a6a      	ldr	r2, [pc, #424]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 800114a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	4b68      	ldr	r3, [pc, #416]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a67      	ldr	r2, [pc, #412]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800115a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d013      	beq.n	800118c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fcba 	bl	8000adc <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800116c:	f7ff fcb6 	bl	8000adc <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b64      	cmp	r3, #100	@ 0x64
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e200      	b.n	8001580 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	4b5d      	ldr	r3, [pc, #372]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f0      	beq.n	800116c <HAL_RCC_OscConfig+0xe4>
 800118a:	e014      	b.n	80011b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fca6 	bl	8000adc <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff fca2 	bl	8000adc <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	@ 0x64
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e1ec      	b.n	8001580 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a6:	4b53      	ldr	r3, [pc, #332]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f0      	bne.n	8001194 <HAL_RCC_OscConfig+0x10c>
 80011b2:	e000      	b.n	80011b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d063      	beq.n	800128a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011c2:	4b4c      	ldr	r3, [pc, #304]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 030c 	and.w	r3, r3, #12
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d00b      	beq.n	80011e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011ce:	4b49      	ldr	r3, [pc, #292]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 030c 	and.w	r3, r3, #12
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d11c      	bne.n	8001214 <HAL_RCC_OscConfig+0x18c>
 80011da:	4b46      	ldr	r3, [pc, #280]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d116      	bne.n	8001214 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e6:	4b43      	ldr	r3, [pc, #268]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d005      	beq.n	80011fe <HAL_RCC_OscConfig+0x176>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d001      	beq.n	80011fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e1c0      	b.n	8001580 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fe:	4b3d      	ldr	r3, [pc, #244]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	4939      	ldr	r1, [pc, #228]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 800120e:	4313      	orrs	r3, r2
 8001210:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001212:	e03a      	b.n	800128a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d020      	beq.n	800125e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800121c:	4b36      	ldr	r3, [pc, #216]	@ (80012f8 <HAL_RCC_OscConfig+0x270>)
 800121e:	2201      	movs	r2, #1
 8001220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001222:	f7ff fc5b 	bl	8000adc <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800122a:	f7ff fc57 	bl	8000adc <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e1a1      	b.n	8001580 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123c:	4b2d      	ldr	r3, [pc, #180]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f0      	beq.n	800122a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001248:	4b2a      	ldr	r3, [pc, #168]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4927      	ldr	r1, [pc, #156]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001258:	4313      	orrs	r3, r2
 800125a:	600b      	str	r3, [r1, #0]
 800125c:	e015      	b.n	800128a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800125e:	4b26      	ldr	r3, [pc, #152]	@ (80012f8 <HAL_RCC_OscConfig+0x270>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fc3a 	bl	8000adc <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800126c:	f7ff fc36 	bl	8000adc <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e180      	b.n	8001580 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127e:	4b1d      	ldr	r3, [pc, #116]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	2b00      	cmp	r3, #0
 8001294:	d03a      	beq.n	800130c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d019      	beq.n	80012d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800129e:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <HAL_RCC_OscConfig+0x274>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a4:	f7ff fc1a 	bl	8000adc <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ac:	f7ff fc16 	bl	8000adc <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e160      	b.n	8001580 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012be:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012ca:	2001      	movs	r0, #1
 80012cc:	f000 face 	bl	800186c <RCC_Delay>
 80012d0:	e01c      	b.n	800130c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012d2:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <HAL_RCC_OscConfig+0x274>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d8:	f7ff fc00 	bl	8000adc <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012de:	e00f      	b.n	8001300 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012e0:	f7ff fbfc 	bl	8000adc <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d908      	bls.n	8001300 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e146      	b.n	8001580 <HAL_RCC_OscConfig+0x4f8>
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000
 80012f8:	42420000 	.word	0x42420000
 80012fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001300:	4b92      	ldr	r3, [pc, #584]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 8001302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1e9      	bne.n	80012e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80a6 	beq.w	8001466 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800131e:	4b8b      	ldr	r3, [pc, #556]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10d      	bne.n	8001346 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	4b88      	ldr	r3, [pc, #544]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	4a87      	ldr	r2, [pc, #540]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001334:	61d3      	str	r3, [r2, #28]
 8001336:	4b85      	ldr	r3, [pc, #532]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001342:	2301      	movs	r3, #1
 8001344:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001346:	4b82      	ldr	r3, [pc, #520]	@ (8001550 <HAL_RCC_OscConfig+0x4c8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800134e:	2b00      	cmp	r3, #0
 8001350:	d118      	bne.n	8001384 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001352:	4b7f      	ldr	r3, [pc, #508]	@ (8001550 <HAL_RCC_OscConfig+0x4c8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a7e      	ldr	r2, [pc, #504]	@ (8001550 <HAL_RCC_OscConfig+0x4c8>)
 8001358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800135c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800135e:	f7ff fbbd 	bl	8000adc <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001366:	f7ff fbb9 	bl	8000adc <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b64      	cmp	r3, #100	@ 0x64
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e103      	b.n	8001580 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001378:	4b75      	ldr	r3, [pc, #468]	@ (8001550 <HAL_RCC_OscConfig+0x4c8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f0      	beq.n	8001366 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d106      	bne.n	800139a <HAL_RCC_OscConfig+0x312>
 800138c:	4b6f      	ldr	r3, [pc, #444]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	4a6e      	ldr	r2, [pc, #440]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6213      	str	r3, [r2, #32]
 8001398:	e02d      	b.n	80013f6 <HAL_RCC_OscConfig+0x36e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10c      	bne.n	80013bc <HAL_RCC_OscConfig+0x334>
 80013a2:	4b6a      	ldr	r3, [pc, #424]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	4a69      	ldr	r2, [pc, #420]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 80013a8:	f023 0301 	bic.w	r3, r3, #1
 80013ac:	6213      	str	r3, [r2, #32]
 80013ae:	4b67      	ldr	r3, [pc, #412]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	4a66      	ldr	r2, [pc, #408]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	f023 0304 	bic.w	r3, r3, #4
 80013b8:	6213      	str	r3, [r2, #32]
 80013ba:	e01c      	b.n	80013f6 <HAL_RCC_OscConfig+0x36e>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	2b05      	cmp	r3, #5
 80013c2:	d10c      	bne.n	80013de <HAL_RCC_OscConfig+0x356>
 80013c4:	4b61      	ldr	r3, [pc, #388]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	4a60      	ldr	r2, [pc, #384]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	6213      	str	r3, [r2, #32]
 80013d0:	4b5e      	ldr	r3, [pc, #376]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	4a5d      	ldr	r2, [pc, #372]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6213      	str	r3, [r2, #32]
 80013dc:	e00b      	b.n	80013f6 <HAL_RCC_OscConfig+0x36e>
 80013de:	4b5b      	ldr	r3, [pc, #364]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	4a5a      	ldr	r2, [pc, #360]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 80013e4:	f023 0301 	bic.w	r3, r3, #1
 80013e8:	6213      	str	r3, [r2, #32]
 80013ea:	4b58      	ldr	r3, [pc, #352]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	4a57      	ldr	r2, [pc, #348]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 80013f0:	f023 0304 	bic.w	r3, r3, #4
 80013f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d015      	beq.n	800142a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fb6d 	bl	8000adc <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001404:	e00a      	b.n	800141c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001406:	f7ff fb69 	bl	8000adc <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001414:	4293      	cmp	r3, r2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e0b1      	b.n	8001580 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141c:	4b4b      	ldr	r3, [pc, #300]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0ee      	beq.n	8001406 <HAL_RCC_OscConfig+0x37e>
 8001428:	e014      	b.n	8001454 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142a:	f7ff fb57 	bl	8000adc <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001430:	e00a      	b.n	8001448 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001432:	f7ff fb53 	bl	8000adc <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001440:	4293      	cmp	r3, r2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e09b      	b.n	8001580 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001448:	4b40      	ldr	r3, [pc, #256]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1ee      	bne.n	8001432 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001454:	7dfb      	ldrb	r3, [r7, #23]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d105      	bne.n	8001466 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800145a:	4b3c      	ldr	r3, [pc, #240]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	4a3b      	ldr	r2, [pc, #236]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 8001460:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001464:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 8087 	beq.w	800157e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001470:	4b36      	ldr	r3, [pc, #216]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 030c 	and.w	r3, r3, #12
 8001478:	2b08      	cmp	r3, #8
 800147a:	d061      	beq.n	8001540 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d146      	bne.n	8001512 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001484:	4b33      	ldr	r3, [pc, #204]	@ (8001554 <HAL_RCC_OscConfig+0x4cc>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148a:	f7ff fb27 	bl	8000adc <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001492:	f7ff fb23 	bl	8000adc <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e06d      	b.n	8001580 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a4:	4b29      	ldr	r3, [pc, #164]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f0      	bne.n	8001492 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014b8:	d108      	bne.n	80014cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014ba:	4b24      	ldr	r3, [pc, #144]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	4921      	ldr	r1, [pc, #132]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014cc:	4b1f      	ldr	r3, [pc, #124]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a19      	ldr	r1, [r3, #32]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014dc:	430b      	orrs	r3, r1
 80014de:	491b      	ldr	r1, [pc, #108]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001554 <HAL_RCC_OscConfig+0x4cc>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ea:	f7ff faf7 	bl	8000adc <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f2:	f7ff faf3 	bl	8000adc <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e03d      	b.n	8001580 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x46a>
 8001510:	e035      	b.n	800157e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <HAL_RCC_OscConfig+0x4cc>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fae0 	bl	8000adc <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001520:	f7ff fadc 	bl	8000adc <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e026      	b.n	8001580 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_RCC_OscConfig+0x4c4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x498>
 800153e:	e01e      	b.n	800157e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d107      	bne.n	8001558 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e019      	b.n	8001580 <HAL_RCC_OscConfig+0x4f8>
 800154c:	40021000 	.word	0x40021000
 8001550:	40007000 	.word	0x40007000
 8001554:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001558:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <HAL_RCC_OscConfig+0x500>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	429a      	cmp	r2, r3
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001576:	429a      	cmp	r2, r3
 8001578:	d001      	beq.n	800157e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40021000 	.word	0x40021000

0800158c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e0d0      	b.n	8001742 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015a0:	4b6a      	ldr	r3, [pc, #424]	@ (800174c <HAL_RCC_ClockConfig+0x1c0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d910      	bls.n	80015d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ae:	4b67      	ldr	r3, [pc, #412]	@ (800174c <HAL_RCC_ClockConfig+0x1c0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 0207 	bic.w	r2, r3, #7
 80015b6:	4965      	ldr	r1, [pc, #404]	@ (800174c <HAL_RCC_ClockConfig+0x1c0>)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015be:	4b63      	ldr	r3, [pc, #396]	@ (800174c <HAL_RCC_ClockConfig+0x1c0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0b8      	b.n	8001742 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d020      	beq.n	800161e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e8:	4b59      	ldr	r3, [pc, #356]	@ (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	4a58      	ldr	r2, [pc, #352]	@ (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 80015ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001600:	4b53      	ldr	r3, [pc, #332]	@ (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	4a52      	ldr	r2, [pc, #328]	@ (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800160a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800160c:	4b50      	ldr	r3, [pc, #320]	@ (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	494d      	ldr	r1, [pc, #308]	@ (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 800161a:	4313      	orrs	r3, r2
 800161c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d040      	beq.n	80016ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d107      	bne.n	8001642 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001632:	4b47      	ldr	r3, [pc, #284]	@ (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d115      	bne.n	800166a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e07f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d107      	bne.n	800165a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164a:	4b41      	ldr	r3, [pc, #260]	@ (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d109      	bne.n	800166a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e073      	b.n	8001742 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165a:	4b3d      	ldr	r3, [pc, #244]	@ (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e06b      	b.n	8001742 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800166a:	4b39      	ldr	r3, [pc, #228]	@ (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f023 0203 	bic.w	r2, r3, #3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4936      	ldr	r1, [pc, #216]	@ (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 8001678:	4313      	orrs	r3, r2
 800167a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800167c:	f7ff fa2e 	bl	8000adc <HAL_GetTick>
 8001680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001682:	e00a      	b.n	800169a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001684:	f7ff fa2a 	bl	8000adc <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001692:	4293      	cmp	r3, r2
 8001694:	d901      	bls.n	800169a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e053      	b.n	8001742 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169a:	4b2d      	ldr	r3, [pc, #180]	@ (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 020c 	and.w	r2, r3, #12
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d1eb      	bne.n	8001684 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016ac:	4b27      	ldr	r3, [pc, #156]	@ (800174c <HAL_RCC_ClockConfig+0x1c0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d210      	bcs.n	80016dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ba:	4b24      	ldr	r3, [pc, #144]	@ (800174c <HAL_RCC_ClockConfig+0x1c0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 0207 	bic.w	r2, r3, #7
 80016c2:	4922      	ldr	r1, [pc, #136]	@ (800174c <HAL_RCC_ClockConfig+0x1c0>)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ca:	4b20      	ldr	r3, [pc, #128]	@ (800174c <HAL_RCC_ClockConfig+0x1c0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e032      	b.n	8001742 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e8:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4916      	ldr	r1, [pc, #88]	@ (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d009      	beq.n	800171a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001706:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	490e      	ldr	r1, [pc, #56]	@ (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	4313      	orrs	r3, r2
 8001718:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800171a:	f000 f821 	bl	8001760 <HAL_RCC_GetSysClockFreq>
 800171e:	4602      	mov	r2, r0
 8001720:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	091b      	lsrs	r3, r3, #4
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	490a      	ldr	r1, [pc, #40]	@ (8001754 <HAL_RCC_ClockConfig+0x1c8>)
 800172c:	5ccb      	ldrb	r3, [r1, r3]
 800172e:	fa22 f303 	lsr.w	r3, r2, r3
 8001732:	4a09      	ldr	r2, [pc, #36]	@ (8001758 <HAL_RCC_ClockConfig+0x1cc>)
 8001734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <HAL_RCC_ClockConfig+0x1d0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff f98c 	bl	8000a58 <HAL_InitTick>

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40022000 	.word	0x40022000
 8001750:	40021000 	.word	0x40021000
 8001754:	080025f4 	.word	0x080025f4
 8001758:	20000018 	.word	0x20000018
 800175c:	2000001c 	.word	0x2000001c

08001760 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800177a:	4b1e      	ldr	r3, [pc, #120]	@ (80017f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	2b04      	cmp	r3, #4
 8001788:	d002      	beq.n	8001790 <HAL_RCC_GetSysClockFreq+0x30>
 800178a:	2b08      	cmp	r3, #8
 800178c:	d003      	beq.n	8001796 <HAL_RCC_GetSysClockFreq+0x36>
 800178e:	e027      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001790:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001792:	613b      	str	r3, [r7, #16]
      break;
 8001794:	e027      	b.n	80017e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	0c9b      	lsrs	r3, r3, #18
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	4a17      	ldr	r2, [pc, #92]	@ (80017fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80017a0:	5cd3      	ldrb	r3, [r2, r3]
 80017a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d010      	beq.n	80017d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017ae:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	0c5b      	lsrs	r3, r3, #17
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	4a11      	ldr	r2, [pc, #68]	@ (8001800 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017ba:	5cd3      	ldrb	r3, [r2, r3]
 80017bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a0d      	ldr	r2, [pc, #52]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80017c2:	fb03 f202 	mul.w	r2, r3, r2
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e004      	b.n	80017da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001804 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017d4:	fb02 f303 	mul.w	r3, r2, r3
 80017d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	613b      	str	r3, [r7, #16]
      break;
 80017de:	e002      	b.n	80017e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017e0:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80017e2:	613b      	str	r3, [r7, #16]
      break;
 80017e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017e6:	693b      	ldr	r3, [r7, #16]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	371c      	adds	r7, #28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000
 80017f8:	007a1200 	.word	0x007a1200
 80017fc:	0800260c 	.word	0x0800260c
 8001800:	0800261c 	.word	0x0800261c
 8001804:	003d0900 	.word	0x003d0900

08001808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800180c:	4b02      	ldr	r3, [pc, #8]	@ (8001818 <HAL_RCC_GetHCLKFreq+0x10>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	20000018 	.word	0x20000018

0800181c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001820:	f7ff fff2 	bl	8001808 <HAL_RCC_GetHCLKFreq>
 8001824:	4602      	mov	r2, r0
 8001826:	4b05      	ldr	r3, [pc, #20]	@ (800183c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	0a1b      	lsrs	r3, r3, #8
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	4903      	ldr	r1, [pc, #12]	@ (8001840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001832:	5ccb      	ldrb	r3, [r1, r3]
 8001834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001838:	4618      	mov	r0, r3
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40021000 	.word	0x40021000
 8001840:	08002604 	.word	0x08002604

08001844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001848:	f7ff ffde 	bl	8001808 <HAL_RCC_GetHCLKFreq>
 800184c:	4602      	mov	r2, r0
 800184e:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	0adb      	lsrs	r3, r3, #11
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	4903      	ldr	r1, [pc, #12]	@ (8001868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800185a:	5ccb      	ldrb	r3, [r1, r3]
 800185c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001860:	4618      	mov	r0, r3
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40021000 	.word	0x40021000
 8001868:	08002604 	.word	0x08002604

0800186c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001874:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <RCC_Delay+0x34>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0a      	ldr	r2, [pc, #40]	@ (80018a4 <RCC_Delay+0x38>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	0a5b      	lsrs	r3, r3, #9
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	fb02 f303 	mul.w	r3, r2, r3
 8001886:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001888:	bf00      	nop
  }
  while (Delay --);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1e5a      	subs	r2, r3, #1
 800188e:	60fa      	str	r2, [r7, #12]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f9      	bne.n	8001888 <RCC_Delay+0x1c>
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	20000018 	.word	0x20000018
 80018a4:	10624dd3 	.word	0x10624dd3

080018a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e076      	b.n	80019a8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d108      	bne.n	80018d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80018ca:	d009      	beq.n	80018e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
 80018d2:	e005      	b.n	80018e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d106      	bne.n	8001900 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7fe ffaa 	bl	8000854 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2202      	movs	r2, #2
 8001904:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001916:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001928:	431a      	orrs	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001964:	ea42 0103 	orr.w	r1, r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	0c1a      	lsrs	r2, r3, #16
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f002 0204 	and.w	r2, r2, #4
 8001986:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	69da      	ldr	r2, [r3, #28]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001996:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	4613      	mov	r3, r2
 80019be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_SPI_Transmit+0x22>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e12d      	b.n	8001c2e <HAL_SPI_Transmit+0x27e>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019da:	f7ff f87f 	bl	8000adc <HAL_GetTick>
 80019de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d002      	beq.n	80019f6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80019f0:	2302      	movs	r3, #2
 80019f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80019f4:	e116      	b.n	8001c24 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <HAL_SPI_Transmit+0x52>
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d102      	bne.n	8001a08 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a06:	e10d      	b.n	8001c24 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	88fa      	ldrh	r2, [r7, #6]
 8001a20:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	88fa      	ldrh	r2, [r7, #6]
 8001a26:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a4e:	d10f      	bne.n	8001a70 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a7a:	2b40      	cmp	r3, #64	@ 0x40
 8001a7c:	d007      	beq.n	8001a8e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a96:	d14f      	bne.n	8001b38 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <HAL_SPI_Transmit+0xf6>
 8001aa0:	8afb      	ldrh	r3, [r7, #22]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d142      	bne.n	8001b2c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	881a      	ldrh	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	1c9a      	adds	r2, r3, #2
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001aca:	e02f      	b.n	8001b2c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d112      	bne.n	8001b00 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	881a      	ldrh	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	1c9a      	adds	r2, r3, #2
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	3b01      	subs	r3, #1
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001afe:	e015      	b.n	8001b2c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b00:	f7fe ffec 	bl	8000adc <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d803      	bhi.n	8001b18 <HAL_SPI_Transmit+0x168>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b16:	d102      	bne.n	8001b1e <HAL_SPI_Transmit+0x16e>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d106      	bne.n	8001b2c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001b2a:	e07b      	b.n	8001c24 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1ca      	bne.n	8001acc <HAL_SPI_Transmit+0x11c>
 8001b36:	e050      	b.n	8001bda <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <HAL_SPI_Transmit+0x196>
 8001b40:	8afb      	ldrh	r3, [r7, #22]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d144      	bne.n	8001bd0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	330c      	adds	r3, #12
 8001b50:	7812      	ldrb	r2, [r2, #0]
 8001b52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001b6c:	e030      	b.n	8001bd0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d113      	bne.n	8001ba4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	330c      	adds	r3, #12
 8001b86:	7812      	ldrb	r2, [r2, #0]
 8001b88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001ba2:	e015      	b.n	8001bd0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ba4:	f7fe ff9a 	bl	8000adc <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d803      	bhi.n	8001bbc <HAL_SPI_Transmit+0x20c>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bba:	d102      	bne.n	8001bc2 <HAL_SPI_Transmit+0x212>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d106      	bne.n	8001bd0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001bce:	e029      	b.n	8001c24 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1c9      	bne.n	8001b6e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	6839      	ldr	r1, [r7, #0]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 fbcc 	bl	800237c <SPI_EndRxTxTransaction>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2220      	movs	r2, #32
 8001bee:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10a      	bne.n	8001c0e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	77fb      	strb	r3, [r7, #31]
 8001c1a:	e003      	b.n	8001c24 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001c2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3720      	adds	r7, #32
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b088      	sub	sp, #32
 8001c3a:	af02      	add	r7, sp, #8
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	603b      	str	r3, [r7, #0]
 8001c42:	4613      	mov	r3, r2
 8001c44:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d002      	beq.n	8001c5c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8001c56:	2302      	movs	r3, #2
 8001c58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c5a:	e0fb      	b.n	8001e54 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c64:	d112      	bne.n	8001c8c <HAL_SPI_Receive+0x56>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10e      	bne.n	8001c8c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2204      	movs	r2, #4
 8001c72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001c76:	88fa      	ldrh	r2, [r7, #6]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	68b9      	ldr	r1, [r7, #8]
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 f8ef 	bl	8001e66 <HAL_SPI_TransmitReceive>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	e0e8      	b.n	8001e5e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_SPI_Receive+0x64>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e0e1      	b.n	8001e5e <HAL_SPI_Receive+0x228>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ca2:	f7fe ff1b 	bl	8000adc <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <HAL_SPI_Receive+0x7e>
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d102      	bne.n	8001cba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001cb8:	e0cc      	b.n	8001e54 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	88fa      	ldrh	r2, [r7, #6]
 8001cd2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	88fa      	ldrh	r2, [r7, #6]
 8001cd8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d00:	d10f      	bne.n	8001d22 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001d20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d2c:	2b40      	cmp	r3, #64	@ 0x40
 8001d2e:	d007      	beq.n	8001d40 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d16a      	bne.n	8001e1e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001d48:	e032      	b.n	8001db0 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d115      	bne.n	8001d84 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f103 020c 	add.w	r2, r3, #12
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d64:	7812      	ldrb	r2, [r2, #0]
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001d82:	e015      	b.n	8001db0 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d84:	f7fe feaa 	bl	8000adc <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d803      	bhi.n	8001d9c <HAL_SPI_Receive+0x166>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9a:	d102      	bne.n	8001da2 <HAL_SPI_Receive+0x16c>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001dae:	e051      	b.n	8001e54 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1c7      	bne.n	8001d4a <HAL_SPI_Receive+0x114>
 8001dba:	e035      	b.n	8001e28 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d113      	bne.n	8001df2 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dd4:	b292      	uxth	r2, r2
 8001dd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ddc:	1c9a      	adds	r2, r3, #2
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001df0:	e015      	b.n	8001e1e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001df2:	f7fe fe73 	bl	8000adc <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d803      	bhi.n	8001e0a <HAL_SPI_Receive+0x1d4>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e08:	d102      	bne.n	8001e10 <HAL_SPI_Receive+0x1da>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d106      	bne.n	8001e1e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001e1c:	e01a      	b.n	8001e54 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1c9      	bne.n	8001dbc <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	6839      	ldr	r1, [r7, #0]
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 fa53 	bl	80022d8 <SPI_EndRxTransaction>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	75fb      	strb	r3, [r7, #23]
 8001e4a:	e003      	b.n	8001e54 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b08c      	sub	sp, #48	@ 0x30
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e74:	2301      	movs	r3, #1
 8001e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_SPI_TransmitReceive+0x26>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e198      	b.n	80021be <HAL_SPI_TransmitReceive+0x358>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e94:	f7fe fe22 	bl	8000adc <HAL_GetTick>
 8001e98:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ea0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001eaa:	887b      	ldrh	r3, [r7, #2]
 8001eac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001eae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d00f      	beq.n	8001ed6 <HAL_SPI_TransmitReceive+0x70>
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001ebc:	d107      	bne.n	8001ece <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d103      	bne.n	8001ece <HAL_SPI_TransmitReceive+0x68>
 8001ec6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d003      	beq.n	8001ed6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8001ed4:	e16d      	b.n	80021b2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_SPI_TransmitReceive+0x82>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <HAL_SPI_TransmitReceive+0x82>
 8001ee2:	887b      	ldrh	r3, [r7, #2]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d103      	bne.n	8001ef0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8001eee:	e160      	b.n	80021b2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d003      	beq.n	8001f04 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2205      	movs	r2, #5
 8001f00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	887a      	ldrh	r2, [r7, #2]
 8001f14:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	887a      	ldrh	r2, [r7, #2]
 8001f1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	887a      	ldrh	r2, [r7, #2]
 8001f26:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	887a      	ldrh	r2, [r7, #2]
 8001f2c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f44:	2b40      	cmp	r3, #64	@ 0x40
 8001f46:	d007      	beq.n	8001f58 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f60:	d17c      	bne.n	800205c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <HAL_SPI_TransmitReceive+0x10a>
 8001f6a:	8b7b      	ldrh	r3, [r7, #26]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d16a      	bne.n	8002046 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f74:	881a      	ldrh	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f80:	1c9a      	adds	r2, r3, #2
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f94:	e057      	b.n	8002046 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d11b      	bne.n	8001fdc <HAL_SPI_TransmitReceive+0x176>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d016      	beq.n	8001fdc <HAL_SPI_TransmitReceive+0x176>
 8001fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d113      	bne.n	8001fdc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb8:	881a      	ldrh	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc4:	1c9a      	adds	r2, r3, #2
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d119      	bne.n	800201e <HAL_SPI_TransmitReceive+0x1b8>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d014      	beq.n	800201e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ffe:	b292      	uxth	r2, r2
 8002000:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002006:	1c9a      	adds	r2, r3, #2
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002010:	b29b      	uxth	r3, r3
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800201a:	2301      	movs	r3, #1
 800201c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800201e:	f7fe fd5d 	bl	8000adc <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800202a:	429a      	cmp	r2, r3
 800202c:	d80b      	bhi.n	8002046 <HAL_SPI_TransmitReceive+0x1e0>
 800202e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002034:	d007      	beq.n	8002046 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002044:	e0b5      	b.n	80021b2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800204a:	b29b      	uxth	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1a2      	bne.n	8001f96 <HAL_SPI_TransmitReceive+0x130>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d19d      	bne.n	8001f96 <HAL_SPI_TransmitReceive+0x130>
 800205a:	e080      	b.n	800215e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <HAL_SPI_TransmitReceive+0x204>
 8002064:	8b7b      	ldrh	r3, [r7, #26]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d16f      	bne.n	800214a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	330c      	adds	r3, #12
 8002074:	7812      	ldrb	r2, [r2, #0]
 8002076:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002086:	b29b      	uxth	r3, r3
 8002088:	3b01      	subs	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002090:	e05b      	b.n	800214a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b02      	cmp	r3, #2
 800209e:	d11c      	bne.n	80020da <HAL_SPI_TransmitReceive+0x274>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d017      	beq.n	80020da <HAL_SPI_TransmitReceive+0x274>
 80020aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d114      	bne.n	80020da <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	330c      	adds	r3, #12
 80020ba:	7812      	ldrb	r2, [r2, #0]
 80020bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d119      	bne.n	800211c <HAL_SPI_TransmitReceive+0x2b6>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d014      	beq.n	800211c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800210e:	b29b      	uxth	r3, r3
 8002110:	3b01      	subs	r3, #1
 8002112:	b29a      	uxth	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002118:	2301      	movs	r3, #1
 800211a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800211c:	f7fe fcde 	bl	8000adc <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002128:	429a      	cmp	r2, r3
 800212a:	d803      	bhi.n	8002134 <HAL_SPI_TransmitReceive+0x2ce>
 800212c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800212e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002132:	d102      	bne.n	800213a <HAL_SPI_TransmitReceive+0x2d4>
 8002134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002136:	2b00      	cmp	r3, #0
 8002138:	d107      	bne.n	800214a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002148:	e033      	b.n	80021b2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800214e:	b29b      	uxth	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d19e      	bne.n	8002092 <HAL_SPI_TransmitReceive+0x22c>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002158:	b29b      	uxth	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d199      	bne.n	8002092 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800215e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002160:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 f90a 	bl	800237c <SPI_EndRxTxTransaction>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d006      	beq.n	800217c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800217a:	e01a      	b.n	80021b2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10a      	bne.n	800219a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80021a8:	e003      	b.n	80021b2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80021ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3730      	adds	r7, #48	@ 0x30
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	4613      	mov	r3, r2
 80021d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80021d8:	f7fe fc80 	bl	8000adc <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e0:	1a9b      	subs	r3, r3, r2
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	4413      	add	r3, r2
 80021e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80021e8:	f7fe fc78 	bl	8000adc <HAL_GetTick>
 80021ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80021ee:	4b39      	ldr	r3, [pc, #228]	@ (80022d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	015b      	lsls	r3, r3, #5
 80021f4:	0d1b      	lsrs	r3, r3, #20
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	fb02 f303 	mul.w	r3, r2, r3
 80021fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021fe:	e054      	b.n	80022aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002206:	d050      	beq.n	80022aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002208:	f7fe fc68 	bl	8000adc <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	429a      	cmp	r2, r3
 8002216:	d902      	bls.n	800221e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d13d      	bne.n	800229a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800222c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002236:	d111      	bne.n	800225c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002240:	d004      	beq.n	800224c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800224a:	d107      	bne.n	800225c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800225a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002260:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002264:	d10f      	bne.n	8002286 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002284:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e017      	b.n	80022ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4013      	ands	r3, r2
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	bf0c      	ite	eq
 80022ba:	2301      	moveq	r3, #1
 80022bc:	2300      	movne	r3, #0
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d19b      	bne.n	8002200 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000018 	.word	0x20000018

080022d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022ec:	d111      	bne.n	8002312 <SPI_EndRxTransaction+0x3a>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022f6:	d004      	beq.n	8002302 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002300:	d107      	bne.n	8002312 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002310:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800231a:	d117      	bne.n	800234c <SPI_EndRxTransaction+0x74>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002324:	d112      	bne.n	800234c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2200      	movs	r2, #0
 800232e:	2101      	movs	r1, #1
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f7ff ff49 	bl	80021c8 <SPI_WaitFlagStateUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d01a      	beq.n	8002372 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002340:	f043 0220 	orr.w	r2, r3, #32
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e013      	b.n	8002374 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2200      	movs	r2, #0
 8002354:	2180      	movs	r1, #128	@ 0x80
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f7ff ff36 	bl	80021c8 <SPI_WaitFlagStateUntilTimeout>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002366:	f043 0220 	orr.w	r2, r3, #32
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e000      	b.n	8002374 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2200      	movs	r2, #0
 8002390:	2180      	movs	r1, #128	@ 0x80
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f7ff ff18 	bl	80021c8 <SPI_WaitFlagStateUntilTimeout>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d007      	beq.n	80023ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a2:	f043 0220 	orr.w	r2, r3, #32
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e000      	b.n	80023b0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e042      	b.n	8002450 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d106      	bne.n	80023e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7fe fa82 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2224      	movs	r2, #36	@ 0x24
 80023e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f82b 	bl	8002458 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002410:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002420:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002430:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2220      	movs	r2, #32
 800243c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	4313      	orrs	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002492:	f023 030c 	bic.w	r3, r3, #12
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	68b9      	ldr	r1, [r7, #8]
 800249c:	430b      	orrs	r3, r1
 800249e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a2c      	ldr	r2, [pc, #176]	@ (800256c <UART_SetConfig+0x114>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d103      	bne.n	80024c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024c0:	f7ff f9c0 	bl	8001844 <HAL_RCC_GetPCLK2Freq>
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	e002      	b.n	80024ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80024c8:	f7ff f9a8 	bl	800181c <HAL_RCC_GetPCLK1Freq>
 80024cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	009a      	lsls	r2, r3, #2
 80024d8:	441a      	add	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e4:	4a22      	ldr	r2, [pc, #136]	@ (8002570 <UART_SetConfig+0x118>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	0119      	lsls	r1, r3, #4
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	009a      	lsls	r2, r3, #2
 80024f8:	441a      	add	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	fbb2 f2f3 	udiv	r2, r2, r3
 8002504:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <UART_SetConfig+0x118>)
 8002506:	fba3 0302 	umull	r0, r3, r3, r2
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	2064      	movs	r0, #100	@ 0x64
 800250e:	fb00 f303 	mul.w	r3, r0, r3
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	3332      	adds	r3, #50	@ 0x32
 8002518:	4a15      	ldr	r2, [pc, #84]	@ (8002570 <UART_SetConfig+0x118>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002524:	4419      	add	r1, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	009a      	lsls	r2, r3, #2
 8002530:	441a      	add	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	fbb2 f2f3 	udiv	r2, r2, r3
 800253c:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <UART_SetConfig+0x118>)
 800253e:	fba3 0302 	umull	r0, r3, r3, r2
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	2064      	movs	r0, #100	@ 0x64
 8002546:	fb00 f303 	mul.w	r3, r0, r3
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	3332      	adds	r3, #50	@ 0x32
 8002550:	4a07      	ldr	r2, [pc, #28]	@ (8002570 <UART_SetConfig+0x118>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	f003 020f 	and.w	r2, r3, #15
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	440a      	add	r2, r1
 8002562:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40013800 	.word	0x40013800
 8002570:	51eb851f 	.word	0x51eb851f

08002574 <memset>:
 8002574:	4603      	mov	r3, r0
 8002576:	4402      	add	r2, r0
 8002578:	4293      	cmp	r3, r2
 800257a:	d100      	bne.n	800257e <memset+0xa>
 800257c:	4770      	bx	lr
 800257e:	f803 1b01 	strb.w	r1, [r3], #1
 8002582:	e7f9      	b.n	8002578 <memset+0x4>

08002584 <__libc_init_array>:
 8002584:	b570      	push	{r4, r5, r6, lr}
 8002586:	2600      	movs	r6, #0
 8002588:	4d0c      	ldr	r5, [pc, #48]	@ (80025bc <__libc_init_array+0x38>)
 800258a:	4c0d      	ldr	r4, [pc, #52]	@ (80025c0 <__libc_init_array+0x3c>)
 800258c:	1b64      	subs	r4, r4, r5
 800258e:	10a4      	asrs	r4, r4, #2
 8002590:	42a6      	cmp	r6, r4
 8002592:	d109      	bne.n	80025a8 <__libc_init_array+0x24>
 8002594:	f000 f81a 	bl	80025cc <_init>
 8002598:	2600      	movs	r6, #0
 800259a:	4d0a      	ldr	r5, [pc, #40]	@ (80025c4 <__libc_init_array+0x40>)
 800259c:	4c0a      	ldr	r4, [pc, #40]	@ (80025c8 <__libc_init_array+0x44>)
 800259e:	1b64      	subs	r4, r4, r5
 80025a0:	10a4      	asrs	r4, r4, #2
 80025a2:	42a6      	cmp	r6, r4
 80025a4:	d105      	bne.n	80025b2 <__libc_init_array+0x2e>
 80025a6:	bd70      	pop	{r4, r5, r6, pc}
 80025a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ac:	4798      	blx	r3
 80025ae:	3601      	adds	r6, #1
 80025b0:	e7ee      	b.n	8002590 <__libc_init_array+0xc>
 80025b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80025b6:	4798      	blx	r3
 80025b8:	3601      	adds	r6, #1
 80025ba:	e7f2      	b.n	80025a2 <__libc_init_array+0x1e>
 80025bc:	08002620 	.word	0x08002620
 80025c0:	08002620 	.word	0x08002620
 80025c4:	08002620 	.word	0x08002620
 80025c8:	08002624 	.word	0x08002624

080025cc <_init>:
 80025cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ce:	bf00      	nop
 80025d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025d2:	bc08      	pop	{r3}
 80025d4:	469e      	mov	lr, r3
 80025d6:	4770      	bx	lr

080025d8 <_fini>:
 80025d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025da:	bf00      	nop
 80025dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025de:	bc08      	pop	{r3}
 80025e0:	469e      	mov	lr, r3
 80025e2:	4770      	bx	lr
